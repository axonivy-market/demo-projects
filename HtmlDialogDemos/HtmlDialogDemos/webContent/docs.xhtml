<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">Documentation</ui:define>

    <ui:define name="head">
        <style type="text/css">
            .docs h1 {
                margin-top: 30px;
            }

            .docs pre {
                font-family: monospace;
                background-color: #0C2238;
                color: #dddddd;
                padding: 1em;
                font-size: 14px;
                border-radius: 3px;
                overflow: auto;
            }

            .docs p, .docs li {
                line-height: 1.5;
            }

            .video-container {
                position: relative;
                width: 100%;
                height: 0;
                padding-bottom: 56.25%;
            }
            .video-container iframe {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }
        </style>
    </ui:define>

    <ui:define name="breadcrumb">
        <li><p:link outcome="/docs">Documentation</p:link></li>
    </ui:define>

    <ui:define name="content">

        <div class="ui-g">
            <div class="ui-g-12">
                <div class="card docs">
                    <h1>Getting Started</h1>
                    <p>First of all, you'd need SASS to compile CSS, proceed to <a href="https://sass-lang.com/install">SASS Installation</a> before beginning if you do not have SASS available in your command line.</p>
                    <p>Demo project has an integrated jetty plugin so running the sample is easy as building the css first followed by the mvn jetty:run command.</p>
<pre>
sass --update src/main/webapp/resources:src/main/webapp/resources --no-source-map
mvn jetty:run
</pre> 
                    <p>Navigate to http://localhost:8080/serenity to view the demos which is exactly same as the live version.</p>                 
                    
                    <h1>Template</h1>
                    <p>Serenity utilizes <a href="http://docs.oracle.com/javaee/6/tutorial/doc/giqxp.html">JSF templating APIs</a> and provides a main template.xhtml along with additional <i>topbar</i>, <i>sidebar</i> and <i>footer</i> fragments for the base layout.
                        These xhtml files must be placed under WEB-INF folder and client pages should reference the template.xhtml as their template.
                        Provided empty.xhtml is a sample content page using the main template.xhtml that defines "content" as the main ui:define placeholder. By default template defines 3 placeholders
                        (page title, header content and actual content) to insert content and you can add more as per your requirements.</p>

                    <p>Sample page below uses the main template from Serenity.</p>
<pre>
&lt;ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml"&gt;

    &lt;ui:define name="title"&gt;Test Page&lt;/ui:define&gt;

    &lt;ui:define name="content"&gt;
        Content goes here
    &lt;/ui:define&gt;

&lt;/ui:composition&gt;
</pre>

                    <p>Other required resources are the css, js and images that are located inside resources/serenity-layout folder, simply copy the serenity-layout folder to your %WEB-APP-FOLDER%/resources folder
                        so that final path would be %WEB-APP-FOLDER%/resources/serenity-layout/. Please refer to demo app or maven project of the demo app as the reference.</p>

                    <h1>GuestPreferences Bean</h1>
                    <p>GuestPreferences is a simple session scoped bean to keep the user customizations of the layout, template xhtml files
                    refer to this bean to dynamically change their behavior such as menu mode or theme. This bean is not necessary to run the Serenity
                    and only used for demo purposes. For example template.xhtml includes layout color depending on a user preference using an EL expression.</p>
<pre>
&lt;h:outputStylesheet name="css/layout-\#{guestPreferences.layout}.css" library="serenity-layout" /&gt;
</pre>
                    <p>In your application, you may also need a similar bean to make the template dynamic or choose a static color with;</p>

<pre>
&lt;h:outputStylesheet name="css/layout-blue.css" library="serenity-layout" /&gt;
</pre>
                    <p>Source code of GuestPreferences.</p>
<pre>
public class GuestPreferences implements Serializable {

    private String layout = "moody";

    private String theme = "bluegrey";

    private boolean darkMenu;

    public String getTheme() {
    	return theme;
    }

    public void setTheme(String theme) {
    	this.theme = theme;
    }

    public String getLayout() {
        return layout;
    }

    public void setLayout(String layout) {
        this.layout = layout;
    }

    public boolean isDarkMenu() {
        return darkMenu;
    }

    public void setDarkMenu(boolean darkMenu) {
        this.darkMenu = darkMenu;
    }
}
</pre>

                    <h1>Theme</h1>
                    <p>Serenity provides 18 PrimeFaces themes out of the box, setup of a theme simple as including the theme jar in your classpath and defining primefaces.THEME context parameter in web.xml such as "primefaces-serenity-green". Full list of
                    available themes are;</p>

                    <ul>
                        <li>primefaces-serenity-amber</li>
                        <li>primefaces-serenity-blue</li>
                        <li>primefaces-serenity-bluegrey</li>
                        <li>primefaces-serenity-brown</li>
                        <li>primefaces-serenity-cyan</li>
                        <li>primefaces-serenity-deeporange</li>
                        <li>primefaces-serenity-deeppurple</li>
                        <li>primefaces-serenity-green</li>
                        <li>primefaces-serenity-grey</li>
                        <li>primefaces-serenity-indigo</li>
                        <li>primefaces-serenity-lightblue</li>
                        <li>primefaces-serenity-lime</li>
                        <li>primefaces-serenity-orange</li>
                        <li>primefaces-serenity-pink</li>
                        <li>primefaces-serenity-purple</li>
                        <li>primefaces-serenity-teal</li>
                        <li>primefaces-serenity-yellow</li>
                    </ul>

                    <p>A custom theme can be developed by the following steps.</p>
                    <ul>
                        <li>Create a custom theme folder such as primefaces-serenity-myown under webapp/resources and place an empty theme.scss inside.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/theme/_theme.scss</i> file.</li>
                        <li>Build the scss to generate css.</li>
                        <li>Set primefaces.THEME context parameter as <i>serenity-myown</i></li>
                        <li>Either bundle the css in a jar file or serve from webapp/resources/primefaces-serenity-myown folder</li>
                    </ul>

                    <p>Here are the variables required to create a theme.</p>

<pre>
$primaryColor:#FFB300;
$primaryDarkColor:#FF8F00;
$primaryLightColor:#FFCA28;
$primaryLightestColor:#FFF8E1;
$primaryTextColor:#212121;
$accentColor:#E91E63;
$accentDarkColor: #C2185B;
$accentLightColor: #F06292;
$accentTextColor: #ffffff;

@import '../sass/theme/_theme';
</pre>

                    <p> An example sass command to compile the css would be;</p>

<pre>
sass src/main/webapp/resources/primefaces-serenity-myown/theme.scss:src/main/webapp/resources/primefaces-serenity-myown/theme.css  --no-source-map
</pre>

                    <p>Watch mode is handy to avoid compiling everytime when a change is made, instead use the following command
                    so that sass generates the file whenever you make a customization. This builds all css files whenever a change is made to any scss file.</p>
<pre>
sass --watch src/main/webapp/resources:src/main/webapp/resources --no-source-map
</pre>

                    <h1>Layout</h1>
                    <p>There are 27 layout colors in total with flat and special alternatives. Configuring a layout color is easy as
                    adding the css file to the template.xhtml where the choice can be left to the user with an EL expression.</p>
<pre>
&lt;h:outputStylesheet name="css/layout-\#{guestPreferences.layout}.css" library="serenity-layout" /&gt;
</pre>

                    <p>Creating a custom layout with the color scheme of your choice is similar to creating a custom theme.</p>
                    <ul>
                        <li>Choose a layout name such as layout-myown.</li>
                        <li>Create an empty file named layout-myown.scss inside resources/serenity-layout/css folder.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/layout/_layout.scss</i> file.</li>
                        <li>Build the scss to generate css</li>
                        <li>Serve the css by importing it using a link tag or h:outputStylesheet.</li>
                    </ul>

                    <p>Here are the variables required to create a layout.</p>

<pre>
/* Sidebar */
$sidebarLogoBgColor:rgba(36,50,59,0.5);
$sidebarBgColor:#566e87;
$darkSidebarBgColor:#202d35;
$menuBgImage:'bg-moody';

/* Primary */
$primaryColor:#607D8B;
$primaryDarkColor:#496475;
$primaryLightColor:#90A4AE;
$primaryLightestColor:#E8EAF6;
$primaryTextColor:#ffffff;

/* Accent */
$accentColor:#7CB342;
$accentLightColor:#9CCC65;
$accentTextColor:#ffffff;

/* Topbar */
$topbarTextColor:#E8EAF6;
$topbarIconColor:#E8EAF6;

/* Submenu */
$submenuBgColor:rgba(255,255,255,0.2);
$darkSubmenuBgColor:rgba(255,255,255,0.15);

/* Default MenuItem */
$menuitemTextColor:#ffffff;
$menuitemIconTextColor:#ffffff;

/* Hover MenuItem */
$menuitemHoverBgColor:rgba(0,0,0,0.4);
$menuitemHoverTextColor:#ffffff;
$menuitemHoverIconTextColor:#ffffff;

/* Active MenuItem */
$menuitemActiveBgColor:#7CB342;
$menuitemActiveTextColor:#ffffff;
$menuitemActiveIconTextColor:#ffffff;
$subMenuitemActiveTextColor:#9CCC65;
$subMenuitemActiveIconTextColor:#9CCC65;

/* Dark Default MenuItem */
$darkMenuitemTextColor:#dee0e3;
$darkMenuitemIconTextColor:#dee0e3;

/* Dark Hover MenuItem */
$darkMenuitemHoverBgColor:#rgba(255,255,255,0.4);
$darkMenuitemHoverTextColor:#ffffff;
$darkMenuitemHoverIconTextColor:#ffffff;

/* Dark Active MenuItem */
$darkMenuitemActiveBgColor:#7CB342;
$darkMenuitemActiveTextColor:#ffffff;
$darkMenuitemActiveIconTextColor:#ffffff;
$darksubMenuitemActiveTextColor:#9CCC65;
$darksubMenuitemActiveIconTextColor:#9CCC65;

@import '../../sass/layout/_layout';
</pre>

                    <h1>SASS Variables</h1>
                    <p>In case you'd like to customize common variables, the _common.scss under sass variables folder is where the core variables (e.g. font size, paddings) for the layout are defined.</p>
<pre>
$fontSize:14px;
$fontFamily:"Roboto","Helvetica Neue",sans-serif;
$textColor:#212121;
$textSecondaryColor:#757575;
$lineHeight:18px;
$borderRadius:3px;
$dividerColor:#dbdbdb;
$dividerLightColor:#f8f8f8;
$transitionDuration:.3s;
$iconWidth:20px;
$iconHeight:20px;
$iconFontSize:20px;
$hoverBgColor:#e8e8e8;
$hoverTextColor:#000000;

/* Predefined Colors */
$blue:#147df0;
$pink:#ed3c76;
$green:#3e9018;
$red:#da2f31;
$orange:#ffb200;
$teal:#599597;
$purple:#633ea5;
$black:#000000;
$yellow:#ffd644;
$grayBgColor:#757575;
</pre>

                    <p>_layout.scss under variables define the shared variables of the layout.</p>
<pre>
@import './common';

$bodyBgColor:#F5F5F5;
$topbarSubmenuHoverBgColor:#f1f2f7;
$topbarMobileMenuBgColor:#ffffff;
$mobileBreakpoint:840px;
$contentMobileMaskBgColor:#424242;
</pre>

                    <p>Similarly _theme.scss files contains the shared variables of the PrimeFaces theme.</p>
<pre>
@import './common';

$headerPadding:8px 14px;
$headerTextColor:#ffffff;

$contentPadding:8px 14px;
$contentBorderColor:#d8d8d8;
$contentBgColor:#ffffff;

$inputBorderColor:#bdbdbd;
$inputInvalidBorderColor:#e62a10;
$inputBgColor:#ffffff;
$inputErrorTextColor:#e62a10;
$inputHeaderPadding:6px 10px;

$buttonTextColor:#ffffff;

$listItemPadding:6px 10px;

$radioButtonBorderColor:#757575;
$checkboxBorderColor:#757575;

$errorMessageFontSize:11px;
$errorMessageIconFontSize:13px;

$dataTableRowBgColorEven:#f4f4f4;
$paginatorPadding:6px 10px;
$menuitemPadding:6px 10px;
</pre>

                    <h1>Menu</h1>
                    <p>Menu is a regular JSF component that supports PrimeFaces MenuModel API allowing both declarative and programmatic approaches.</p>
<pre>
xmlns:ps="http://primefaces.org/serenity"

&lt;ps:menu&gt;
&lt;/ps:menu&gt;
</pre>
                    <p>Menu has 3 modes; static, overlay and horizontal. Layout wrapper element in template.xhtml is used to define which mode to use by adding specific classes. Default
                    is overlay and adding "layout-wrapper-static" enables static mode. The anchor icon at the top of the sidebar also toggles between
                    overlay and static modes.</p>

                    <ul>
                        <li>Static: "layout-wrapper layout-wrapper-static"</li>
                        <li>Overlay (Default): "layout-wrapper"</li>
                        <li>Horizontal: "layout-wrapper layout-menu-horizontal"</li>
                    </ul>

                    <p>Layout mode can be dynamic using an EL expression as well using an example bean called userPreferences.</p>
<pre>
&lt;div class="layout-wrapper \#{guestPreferences.staticMenu ? 'layout-sidebar-static' ? ''}"&gt;
...
&lt;/div&gt;
</pre>

                    <h1>Dark and Light Menu</h1>
                    <p>Each layout provides a dark menu alternative, default mode is light menu and adding "layout-sidebar-dark" style class to the sidebar element
                        activates the dark mode. As with the layout itself, this can be made dynamic using an EL expression inside sidebar.xhtml.</p>
<pre>
&lt;div class="layout-sidebar #{guestPreferences.darkMenu ? 'layout-sidebar-dark' : ''}"&gt;
...
&lt;/div&gt;
</pre>

                    <h1>RTL</h1>
                    <p>Layout can be used in RTL orientation as well by adding "layout-rtl" to the "layout-wrapper" div in template.xhtml.</p>

                    <h1>Grid CSS</h1>
                    <p>Serenity uses new PrimeFaces Grid CSS (ui-g-*) throughout the samples, we strongly suggest using Grid CSS as your layout framework as it is well tested and supported by PrimeFaces. Grid CSS
                    is automatically included on newer versions however if your PrimeFaces version is older than 5.3.14, add the provided grid.css file under /serenity-layout/css/ folder to your template manually.</p>

                    <h1>Tips</h1>
                    <ul>
                        <li>Familiarity with <a href="http://sass-lang.com/">SASS</a> is required to make customizations to the layout and theme.</li>
                        <li>Demo application war and the maven project tag are included in distribution however you don't necessarily need them to install Serenity, the actual artifacts required are the layout zip file and the theme jar.</li>
                        <li>Sample demo application war includes the JSF libraries so it is suggested to remove them from the war file when you deploy to an appserver.</li>
                        <li>When running the maven project, you need to build the sass with (sass --update src/main/webapp/resources:src/main/webapp/resources --no-source-map) command.</li>
                    </ul>

                    <h1>Migration Guide</h1>
                    <p>2.0.1 to 2.1.0</p>
                    <ul>
                        <li>Added configurator panel</li>
                        <li>Update nanoscoller.js, layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>

                    <p>2.0.0 to 2.0.1</p>
                    <ul>
                        <li>Update SerenityMenu*.java</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    
                    <p>1.0.6 to 2.0.0</p>
                    <ul>
                        <li>Update SerenityMenu*.java</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    
                    <p>1.0.5 to 1.0.6</p>
                    <ul>
                        <li>Update layout and theme css files</li>
                        <li>Update layout.js and SerenityMenu*.java</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    <p>1.0.4 to 1.0.5</p>
                    <ul>
                        <li>Update layout and theme css files</li>
                        <li>Update layout.js</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    <p>1.0.3 to 1.0.4</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    <p>1.0.2 to 1.0.3</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    <p>1.0.1 to 1.0.2</p>
                    <ul>
                        <li>Update layout-*.css files</li>
                        <li>Update theme jar and layout.js</li>
                        <li>Add new layout-*.css files</li>
                    </ul>
                </div>
            </div>
        </div>

    </ui:define>

</ui:composition>
