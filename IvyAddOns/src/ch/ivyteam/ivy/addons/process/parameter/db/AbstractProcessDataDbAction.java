package ch.ivyteam.ivy.addons.process.parameter.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import ch.ivyteam.ivy.addons.process.async.WaitForAsyncProcessHelper;
import ch.ivyteam.ivy.persistence.IPersistencyManager;
import ch.ivyteam.ivy.persistence.IPersistencyService;
import ch.ivyteam.ivy.persistence.IPersistentTransaction;
import ch.ivyteam.ivy.persistence.ITransactionExecutable;
import ch.ivyteam.ivy.persistence.PersistencyException;
import ch.ivyteam.ivy.persistence.db.DatabaseTransaction;
import ch.ivyteam.ivy.persistence.db.DatabaseUtil;
import ch.ivyteam.ivy.server.IServer;
import ch.ivyteam.ivy.server.ServerFactory;
import ch.ivyteam.ivy.workflow.ICase;
/**
 * Baseclass for Insert, Load and Delete of Process data. It provides template methods
 * that you have to implement in your subclass. It takes care of opening, executing and closing.	
 * 
 * @author hsp
 * @since Pilatus
 */
@SuppressWarnings("restriction")
public abstract class AbstractProcessDataDbAction<T> {

	/** Persistency Service name */
	private static final String WORKFLOW_PERSISTENCY_SERVICE = "WORKFLOW";
	
	/** we store the process data in this table */
	protected static final String PROCESS_DATA_TABLE = "IWA_AsyncProcessCaseData";
	
	/** the case that want execute the DB action */
	protected final ICase fTheCase;
	
	/** the data for the DB action */
	@SuppressWarnings("unchecked")
	protected final Map fData;
	
	/** the eventId for the DB action */
	protected final String fEventId;
	
	/** the caseId for the DB action */
	protected final Integer fCaseId;
	
	@SuppressWarnings("unchecked")
	public AbstractProcessDataDbAction(final ICase theCase, final Map data) {
		String eventId = "";
		this.fTheCase = theCase;
		if(theCase != null) {
			this.fCaseId = theCase.getIdentifier();
			try {
				eventId = theCase.getAdditionalProperty(WaitForAsyncProcessHelper.EVENT_ID);
			} catch (PersistencyException e) {
				//
			}
		} else {
			this.fCaseId = 0;
		}
		this.fData = data;
		this.fEventId = eventId;
		
	}
	
	/**
	 * Gets the persistency service
	 * @return persistency service
	 */
	private static IPersistencyService getPersistencyService() {
		final IServer server = ServerFactory.getServer();
		final IPersistencyManager pm = server.getPersistencyManager();
		return pm.getPersistencyService(WORKFLOW_PERSISTENCY_SERVICE);
	}
	
	/**
	 * Template Method to get the Sql Query that we want to execute
	 * @return the Sql Query that we want to execute
	 */
	public abstract String getSqlQuery();
	
	/**
	 * Template Method so you can set the sql parameters for your query.
	 * do not execute this statement. only use setXXX methods.
	 * @param statement set parameters for this PreparedStatement
	 */
	public abstract void setParameterForStatement(PreparedStatement statement) throws SQLException;
	
	/**
	 * process the ResultSet that was generated by executeQuery
	 * @param resultSet  ResultSet that was generated by executeQuery
	 * @return anything you want
	 * @throws PersistencyException 
	 */
	public T processResultSet(ResultSet resultSet) throws PersistencyException {
		throw new UnsupportedOperationException("Please implement processResultSet");
	}
	
	/**
	 * Executes the query
	 * @throws PersistencyException
	 */
	public void execute() throws PersistencyException {
		runQuerey(false);
	}
	
	/**
	 * Executes the query and returns the object you created inside processResultSet
	 * @return returns the object you created inside processResultSet
	 * @throws PersistencyException
	 */
	public T executeQuery() throws PersistencyException {
		return runQuerey(true);
	}
	
	
	/**
	 * Executes the query and depending on doReturnValue it
	 * returns the object you created inside processResultSet (true) or null (false)
	 * @param doReturnValue set it to true and it will return the object you created inside processResultSet. otherwise null
	 * @return the object you created inside processResultSet or null
	 * @throws PersistencyException
	 */
	private T runQuerey(final boolean doReturnValue) throws PersistencyException {
		final String sqlQuery = getSqlQuery();
		T value = getPersistencyService().execute(new ITransactionExecutable<T>(){

			@Override
			public T execute(IPersistentTransaction transaction)
					throws PersistencyException {
				final DatabaseTransaction dt = (DatabaseTransaction) transaction;
				final Connection connection = dt.getDbConnection().getConnection();
				ResultSet resultSet = null;
				try {
					final PreparedStatement statement = dt.getDbConnection().getPreparedStatement(connection.nativeSQL(sqlQuery));
					try {
						setParameterForStatement(statement);
						if(doReturnValue) {
							resultSet = statement.executeQuery();
							return processResultSet(resultSet);
						} else {
							statement.execute();
							return null;
						}
					} finally {
						dt.getDbConnection().giveBackPreparedStatement(statement);
						if(resultSet != null) {
							DatabaseUtil.close(resultSet);
						}
					}
				} catch(SQLException e) {
					//
				}
				return null;
			}
		});
		
		if(doReturnValue) {
			return value;
		} else {
			return null;
		}
	}
}
