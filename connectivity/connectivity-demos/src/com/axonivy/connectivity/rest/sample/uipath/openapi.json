{
  "swagger": "2.0",
  "info": {
    "version": "V2",
    "title": "UiPath.WebApi"
  },
  "host": "platform.uipath.com/AXONPRESALES/AXONPRESALES",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [],
  "paths": {
    "/api/Account/Authenticate": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Authenticates the user based on user name and password",
        "description": "Authenticates the user based on user name and password.",
        "operationId": "Account_Authenticate",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "loginModel",
            "in": "body",
            "description": "The login parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "schema": {
              "$ref": "#/definitions/AjaxResponse"
            }
          }
        }
      }
    },
    "/api/FoldersNavigation/GetAllFoldersForCurrentUser": {
      "get": {
        "tags": [
          "FoldersNavigation"
        ],
        "summary": "Returns the folders the current user has access to.\r\nThe response will be a list of folders; the hierarchy can be reconstructed\r\nusing the ParentId properties. From the root to the folders the user has\r\nactually been assigned to, the folders will be marked as non-selectable\r\nand only the paths to the assigned-to folders will be included.\r\nFrom the assigned-to folders down to the leaves, the nodes will be marked as\r\nselectable and their children lists fully populated.",
        "description": "Client Credentials Flow required permissions: Forbidden or Forbidden.Read.\r\n\r\nRequires authentication.",
        "operationId": "FoldersNavigation_GetAllFoldersForCurrentUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedFolderDto"
              }
            }
          }
        }
      }
    },
    "/api/FoldersNavigation/GetFoldersForCurrentUser": {
      "get": {
        "tags": [
          "FoldersNavigation"
        ],
        "summary": "Returns a filtered subset (paginated) of the folders the current user has access to.",
        "description": "Client Credentials Flow required permissions: Forbidden or Forbidden.Read.\r\n\r\nRequires authentication.",
        "operationId": "FoldersNavigation_GetFoldersForCurrentUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageResultDto[FolderDto]"
            }
          }
        }
      }
    },
    "/api/FoldersNavigation/GetFolderNavigationContextForCurrentUser": {
      "get": {
        "tags": [
          "FoldersNavigation"
        ],
        "summary": "Returns a subset (paginated) of direct children for a given folder, which are accessible to the current user.\r\nTo ease a folder tree structure navigation design, the list of ancestors for the given folder is also returned.",
        "description": "Client Credentials Flow required permissions: Forbidden or Forbidden.Read.\r\n\r\nRequires authentication.",
        "operationId": "FoldersNavigation_GetFolderNavigationContextForCurrentUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "folderId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderNavigationContextDto"
            }
          }
        }
      }
    },
    "/api/FoldersNavigation/GetAllRolesForUser": {
      "get": {
        "tags": [
          "FoldersNavigation"
        ],
        "summary": "Returns a page of the user-folder assignments for the input user, including the roles for each folder.\r\nThe response also includes the folders assigned to the directory groups of the user.\r\nThe distinction between the folders assigned directly to the user and the ones assigned to one of his groups\r\ncan be made via the User field of the response.",
        "description": "Client Credentials Flow required permissions: Forbidden or Forbidden.Read.\r\n\r\nRequired permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission) and (Users.View and Roles.View).",
        "operationId": "FoldersNavigation_GetAllRolesForUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "User name",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "query",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRoleAssignmentsDto"
            }
          }
        }
      }
    },
    "/tasks/GenericTasks/GetTaskDataById": {
      "get": {
        "tags": [
          "GenericTasks"
        ],
        "summary": "Returns task data dto",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
        "operationId": "GenericTasks_GetTaskDataById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "Task id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskDataDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/tasks/GenericTasks/CreateTask": {
      "post": {
        "tags": [
          "GenericTasks"
        ],
        "summary": "Creates a new Generic Task.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.Create.",
        "operationId": "GenericTasks_CreateTask",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskCreateRequest",
            "in": "body",
            "description": "The task to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCreateRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TaskDataDto"
            }
          }
        }
      }
    },
    "/tasks/GenericTasks/CompleteTask": {
      "post": {
        "tags": [
          "GenericTasks"
        ],
        "summary": "Complete the task by saving task data and action taken",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
        "operationId": "GenericTasks_CompleteTask",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "taskCompletionRequest",
            "in": "body",
            "description": "TaskCompletionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCompletionRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/api/Licensing/Acquire": {
      "post": {
        "tags": [
          "Licensing"
        ],
        "summary": "Acquire license units",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequires authentication.",
        "operationId": "Licensing_Acquire",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "dto",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumptionLicenseDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseResult"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "409": {
            "description": "Conflict"
          },
          "503": {
            "description": "ServiceUnavailable"
          }
        }
      }
    },
    "/api/Licensing/Release": {
      "put": {
        "tags": [
          "Licensing"
        ],
        "summary": "Release acquired license units",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequires authentication.",
        "operationId": "Licensing_Release",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "dto",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumptionLicenseDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseResult"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "409": {
            "description": "Conflict"
          },
          "503": {
            "description": "ServiceUnavailable"
          }
        }
      }
    },
    "/api/logs": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Inserts a log entry with a specified message in JSON format.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Write.\r\n\r\nRequired permissions: (Logs.Create).\r\n\r\nExample of jMessage parameter.\r\n            \r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }",
        "operationId": "Logs_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully inserts a log message. Although it's a post, there's no need for an object to be returned"
          },
          "400": {
            "description": "jMessage is null or an Exception is thrown during insert"
          },
          "408": {
            "description": "Too many pending logging requests or timeout"
          }
        }
      }
    },
    "/api/Logs/SubmitLogs": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Inserts a collection of log entries, each in a specific JSON format.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Write.\r\n\r\nRequired permissions: (Logs.Create).\r\n\r\nExample of log entry:\r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }",
        "operationId": "Logs_SubmitLogs",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "logEntries",
            "in": "body",
            "description": "Collection of string representations of JSON objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully inserts the log entries"
          },
          "400": {
            "description": "logs is null or an Exception is thrown during insert"
          },
          "408": {
            "description": "Too many pending logging requests or timeout"
          }
        }
      }
    },
    "/api/Maintenance/Get": {
      "get": {
        "tags": [
          "Maintenance"
        ],
        "summary": "Gets the host admin logs.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Required permissions: Audit.View.",
        "operationId": "Maintenance_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MaintenanceSetting"
            }
          }
        }
      }
    },
    "/api/Maintenance/Start": {
      "post": {
        "tags": [
          "Maintenance"
        ],
        "summary": "Starts a maintenance window",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Maintenance_Start",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "phase",
            "in": "query",
            "description": "Phase - {UiPath.Orchestrator.DataContracts.MaintenanceState.Draining} or {UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended}",
            "required": true,
            "type": "string",
            "enum": [
              "None",
              "Draining",
              "Suspended"
            ]
          },
          {
            "name": "force",
            "in": "query",
            "description": "Whether to ignore errors during transition",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "killJobs",
            "in": "query",
            "description": "Whether to force-kill running jobs when transitioning to {UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended}",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "If tenant id is set, maintenance will start only for this tenant",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/Maintenance/End": {
      "post": {
        "tags": [
          "Maintenance"
        ],
        "summary": "Ends a maintenance window",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Maintenance_End",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/RobotsService/Heartbeat": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Post to the server a collection of heartbeat messages generated by the Robots from a Machine",
        "description": "Every 30 seconds the UiPath service running on a Robot Machine posts a collection of heartbeat messages (one for each Robot hosted on the Machine).\r\nThe response is a collection of commands specific to all the Robots defined on that Machine, including the ones that were added in the meanwhile.",
        "operationId": "RobotsService_Heartbeat",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeartbeatPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeartbeatResponse"
            }
          },
          "400": {
            "description": "hbts is null or empty or an Exception is thrown during insert"
          }
        }
      }
    },
    "/api/RobotsService/HeartbeatV2": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Acquires licensing runtimes, updates machine's session state and reporting time.",
        "description": "Every 30 seconds the UiPath service sends a heartbeat.\r\nThe response is a collection of commands specific to that machine.",
        "operationId": "RobotsService_HeartbeatV2",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeartbeatPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeartbeatResponse"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/RobotsService/SubmitJobState": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Post to the server a heartbeat collection with jobs information",
        "operationId": "RobotsService_SubmitJobState",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "heartbeats",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HeartbeatDto"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job state was updated successfully. No object returned so 200 instead of 201"
          }
        }
      }
    },
    "/api/RobotsService/GetProcesses": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Gets from the server all the processes associated with a Robot.",
        "description": "Gets from the server all the processes associated with a Robot",
        "operationId": "RobotsService_GetProcesses",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the processes collection.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublishedProcess"
              }
            }
          },
          "400": {
            "description": "robotKey is null or empty or an Exception is thrown during retrieval"
          }
        }
      }
    },
    "/api/RobotsService/StartService": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Gets from the server all the Robots associated with a Machine and having the specified licenseKey.\r\nIf the received payload contains the ServiceUserName, it returns only the Robot with that specific UserName.",
        "description": "Gets from the server all the Robots associated with a Machine and having the specified licenseKey.",
        "operationId": "RobotsService_StartService",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotServicePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotServiceResponse"
            }
          },
          "400": {
            "description": "No Robots meet the criteria or an Exception is thrown during retrieval"
          }
        }
      }
    },
    "/api/RobotsService/StopService": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Called by RobotSvc to disconnect all Robots.",
        "operationId": "RobotsService_StopService",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeartbeatPayload"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Exception is thrown"
          }
        }
      }
    },
    "/api/RobotsService/BeginSession": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Begins a front-office session.",
        "operationId": "RobotsService_BeginSession",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotIdentifier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotDetailsDto"
            }
          },
          "400": {
            "description": "BadRequest"
          },
          "404": {
            "description": "NotFound"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/api/RobotsService/EndSession": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Ends the front-office session.",
        "operationId": "RobotsService_EndSession",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "identifier",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotIdentifier"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "BadRequest"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/api/RobotsService/GetConnectionData": {
      "get": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Called by RobotSvc to connect the Robots on the machine it is running on to Orchestrator (under automatic deployment).",
        "description": "This is the initial handshake between the robot service and Orchestrator, the equivalent of configuring the connection\r\n            info from Robot tray (manual deployment). It is supported only for authorized machines, i.e. the robot machine is part of the\r\n            same AD as Orchestrator. To enforce this, the request must contain the machine identity. The robots must be already provisioned\r\n            in Orchestrator before this step, otherwise RobotSvc will continue to call this method until they are.",
        "operationId": "RobotsService_GetConnectionData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant under which already defined robots are searched for.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "domainName",
            "in": "query",
            "description": "Domain name for the machine where robot is installed. If it's not provided, we'll use the one specified in web.config",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConnectionData"
            }
          },
          "401": {
            "description": "Calling machine is not part of the same AD"
          }
        }
      }
    },
    "/api/RobotsService/UploadScreenshot": {
      "post": {
        "tags": [
          "RobotsService"
        ],
        "summary": "Uploads a screenshot for the given jobKey and robotKey.",
        "operationId": "RobotsService_UploadScreenshot",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "robotKey",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobKey",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Invalid arguments"
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/api/Stats/GetCountStats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets the total number of various entities registered in Orchestrator",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequires authentication.\r\n\r\nReturns the name and the total number of entities registered in Orchestrator for a set of entities.\r\nAll the counted entity types can be seen in the result below.\r\n     [\r\n           {\r\n             \"title\": \"Processes\",\r\n             \"count\": 1\r\n           },\r\n           {\r\n             \"title\": \"Assets\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Queues\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Schedules\",\r\n             \"count\": 0\r\n           }\r\n     ]",
        "operationId": "Stats_GetCountStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountStats"
              }
            }
          }
        }
      }
    },
    "/api/Stats/GetSessionsStats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets the total number of robots aggregated by Robot State",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Robots.View.\r\n\r\nReturns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Available\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Busy\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Disconnected\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Unresponsive\",\r\n            \"count\": 0\r\n          }\r\n    ]",
        "operationId": "Stats_GetSessionsStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountStats"
              }
            }
          }
        }
      }
    },
    "/api/Stats/GetJobsStats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets the total number of jobs aggregated by Job State",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Jobs.View.\r\n\r\nReturns the total number of Successful, Faulted and Canceled jobs respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Successful\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Faulted\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Canceled\",\r\n            \"count\": 0\r\n          }\r\n    ]",
        "operationId": "Stats_GetJobsStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CountStats"
              }
            }
          }
        }
      }
    },
    "/api/Stats/GetLicenseStats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets the licensing usage statistics",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: License.View.",
        "operationId": "Stats_GetLicenseStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "The Tenant's Id - can be used when authenticated as Host",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "days",
            "in": "query",
            "description": "Number of reported license usage days",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LicenseStatsModel"
              }
            }
          }
        }
      }
    },
    "/api/Stats/GetConsumptionLicenseStats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Gets the consumption licensing usage statistics",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: License.View.",
        "operationId": "Stats_GetConsumptionLicenseStats",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "description": "The Tenant's Id - can be used when authenticated as Host",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "days",
            "in": "query",
            "description": "Number of reported license usage days",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConsumptionLicenseStatsModel"
              }
            }
          }
        }
      }
    },
    "/api/Status/Get": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Returns whether the current endpoint should be serving traffic",
        "operationId": "Status_Get",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Status/VerifyHostAvailibility": {
      "get": {
        "tags": [
          "Status"
        ],
        "description": "Requires authentication.",
        "operationId": "Status_VerifyHostAvailibility",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HostAvailabilityDto"
            }
          }
        }
      }
    },
    "/forms/TaskForms/CreateFormTask": {
      "post": {
        "tags": [
          "TaskForms"
        ],
        "summary": "Creates a new Form Task.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.Create.",
        "operationId": "TaskForms_CreateFormTask",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "formTaskCreateRequest",
            "in": "body",
            "description": "The form task to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormTaskCreateRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TaskDataDto"
            }
          }
        }
      }
    },
    "/forms/TaskForms/GetTaskFormById": {
      "get": {
        "tags": [
          "TaskForms"
        ],
        "summary": "Returns form dto to render task form",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
        "operationId": "TaskForms_GetTaskFormById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "Task id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskFormDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/forms/TaskForms/GetTaskDataById": {
      "get": {
        "tags": [
          "TaskForms"
        ],
        "summary": "Returns task data dto",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
        "operationId": "TaskForms_GetTaskDataById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "query",
            "description": "Task id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskDataDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/forms/TaskForms/CompleteTask": {
      "post": {
        "tags": [
          "TaskForms"
        ],
        "summary": "Complete the task by saving form data and action taken",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
        "operationId": "TaskForms_CompleteTask",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "taskCompletionRequest",
            "in": "body",
            "description": "TaskCompletionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCompletionRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        }
      }
    },
    "/api/TestAutomation/StartTestSetExecution": {
      "post": {
        "tags": [
          "TestAutomation"
        ],
        "summary": "Start a test set execution.",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Create.\r\n\r\n200 OK returns test set execution Id",
        "operationId": "TestAutomation_StartTestSetExecution",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "testSetId",
            "in": "query",
            "description": "The Id of the test set",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "triggerType",
            "in": "query",
            "description": "Specifies how was the execution triggered",
            "required": false,
            "type": "string",
            "enum": [
              "Manual",
              "Scheduled",
              "ExternalTool"
            ]
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful start of test set execution",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to execute a test set"
          },
          "404": {
            "description": "If the test set was not found"
          }
        }
      }
    },
    "/api/TestAutomation/CancelTestSetExecution": {
      "post": {
        "tags": [
          "TestAutomation"
        ],
        "summary": "Cancels the specified test set execution.",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Edit.\r\n\r\n202 Accepted",
        "operationId": "TestAutomation_CancelTestSetExecution",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "testSetExecutionId",
            "in": "query",
            "description": "Id for the test set execution to be canceled",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "The test set execution was scheduled for cancellation or is not in a cancelable state"
          },
          "403": {
            "description": "If the caller doesn't have permissions to cancel a test set execution"
          }
        }
      }
    },
    "/api/TestAutomation/CancelTestCaseExecution": {
      "post": {
        "tags": [
          "TestAutomation"
        ],
        "summary": "Cancels the specified test case execution.",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Edit.\r\n\r\n202 Accepted",
        "operationId": "TestAutomation_CancelTestCaseExecution",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "testCaseExecutionId",
            "in": "query",
            "description": "Id for the test case execution to be canceled",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "The test case execution was scheduled for cancellation or is not in a cancelable state"
          },
          "403": {
            "description": "If the caller doesn't have permissions to cancel a test set execution"
          }
        }
      }
    },
    "/api/TestAutomation/GetAssertionScreenshot": {
      "get": {
        "tags": [
          "TestAutomation"
        ],
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.",
        "operationId": "TestAutomation_GetAssertionScreenshot",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "testCaseAssertionId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          },
          "404": {
            "description": "NotFound"
          }
        }
      }
    },
    "/api/TestAutomation/CreateTestSetForReleaseVersion": {
      "post": {
        "tags": [
          "TestAutomation"
        ],
        "summary": "This will create a test set with source type API.This endpoint it is supposed to be used by API integration.",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Write.\r\n\r\nRequired permissions: TestSets.Create.\r\n\r\n201 Created returns test set Id",
        "operationId": "TestAutomation_CreateTestSetForReleaseVersion",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildTestSetRequestMessage"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful created test set.",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to create a test set."
          }
        }
      }
    },
    "/api/auth/oauth/token": {
      "get": {
        "tags": [
          "Token"
        ],
        "summary": "Gets Id Token - used for SSO with Kibana",
        "operationId": "Token_Get",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "login_hint",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonce",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect"
          },
          "400": {
            "description": "BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "Token"
        ],
        "summary": "Gets access token",
        "operationId": "Token_Post",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "accessTokenRequest",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessTokenRequest"
            }
          },
          {
            "name": "client_id",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "client_secret",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "grant_type",
            "in": "formData",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccessToken"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        }
      }
    },
    "/api/Translations/GetTranslations": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Returns a json with translation resources",
        "operationId": "Translations_GetTranslations",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/odata/Alerts": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Gets alerts.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Alerts.View.",
        "operationId": "Alerts_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[AlertDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Alerts/UiPath.Server.Configuration.OData.GetUnreadCount()": {
      "get": {
        "tags": [
          "Alerts"
        ],
        "summary": "Returns the total number of alerts, per tenant, that haven't been read by the current user.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Alerts.View.",
        "operationId": "Alerts_GetUnreadCount",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Alerts/UiPath.Server.Configuration.OData.MarkAsRead": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Marks alerts as read and returns the remaining number of unread notifications.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Write.\r\n\r\nRequired permissions: Alerts.View.",
        "operationId": "Alerts_MarkAsRead",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "markAsReadParameters",
            "in": "body",
            "description": "Collection containing the unique identifiers of the notifications that will be marked as read",
            "required": true,
            "schema": {
              "required": [
                "ids"
              ],
              "type": "object",
              "properties": {
                "ids": {
                  "type": "array",
                  "items": {
                    "format": "guid",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Alerts/UiPath.Server.Configuration.OData.RaiseProcessAlert": {
      "post": {
        "tags": [
          "Alerts"
        ],
        "summary": "Creates a Process Alert",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Write.\r\n\r\nRequired permissions: Alerts.Create.",
        "operationId": "Alerts_RaiseProcessAlert",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "raiseAlertParameters",
            "in": "body",
            "description": "RaiseProcessAlert action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "processAlert": {
                  "$ref": "#/definitions/ProcessAlertDto"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get Assets",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
        "operationId": "Assets_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[AssetDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Creates an asset",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Write.\r\n\r\nRequired permissions: Assets.Create.",
        "operationId": "Assets_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "assetDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the asset",
            "schema": {
              "$ref": "#/definitions/AssetDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Assets({Id})": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Gets a single asset based on its key",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
        "operationId": "Assets_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssetDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Edit an asset",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Write.\r\n\r\nRequired permissions: Assets.Edit.",
        "operationId": "Assets_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "assetDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Delete an asset",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Write.\r\n\r\nRequired permissions: Assets.Delete.",
        "operationId": "Assets_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the asset"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByNameForRobotKey": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns the named asset associated to the given robot key.",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Write.\r\n\r\nRequired permissions: Assets.View.",
        "operationId": "Assets_GetRobotAssetByNameForRobotKey",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotAssetParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "robotKey": {
                  "type": "string"
                },
                "assetName": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotAssetDto"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Asset or Robot do not exist or the Asset is not available for the specified robot."
          }
        },
        "deprecated": false
      }
    },
    "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByRobotId(robotId={robotId},assetName='{assetName}')": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns the named asset associated to the given robot Id.",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
        "operationId": "Assets_GetRobotAssetByRobotId",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotId",
            "in": "path",
            "description": "The Id of the robot for which the asset is being fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset being fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotAssetDto"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Asset or Robot do not exist or the Asset is not available for the specified robot."
          }
        },
        "deprecated": false
      }
    },
    "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAsset(robotId='{robotId}',assetName='{assetName}')": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Returns the named asset associated to the given robot key.",
        "description": "Client Credentials Flow required permissions: Assets or Assets.Read.\r\n\r\nRequired permissions: Assets.View.\r\n\r\nDEPRECATED",
        "operationId": "Assets_GetRobotAssetByRobotidAndAssetname",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotId",
            "in": "path",
            "description": "The key of the robot for which the asset is being fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset being fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotAssetDto"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Asset or Robot do not exist or the Asset is not available for the specified robot."
          }
        },
        "deprecated": true
      }
    },
    "/odata/AuditLogs": {
      "get": {
        "tags": [
          "AuditLogs"
        ],
        "summary": "Gets Audit logs.",
        "description": "Client Credentials Flow required permissions: Audit or Audit.Read.\r\n\r\nRequired permissions: Audit.View.",
        "operationId": "AuditLogs_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[AuditLogDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/AuditLogs/UiPath.Server.Configuration.OData.GetAuditLogDetails(auditLogId={auditLogId})": {
      "get": {
        "tags": [
          "AuditLogs"
        ],
        "summary": "Returns audit log details by audit log id",
        "description": "Client Credentials Flow required permissions: Audit or Audit.Read.\r\n\r\nRequired permissions: Audit.View.",
        "operationId": "AuditLogs_GetAuditLogDetailsByAuditlogid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "auditLogId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[AuditLogEntityDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/AuditLogs/UiPath.Server.Configuration.OData.Reports()": {
      "get": {
        "tags": [
          "AuditLogs"
        ],
        "summary": "Returns a CSV containing the filtered audit.",
        "description": "Client Credentials Flow required permissions: Audit or Audit.Read.\r\n\r\nRequired permissions: Audit.View.",
        "operationId": "AuditLogs_Reports",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets Buckets.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View.",
        "operationId": "Buckets_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BucketDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Buckets"
        ],
        "summary": "Creates an Bucket",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequired permissions: Buckets.Create.",
        "operationId": "Buckets_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bucketDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BucketDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the bucket",
            "schema": {
              "$ref": "#/definitions/BucketDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({Id})": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets a single Bucket.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View.",
        "operationId": "Buckets_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BucketDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Buckets"
        ],
        "summary": "Updates a bucket.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequired permissions: Buckets.Edit.",
        "operationId": "Buckets_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "bucketDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BucketDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BucketDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Buckets"
        ],
        "summary": "Delete a bucket",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequired permissions: Buckets.Delete.",
        "operationId": "Buckets_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the bucket"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetReadUri": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets a direct download URL for BlobFile.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
        "operationId": "Buckets_GetReadUriByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The BlobFile full path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiryInMinutes",
            "in": "query",
            "description": "URL expiration time",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobFileAccessDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetWriteUri": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets a direct upload URL for BlobFile.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.Create.",
        "operationId": "Buckets_GetWriteUriByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The BlobFile full path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expiryInMinutes",
            "in": "query",
            "description": "URL Expiration time",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentType",
            "in": "query",
            "description": "ContentType for S3 access policy",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobFileAccessDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetFiles": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets the files in a directory.\r\nOptionally returns all files in all child directories (recursive).",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
        "operationId": "Buckets_GetFilesByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "directory",
            "in": "query",
            "description": "The directory path",
            "required": true,
            "type": "string"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Recurse subdirectories (flat view)",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Number of files to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Number of files to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileNameGlob",
            "in": "query",
            "description": "Files listing filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BlobFileDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetDirectories": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets the child directories in a directory.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
        "operationId": "Buckets_GetDirectoriesByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "directory",
            "in": "query",
            "description": "The directory path",
            "required": true,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Number of directories to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Number of directories to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileNameGlob",
            "in": "query",
            "description": "Directory listing filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BlobFileDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetFile": {
      "get": {
        "tags": [
          "Buckets"
        ],
        "summary": "Gets a file metadata.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
        "operationId": "Buckets_GetFileByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The BlobFile full path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobFileDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Buckets({key})/UiPath.Server.Configuration.OData.DeleteFile": {
      "delete": {
        "tags": [
          "Buckets"
        ],
        "summary": "Deletes a file.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.Delete.",
        "operationId": "Buckets_DeleteFileByKey",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Bucket Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "path",
            "in": "query",
            "description": "The BlobFile full path",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Calendars": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Gets calendars for current tenant.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequires authentication.",
        "operationId": "Calendars_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ExtendedCalendarDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Creates a new calendar.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: (Settings.Create).",
        "operationId": "Calendars_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ExtendedCalendarDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Calendars({Id})": {
      "get": {
        "tags": [
          "Calendars"
        ],
        "summary": "Gets calendar based on its id.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequires authentication.",
        "operationId": "Calendars_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Calendars"
        ],
        "summary": "Edits a calendar.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: (Settings.Edit).",
        "operationId": "Calendars_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ExtendedCalendarDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Calendars"
        ],
        "summary": "Deletes a calendar.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: (Settings.Delete).",
        "operationId": "Calendars_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Calendars/UiPath.Server.Configuration.OData.CalendarExists": {
      "post": {
        "tags": [
          "Calendars"
        ],
        "summary": "Validate calendar name, and check if it already exists.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: (Settings.Edit).",
        "operationId": "Calendars_CalendarExists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "calendarExistsParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "calendarName": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Boolean]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores": {
      "get": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Gets all Credential Stores.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View or Assets.Create or Assets.Edit or Assets.View or Robots.Create or Robots.Edit or Robots.View.",
        "operationId": "CredentialStores_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[CredentialStoreDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Creates a new Credential Store.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Create.",
        "operationId": "CredentialStores_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "credentialStoreDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialStoreDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CredentialStoreDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores({Id})": {
      "get": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Gets a single Credential Store by its key.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "CredentialStores_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CredentialStoreDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Updates a Credential Store.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "CredentialStores_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "credentialStoreDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialStoreDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Deletes a Credential Store.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Delete.",
        "operationId": "CredentialStores_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "forceDelete",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores({Id})/UiPath.Server.Configuration.OData.SetDefaultStoreForResourceType": {
      "post": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Sets a credential store as the default for the given credential type.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "CredentialStores_SetDefaultStoreForResourceTypeById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "defaultStoreActionParameters",
            "in": "body",
            "description": "Provides the resourceType that indicates\r\n                   the resource type for which the stores becomes default.",
            "required": true,
            "schema": {
              "required": [
                "resourceType"
              ],
              "type": "object",
              "properties": {
                "resourceType": {
                  "enum": [
                    "AssetCredential",
                    "RobotCredential",
                    "BucketCredential"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "DefaultStoreActionParametersEnum",
                    "modelAsString": false
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetDefaultStoreForResourceType(resourceType='{resourceType}')": {
      "get": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Get the default credential store for the given resource type.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View or Assets.Create or Assets.Edit or Assets.View or Robots.Create or Robots.Edit or Robots.View.",
        "operationId": "CredentialStores_GetDefaultStoreForResourceTypeByResourcetype",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceType",
            "in": "path",
            "description": "Provides the resource type for which to retrieve the default.",
            "required": true,
            "type": "string",
            "enum": [
              "AssetCredential",
              "RobotCredential",
              "BucketCredential"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetAvailableCredentialStoreTypes()": {
      "get": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Gets available Credential Store types.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "CredentialStores_GetAvailableCredentialStoreTypes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[String]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetResourcesForCredentialStoreTypes(key={key},resourceType='{resourceType}')": {
      "get": {
        "tags": [
          "CredentialStores"
        ],
        "summary": "Gets available resources robots (and later assets) for a credential store.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "CredentialStores_GetResourcesForCredentialStoreTypesByKeyAndResourcetype",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Provides the ID of the credential store for which to retrieve resources.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "resourceType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "AssetCredential",
              "RobotCredential",
              "BucketCredential"
            ]
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[CredentialStoreResourceDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets Environments.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Environments.View.",
        "operationId": "Environments_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[EnvironmentDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Post new environment",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Create.",
        "operationId": "Environments_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EnvironmentDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments({Id})": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Gets a single environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Environments.View.",
        "operationId": "Environments_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Updates an environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
        "operationId": "Environments_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "EnvironmentDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Deletes an environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Delete.",
        "operationId": "Environments_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotsForEnvironment(key={key})": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Environments.View and Robots.View.",
        "operationId": "Environments_GetRobotsForEnvironmentByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the environment for which the associated robots are placed first.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[RobotDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotIdsForEnvironment(key={key})": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Returns a collection of all the ids of the robots associated to an environment based on environment Id.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Environments.View and Robots.View.",
        "operationId": "Environments_GetRobotIdsForEnvironmentByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the environment for which the robot ids are fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[Int64]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments({Id})/UiPath.Server.Configuration.OData.AddRobot": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Associates a robot with the given environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
        "operationId": "Environments_AddRobotById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "addRobotParameters",
            "in": "body",
            "description": "RobotId - The associated robot Id.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "robotId": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments({Id})/UiPath.Server.Configuration.OData.RemoveRobot": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Dissociates a robot from the given environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
        "operationId": "Environments_RemoveRobotById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "removeRobotParameters",
            "in": "body",
            "description": "RobotId - The dissociated robot Id.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "robotId": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Environments({Id})/UiPath.Server.Configuration.OData.SetRobots": {
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Associates a group of robots with and dissociates another group of robots from the given environment.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
        "operationId": "Environments_SetRobotsById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "setRobotsParameters",
            "in": "body",
            "description": "<para />addedRobotIds - The id of the robots to be associated with the environment.\r\n            <para />removedRobotIds - The id of the robots to be dissociated from the environment.",
            "required": true,
            "schema": {
              "required": [
                "addedRobotIds",
                "removedRobotIds"
              ],
              "type": "object",
              "properties": {
                "addedRobotIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "removedRobotIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Gets folders.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: (Units.View - Gets all folders) and (SubFolders.View - Gets only folders where user has SubFolders.View permission).",
        "operationId": "Folders_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[FolderDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Creates a new folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Create - Creates root or subfolder) and (SubFolders.Create - Creates subfolder if user has SubFolders.Create permission on parent).",
        "operationId": "Folders_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders({Id})": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Gets a single folder, based on its Id.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: (Units.View - Gets any folder) and (SubFolders.View - Gets folder only if user has SubFolders.View permission on it).",
        "operationId": "Folders_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Edits a folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit - Edits any folder) and (SubFolders.Edit - Edits folder only if user has SubFolders.Edit permission on it).",
        "operationId": "Folders_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "FolderDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Deletes a folder. Succeeds only if no entities or user associations\r\nexist in this folder or any of its descendants.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Delete - Deletes any folder) and (SubFolders.Delete - Deletes folder only if user has SubFolders.Delete permission on it).",
        "operationId": "Folders_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.AssignUsers": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Assigns one or more users to a set of folders with an optional set of roles per folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit - Assigns users to any folder) and (SubFolders.Edit - Assigns users only if caller has SubFolders.Edit permission on all folders provided) and (Users.View and Roles.View).",
        "operationId": "Folders_AssignUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "assignUsersActionParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "assignments": {
                  "$ref": "#/definitions/UserAssignmentsDto"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.AssignDomainUser": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Assigns a directory user or group to a set of folders with an optional set of roles per folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit - Assigns domain user to any folder) and (SubFolders.Edit - Assigns domain user only if caller has SubFolders.Edit permission on all folders provided) and (Users.View and Roles.View).",
        "operationId": "Folders_AssignDomainUser",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "assignDomainUserActionParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "assignment": {
                  "$ref": "#/definitions/DomainUserAssignmentDto"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.GetUsersForFolder(key={key},includeInherited={includeInherited})": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Returns the users who have access to a folder and optionally the fine-grained roles each one\r\nhas on that folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: (Units.View - Gets users for any folder) and (SubFolders.View - Gets users only if caller has SubFolders.View permission on folder) and (Users.View).",
        "operationId": "Folders_GetUsersForFolderByKeyAndIncludeinherited",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeInherited",
            "in": "path",
            "description": "If true, the response will include users inherited from ancestors",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserRolesDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders({Id})/UiPath.Server.Configuration.OData.RemoveUserFromFolder": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Remove user assignment from a folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit - Remove user from any folder) and (SubFolders.Edit - Remove user only if caller has SubFolders.Edit permission on folder) and (Users.View).",
        "operationId": "Folders_RemoveUserFromFolderById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "removeUserFromFolderParameters",
            "in": "body",
            "description": "userId - The Id of the user to remove from the folder",
            "required": true,
            "schema": {
              "required": [
                "userId"
              ],
              "type": "object",
              "properties": {
                "userId": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.GetAllRolesForUser(username='{username}',skip={skip},take={take})": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Returns a page of the user-folder assignments for the input user, including the roles for each folder.\r\nThe response also includes the folders assigned to the directory groups of the user.\r\nThe distinction between the folders assigned directly to the user and the ones assigned to one of his groups\r\ncan be made via the User field of the response.\r\nLIMITATION: If URI parameters contain special characters (eg. \\, /), use instead api/FoldersNavigation/GetAllRolesForUser endpoint.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission) and (Users.View and Roles.View).",
        "operationId": "Folders_GetAllRolesForUserByUsernameAndSkipAndTake",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "User name",
            "required": true,
            "type": "string"
          },
          {
            "name": "skip",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "take",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRoleAssignmentsDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.GetMachinesForFolder(key={key})": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Returns the machines assigned to a folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View) and (Machines.View).",
        "operationId": "Folders_GetMachinesForFolderByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[MachineFolderDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders/UiPath.Server.Configuration.OData.AssignMachines": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Assigns one or more machines to a set of folders.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).",
        "operationId": "Folders_AssignMachines",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "assignMachinesActionParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "assignments": {
                  "$ref": "#/definitions/MachineAssignmentsDto"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Folders({Id})/UiPath.Server.Configuration.OData.RemoveMachinesFromFolder": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Remove user assignment from a folder.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit) and (Machines.View).",
        "operationId": "Folders_RemoveMachinesFromFolderById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "removeMachinesFromFolderParameters",
            "in": "body",
            "description": "The Ids of the machines to remove from the folder",
            "required": true,
            "schema": {
              "required": [
                "machineIds"
              ],
              "type": "object",
              "properties": {
                "machineIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses": {
      "get": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Gets host licenses.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[HostLicenseDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses({Id})": {
      "get": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Gets a single host license based on its key.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HostLicenseDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Deletes a host license based on its key.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.UploadLicense": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Uploads a new host license file that was previously generated with Regutil.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_UploadLicense",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HostLicenseDto"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetTenantLicense(tenantId={tenantId})": {
      "get": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Gets a single tenant license based on its id.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_GetTenantLicenseByTenantid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.DeleteTenantLicense": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Deletes a tenant license based on its key.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_DeleteTenantLicense",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deleteTenantLicenseParameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "tenantId"
              ],
              "type": "object",
              "properties": {
                "tenantId": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.ActivateLicenseOnline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Activate the license for the host",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_ActivateLicenseOnline",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "activateLicenseParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "licenseKey": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetLicenseOffline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Create the offline activation request for the host",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_GetLicenseOffline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "activateLicenseParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "licenseKey": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.UpdateLicenseOnline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Update the license for the host",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_UpdateLicenseOnline",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.ActivateLicenseOffline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Uploads a new offline license activation.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_ActivateLicenseOffline",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.DeactivateLicenseOnline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Deactivate the license for the host",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_DeactivateLicenseOnline",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "deactivateLicenseOnlineParameters",
            "in": "body",
            "description": "DeactivateLicenseOnline action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetDeactivateLicenseOffline": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Deactivate the license offline for the host",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_GetDeactivateLicenseOffline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deactivateLicenseOfflineParameters",
            "in": "body",
            "description": "GetDeactivateLicenseOffline action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/HostLicenses/UiPath.Server.Configuration.OData.SetTenantLicense": {
      "post": {
        "tags": [
          "HostLicenses"
        ],
        "summary": "Sets the license for a specific tenant",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "HostLicenses_SetTenantLicense",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "setTenantLicenseParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "license": {
                  "$ref": "#/definitions/HostLicensePerTenantDto"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets Jobs.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
        "operationId": "Jobs_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[JobDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs({Id})": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets a single job.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
        "operationId": "Jobs_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JobDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Jobs.Create.",
        "operationId": "Jobs_StartJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startJobParameters",
            "in": "body",
            "description": "StartInfo - The information required to register the new jobs.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "startInfo": {
                  "$ref": "#/definitions/StartProcessDto"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[JobDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs({Id})/UiPath.Server.Configuration.OData.StopJob": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancels or terminates the specified job.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
        "operationId": "Jobs_StopJobById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "stopJobParameters",
            "in": "body",
            "description": "Strategy - States whether a job should be soft stopped or killed immediately.",
            "required": true,
            "schema": {
              "required": [
                "strategy"
              ],
              "type": "object",
              "properties": {
                "strategy": {
                  "enum": [
                    "SoftStop",
                    "Kill"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "StopJobParametersEnum",
                    "modelAsString": false
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs/UiPath.Server.Configuration.OData.StopJobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancels or terminates the specified jobs.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
        "operationId": "Jobs_StopJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "stopJobsParameters",
            "in": "body",
            "description": "JobIds - The ids for the jobs to be canceled or terminated;\r\n            Strategy - States whether a job should be soft stopped or killed immediately.",
            "required": true,
            "schema": {
              "required": [
                "jobIds",
                "strategy"
              ],
              "type": "object",
              "properties": {
                "jobIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "strategy": {
                  "enum": [
                    "SoftStop",
                    "Kill"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "StopJobsParametersEnum",
                    "modelAsString": false
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Jobs/UiPath.Server.Configuration.OData.ResumeJob": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Resumes the specified job.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
        "operationId": "Jobs_ResumeJob",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resumeParameters",
            "in": "body",
            "description": "The specified job key.",
            "required": true,
            "schema": {
              "required": [
                "jobKey"
              ],
              "type": "object",
              "properties": {
                "jobKey": {
                  "format": "guid",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JobDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/JobTriggers": {
      "get": {
        "tags": [
          "JobTriggers"
        ],
        "summary": "Gets JobTriggers.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
        "operationId": "JobTriggers_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[JobTriggerDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Libraries": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Gets the library packages.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
        "operationId": "Libraries_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[LibraryDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Libraries('{Id}')": {
      "delete": {
        "tags": [
          "Libraries"
        ],
        "summary": "Deletes a package.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Libraries.Delete.",
        "operationId": "Libraries_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Package deleted"
          },
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Libraries/UiPath.Server.Configuration.OData.GetVersions(packageId='{packageId}')": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Returns a collection of all available versions of a given package. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
        "operationId": "Libraries_GetVersionsByPackageid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "description": "The Id of the package for which the versions are fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[LibraryDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Libraries/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')": {
      "get": {
        "tags": [
          "Libraries"
        ],
        "summary": "Downloads the .nupkg file of a Package.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
        "operationId": "Libraries_DownloadPackageByKey",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Libraries/UiPath.Server.Configuration.OData.UploadPackage": {
      "post": {
        "tags": [
          "Libraries"
        ],
        "summary": "Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Libraries.Create.",
        "operationId": "Libraries_UploadPackage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "file1",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file2",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file3",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file4",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file5",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file6",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file7",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file8",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file9",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "207": {
            "description": "207",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BulkItemDto[String]]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LicensesNamedUser/UiPath.Server.Configuration.OData.GetLicensesNamedUser(robotType='{robotType}')": {
      "get": {
        "tags": [
          "LicensesNamedUser"
        ],
        "summary": "Gets named-user licenses.",
        "description": "Client Credentials Flow required permissions: License or License.Read.\r\n\r\nRequired permissions: License.View.",
        "operationId": "LicensesNamedUser_GetLicensesNamedUserByRobottype",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "StudioX",
              "Headless",
              "StudioPro",
              "TestAutomation"
            ]
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[LicenseNamedUserDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LicensesRuntime/UiPath.Server.Configuration.OData.GetLicensesRuntime(robotType='{robotType}')": {
      "get": {
        "tags": [
          "LicensesRuntime"
        ],
        "summary": "Gets runtime licenses.",
        "description": "Client Credentials Flow required permissions: License or License.Read.\r\n\r\nRequired permissions: License.View.",
        "operationId": "LicensesRuntime_GetLicensesRuntimeByRobottype",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "StudioX",
              "Headless",
              "StudioPro",
              "TestAutomation"
            ]
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[LicenseRuntimeDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/LicensesRuntime('{key}')/UiPath.Server.Configuration.OData.ToggleEnabled": {
      "post": {
        "tags": [
          "LicensesRuntime"
        ],
        "summary": "Toggles machine licensing on/off.",
        "description": "Client Credentials Flow required permissions: License or License.Write.\r\n\r\nRequired permissions: Machines.Edit.",
        "operationId": "LicensesRuntime_ToggleEnabledByKey",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "toggleMachineLicenseParameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "robotType",
                "enabled"
              ],
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "robotType": {
                  "enum": [
                    "NonProduction",
                    "Attended",
                    "Unattended",
                    "Development",
                    "StudioX",
                    "Headless",
                    "StudioPro",
                    "TestAutomation"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "ToggleMachineLicenseParametersEnum",
                    "modelAsString": false
                  }
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Machines": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Gets machines.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Read.\r\n\r\nRequired permissions: Machines.View.",
        "operationId": "Machines_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ExtendedMachineDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Machines"
        ],
        "summary": "Creates a new machine.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Write.\r\n\r\nRequired permissions: Machines.Create.",
        "operationId": "Machines_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "machineDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Machines({Id})": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Gets a single machine based on its key.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Read.\r\n\r\nRequired permissions: Machines.View.",
        "operationId": "Machines_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Machines"
        ],
        "summary": "Edits a machine based on its key.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Write.\r\n\r\nRequired permissions: Machines.Edit.",
        "operationId": "Machines_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "machineDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Machines"
        ],
        "summary": "Deletes a machine based on its key.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Write.\r\n\r\nRequired permissions: Machines.Delete.",
        "operationId": "Machines_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Machines"
        ],
        "summary": "Partially updates a machine.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Write.\r\n\r\nRequired permissions: Machines.Edit.",
        "operationId": "Machines_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "machineDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Machines/UiPath.Server.Configuration.OData.DeleteBulk": {
      "post": {
        "tags": [
          "Machines"
        ],
        "summary": "Deletes multiple machines based on their keys.",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Write.\r\n\r\nRequired permissions: Machines.Delete.",
        "operationId": "Machines_DeleteBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "machinesDeleteBulk",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "machineIds"
              ],
              "type": "object",
              "properties": {
                "machineIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Empty machineIds collection in payload"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Machines/UiPath.Server.Configuration.OData.GetRuntimesForFolder(folderId={folderId})": {
      "get": {
        "tags": [
          "Machines"
        ],
        "summary": "Gets runtimes for the specified folder",
        "description": "Client Credentials Flow required permissions: Machines or Machines.Read.\r\n\r\nRequired permissions: Machines.View.",
        "operationId": "Machines_GetRuntimesForFolderByFolderid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[MachineRuntimeDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MessageTemplates": {
      "get": {
        "tags": [
          "MessageTemplates"
        ],
        "summary": "Gets the message templates.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "MessageTemplates_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[MessageTemplateDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/MessageTemplates('{Id}')": {
      "put": {
        "tags": [
          "MessageTemplates"
        ],
        "summary": "Edits a message template.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "MessageTemplates_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "MessageTemplateDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageTemplateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MessageTemplateDto"
            }
          },
          "400": {
            "description": "No message template was found with the given name."
          }
        },
        "deprecated": false
      }
    },
    "/odata/OrganizationUnits": {
      "get": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Gets the organization units.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: Units.View.\r\n\r\nDEPRECATED: Use /Folders/GetFolders instead.",
        "operationId": "OrganizationUnits_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[OrganizationUnitDto]]"
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Creates an organization unit.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: Units.Create.\r\n\r\nDEPRECATED: Use /Folders/Post instead.",
        "operationId": "OrganizationUnits_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "OrganizationUnitDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        },
        "deprecated": true
      }
    },
    "/odata/OrganizationUnits({Id})": {
      "get": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Gets an organization unit.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: Units.View.\r\n\r\nDEPRECATED: Use /Folders/Get instead.",
        "operationId": "OrganizationUnits_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Edits an organization unit.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: Units.Edit.\r\n\r\nDEPRECATED: Use /Folders/Put instead.",
        "operationId": "OrganizationUnits_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "OrganizationUnitDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Deletes an organization unit.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: Units.Delete.\r\n\r\nDEPRECATED: Use /Folders/Delete instead.",
        "operationId": "OrganizationUnits_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": true
      }
    },
    "/odata/OrganizationUnits/UiPath.Server.Configuration.OData.GetUsersForUnit(key={key})": {
      "get": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Returns a collection of all non robot users and, if no other sorting is provided, will place first those associated to an unit. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: Units.View and Users.View.\r\n\r\nDEPRECATED: Use /Folders/GetUsersForFolder instead.",
        "operationId": "OrganizationUnits_GetUsersForUnitByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the unit for which the associated users are placed first.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserDto]]"
            }
          }
        },
        "deprecated": true
      }
    },
    "/odata/OrganizationUnits/UiPath.Server.Configuration.OData.GetUserIdsForUnit(key={key})": {
      "get": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Returns a collection of all the ids of the users associated to an unit based on unit Id.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Read.\r\n\r\nRequired permissions: Units.View and Users.View.\r\n\r\nDEPRECATED: Kept for backwards compatibility.",
        "operationId": "OrganizationUnits_GetUserIdsForUnitByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the unit for which the robot ids are fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[Int64]]"
            }
          }
        },
        "deprecated": true
      }
    },
    "/odata/OrganizationUnits({Id})/UiPath.Server.Configuration.OData.SetUsers": {
      "post": {
        "tags": [
          "OrganizationUnits"
        ],
        "summary": "Associates a group of users with and dissociates another group of users from the given unit.",
        "description": "Client Credentials Flow required permissions: Folders or Folders.Write.\r\n\r\nRequired permissions: Users.Edit.\r\n\r\nDEPRECATED: Use /Folders/AssignUsers instead.",
        "operationId": "OrganizationUnits_SetUsersById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "setUsersParameters",
            "in": "body",
            "description": "<para />addedUserIds - The id of the users to be associated with the unit.\r\n            <para />removedUserIds - The id of the users to be dissociated from the unit.",
            "required": true,
            "schema": {
              "required": [
                "addedUserIds",
                "removedUserIds"
              ],
              "type": "object",
              "properties": {
                "addedUserIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "removedUserIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "Nothing returned"
          }
        },
        "deprecated": true
      }
    },
    "/odata/Permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets permissions.",
        "operationId": "Permissions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[PermissionDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Gets the processes.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequires authentication.",
        "operationId": "Processes_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "feedId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ProcessDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes('{Id}')": {
      "delete": {
        "tags": [
          "Processes"
        ],
        "summary": "Deletes a package.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequires authentication.",
        "operationId": "Processes_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "feedId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Package deleted"
          },
          "204": {
            "description": "Deleted"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes/UiPath.Server.Configuration.OData.GetProcessVersions(processId='{processId}')": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Returns a collection of all available versions of a given process. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequires authentication.",
        "operationId": "Processes_GetProcessVersionsByProcessid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "The Id of the process for which the versions are fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "feedId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ProcessDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Downloads the .nupkg file of a Package.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequires authentication.",
        "operationId": "Processes_DownloadPackageByKey",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "name": "feedId",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage": {
      "post": {
        "tags": [
          "Processes"
        ],
        "summary": "Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: (Packages.Create - Uploads packages in tenant-level feed.).",
        "operationId": "Processes_UploadPackage",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedId",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "file1",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file2",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file3",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file4",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file5",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file6",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file7",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file8",
            "in": "formData",
            "required": false,
            "type": "file"
          },
          {
            "name": "file9",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BulkItemDto[String]]]"
            }
          },
          "207": {
            "description": "207",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[BulkItemDto[String]]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes/UiPath.Server.Configuration.OData.GetArguments(key='{key}')": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Get process parameters",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Packages.View.",
        "operationId": "Processes_GetArgumentsByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ArgumentMetadata"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Processes/UiPath.Server.Configuration.OData.SetArguments": {
      "post": {
        "tags": [
          "Processes"
        ],
        "summary": "Saves process arguments",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Packages.Edit.",
        "operationId": "Processes_SetArguments",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "setArgumentsParameters",
            "in": "body",
            "description": "SetArguments action parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "arguments": {
                  "$ref": "#/definitions/ArgumentMetadata"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/ProcessSchedules": {
      "get": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Gets the process schedules.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
        "operationId": "ProcessSchedules_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ProcessScheduleDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Creates a new process schedule.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Schedules.Create.",
        "operationId": "ProcessSchedules_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ProcessScheduleDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/ProcessSchedules({Id})": {
      "get": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Gets a single process schedule based on its key.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
        "operationId": "ProcessSchedules_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Edits a process schedule.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
        "operationId": "ProcessSchedules_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ProcessScheduleDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          },
          "204": {
            "description": "Successful put",
            "schema": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Deletes a process schedule.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Schedules.Delete.",
        "operationId": "ProcessSchedules_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.SetEnabled": {
      "post": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Enables/disables a group of schedules.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
        "operationId": "ProcessSchedules_SetEnabled",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setEnabledParameters",
            "in": "body",
            "description": "<para />Enabled - If true the schedules will be enabled, if false the schedules will be disabled.\r\n            <para />ScheduleIds - The collection of ids of the affected schedules.",
            "required": true,
            "schema": {
              "required": [
                "scheduleIds",
                "enabled"
              ],
              "type": "object",
              "properties": {
                "scheduleIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Boolean]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.GetRobotIdsForSchedule(key={key})": {
      "get": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
        "operationId": "ProcessSchedules_GetRobotIdsForScheduleByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the schedule for which the robot ids are fetched.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[Int64]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/ProcessSchedules({Id})/UiPath.Server.Configuration.OData.Activate": {
      "post": {
        "tags": [
          "ProcessSchedules"
        ],
        "summary": "Activates a process schedule associated with a queue",
        "description": "Client Credentials Flow required permissions: Jobs or Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
        "operationId": "ProcessSchedules_ActivateById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Process Schedule was activated successfully"
          },
          "404": {
            "description": "Process Schedule not found"
          },
          "409": {
            "description": "Process Schedule cannot be activated"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueDefinitions": {
      "get": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Gets the list of queue definitions.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
        "operationId": "QueueDefinitions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueDefinitionDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Creates a new queue.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.Create.",
        "operationId": "QueueDefinitions_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "QueueDefinitionDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueDefinitions({Id})": {
      "get": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Gets a single queue definition based on its Id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
        "operationId": "QueueDefinitions_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Edits a queue.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.Edit.",
        "operationId": "QueueDefinitions_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "queueDefinitionDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Deletes a queue based on its key.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.Delete.",
        "operationId": "QueueDefinitions_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueDefinitions({Id})/UiPathODataSvc.Reports()": {
      "get": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Returns an Excel file containing all the items in the given queue.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueDefinitions_ReportsById",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueDefinitions({Id})/UiPathODataSvc.GetJsonSchemaDefinition(jsonSchemaType='{jsonSchemaType}')": {
      "get": {
        "tags": [
          "QueueDefinitions"
        ],
        "summary": "Gets a given queue item JSON schema as a .json file, based on queue definition id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.Edit.",
        "operationId": "QueueDefinitions_GetJsonSchemaDefinitionByIdAndJsonschematype",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "jsonSchemaType",
            "in": "path",
            "description": "Possible values: QueueSchemaType",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemComments": {
      "get": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Gets the QueueItemComments.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemComments_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemCommentDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Creates a QueueItemComment.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.\r\n\r\nNote: If the CreationTime is passed in in the {UiPath.Orchestrator.Application.Dto.Queues.QueueItemCommentDto} it will be overriden with server UTC time.",
        "operationId": "QueueItemComments_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "queueItemCommentDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueItemCommentDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/QueueItemCommentDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemComments({Id})": {
      "get": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Gets a QueueItemComment by Id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemComments_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueItemCommentDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Updates a QueueItemComment",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItemComments_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "queueItemCommentDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueItemCommentDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Deletes a QueueItemComment.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItemComments_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemComments/UiPath.Server.Configuration.OData.GetQueueItemCommentsHistory(queueItemId={queueItemId})": {
      "get": {
        "tags": [
          "QueueItemComments"
        ],
        "summary": "Returns a collection of Queue Item Comments associated to a Queue Item and all its related Queue Items.\r\nA Queue Item is related to another if it was created as a retry of a failed Queue Item. They also share the same Key.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemComments_GetQueueItemCommentsHistoryByQueueitemid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "queueItemId",
            "in": "path",
            "description": "The Id of the Queue Item for which the comment history is requested.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemCommentDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemEvents": {
      "get": {
        "tags": [
          "QueueItemEvents"
        ],
        "summary": "Gets the QueueItemEvents.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemEvents_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemEventDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemEvents({Id})": {
      "get": {
        "tags": [
          "QueueItemEvents"
        ],
        "summary": "Gets a QueueItemEvent by Id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemEvents_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueItemEventDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItemEvents/UiPath.Server.Configuration.OData.GetQueueItemEventsHistory(queueItemId={queueItemId})": {
      "get": {
        "tags": [
          "QueueItemEvents"
        ],
        "summary": "Returns a collection of Queue Item Events associated to a Queue Item and all its related Queue Items.\r\nA Queue Item is related to another if it was created as a retry of a failed Queue Item. They also share the same Key.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItemEvents_GetQueueItemEventsHistoryByQueueitemid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "queueItemId",
            "in": "path",
            "description": "The Id of the Queue Item for which the event history is requested.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemEventDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems": {
      "get": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Gets a collection of queue items.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItems_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems({Id})": {
      "get": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Gets a queue item by Id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItems_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueItemDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Updates the QueueItem properties with the new values provided.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.Edit and Transactions.Edit.\r\n\r\nOnly {UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.Progress}, {UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.Priority}, {UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.DueDate}, {UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.DeferDate} and {UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.SpecificContent} will be updated from given queueItemDto object.",
        "operationId": "QueueItems_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "QueueItemDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueItemDataDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue Item updated successfully."
          },
          "404": {
            "description": "Queue Item does not exist."
          },
          "409": {
            "description": "Conflict with Queue Item being updated."
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Deletes a queue item by Id.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Delete.",
        "operationId": "QueueItems_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems({Id})/UiPathODataSvc.GetItemProcessingHistory()": {
      "get": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Returns data about the processing history of the given queue item. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItems_GetItemProcessingHistoryById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueItemDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems({Id})/UiPath.Server.Configuration.OData.GetItemLastRetry()": {
      "get": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Returns the last retry of a queue item.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueItems_GetItemLastRetryById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueItemDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems/UiPathODataSvc.SetItemReviewStatus": {
      "post": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Updates the review status of the specified queue items to an indicated state.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItems_SetItemReviewStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemReviewStatusParameters",
            "in": "body",
            "description": "<para />QueueItems - The collection of ids of queue items for which the state is set.\r\n            <para />Status - The new value for the review status.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "queueItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LongVersionedEntity"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems/UiPathODataSvc.DeleteBulk": {
      "post": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Sets the given queue items' status to Deleted.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Delete.",
        "operationId": "QueueItems_DeleteBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deleteBulkParameters",
            "in": "body",
            "description": "QueueItems - The collection of ids of queue items to delete.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "queueItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LongVersionedEntity"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems({Id})/UiPathODataSvc.SetTransactionProgress": {
      "post": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Updates the progress field of a queue item with the status 'In Progress'.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItems_SetTransactionProgressById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transactionProgressParameters",
            "in": "body",
            "description": "<para />QueueItemId - The item's id.\r\n            <para />Progress - The value for the Progress field.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "progress": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems/UiPathODataSvc.SetItemReviewer": {
      "post": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Sets the reviewer for multiple queue items",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItems_SetItemReviewer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setReviewerBulkParameters",
            "in": "body",
            "description": "<para />UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.\r\n            <para />QueueItems - The collection of ids of queue items for which the reviewer is set.",
            "required": true,
            "schema": {
              "required": [
                "userId"
              ],
              "type": "object",
              "properties": {
                "userId": {
                  "format": "int64",
                  "type": "integer"
                },
                "queueItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LongVersionedEntity"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems/UiPathODataSvc.UnsetItemReviewer": {
      "post": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Unsets the reviewer for multiple queue items",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItems_UnsetItemReviewer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "unsetReviewerBulkParameters",
            "in": "body",
            "description": "<para />QueueItems - The collection of ids of queue items for which the reviewer is unset.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "queueItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LongVersionedEntity"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueItems/UiPath.Server.Configuration.OData.GetReviewers()": {
      "get": {
        "tags": [
          "QueueItems"
        ],
        "summary": "Returns a collection of users having the permission for Queue Items review. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "QueueItems_GetReviewers",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[SimpleUserDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueProcessingRecords/UiPathODataSvc.RetrieveLastDaysProcessingRecords(daysNo={daysNo},queueDefinitionId={queueDefinitionId})": {
      "get": {
        "tags": [
          "QueueProcessingRecords"
        ],
        "summary": "Returns the computed processing status for a given queue in the last specified days.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
        "operationId": "QueueProcessingRecords_RetrieveLastDaysProcessingRecordsByDaysnoAndQueuedefinitionid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "daysNo",
            "in": "path",
            "description": "The number of days to go back from the present moment when calculating the report. If it is 0 the report will be computed for the last hour.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "queueDefinitionId",
            "in": "path",
            "description": "The Id of the queue for which the report is computed.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueProcessingRecordDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/QueueProcessingRecords/UiPathODataSvc.RetrieveQueuesProcessingStatus()": {
      "get": {
        "tags": [
          "QueueProcessingRecords"
        ],
        "summary": "Returns the processing status for all queues. Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
        "operationId": "QueueProcessingRecords_RetrieveQueuesProcessingStatus",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[QueueProcessingStatusDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Queues/UiPathODataSvc.StartTransaction": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Starts a transaction.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.",
        "operationId": "Queues_StartTransaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startTransactionParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "transactionData": {
                  "$ref": "#/definitions/TransactionDataDto"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QueueItemDto"
            }
          },
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Queues/UiPathODataSvc.AddQueueItem": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Adds a new queue item.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Create.",
        "operationId": "Queues_AddQueueItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "queueItemParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "itemData": {
                  "$ref": "#/definitions/QueueItemDataDto"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/QueueItemDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Queues/UiPathODataSvc.BulkAddQueueItems": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Bulk adds queue items",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Create.",
        "operationId": "Queues_BulkAddQueueItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bulkAddQueueItemsParameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "commitType"
              ],
              "type": "object",
              "properties": {
                "queueName": {
                  "type": "string"
                },
                "commitType": {
                  "enum": [
                    "AllOrNothing",
                    "StopOnFirstFailure",
                    "ProcessAllIndependently"
                  ],
                  "type": "string",
                  "x-ms-enum": {
                    "name": "BulkAddQueueItemsParametersEnum",
                    "modelAsString": false
                  }
                },
                "queueItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/QueueItemDataDto"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[FailedQueueItemDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Queues({Id})/UiPathODataSvc.SetTransactionResult": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Sets the result of a transaction.",
        "description": "Client Credentials Flow required permissions: Queues or Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
        "operationId": "Queues_SetTransactionResultById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "setTransactionParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "transactionResult": {
                  "$ref": "#/definitions/TransactionResultDto"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Gets multiple releases.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
        "operationId": "Releases_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ReleaseDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Creates a new release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Create.",
        "operationId": "Releases_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ReleaseDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases({Id})": {
      "get": {
        "tags": [
          "Releases"
        ],
        "summary": "Gets a release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
        "operationId": "Releases_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "summary": "Edits a release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ReleaseDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Releases"
        ],
        "summary": "Deletes a release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Delete.",
        "operationId": "Releases_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Releases"
        ],
        "summary": "Partially updates a release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ReleaseDto",
            "in": "body",
            "description": "The entity to patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToSpecificPackageVersion": {
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Updates the package version for the given release.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_UpdateToSpecificPackageVersionById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "specificPackageParameters",
            "in": "body",
            "description": "PackageVersion - The new package version.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "packageVersion": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases({Id})/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersion": {
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Updates the package version for the given release to the latest available.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_UpdateToLatestPackageVersionById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersionBulk": {
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Updates the package versions for the given releases to the latest available.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_UpdateToLatestPackageVersionBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updateToLatestBulk",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "releaseIds"
              ],
              "type": "object",
              "properties": {
                "releaseIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BulkOperationResponseDto[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Releases({Id})/UiPath.Server.Configuration.OData.RollbackToPreviousReleaseVersion": {
      "post": {
        "tags": [
          "Releases"
        ],
        "summary": "Reverts the package versions for the given release to the last version it had before the current one.",
        "description": "Client Credentials Flow required permissions: Execution or Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
        "operationId": "Releases_RollbackToPreviousReleaseVersionById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/RobotLogs": {
      "get": {
        "tags": [
          "RobotLogs"
        ],
        "summary": "Gets the robot logs.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.",
        "operationId": "RobotLogs_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[LogDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/RobotLogs/UiPath.Server.Configuration.OData.GetTotalCount()": {
      "get": {
        "tags": [
          "RobotLogs"
        ],
        "summary": "Gets the total count of robot logs.\r\nThis might be different than the size of the count returned by GetRobotLogs which\r\nis limited by the max_result_window parameter for an Elasticsearch source.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.",
        "operationId": "RobotLogs_GetTotalCount",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Int64]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/RobotLogs/UiPath.Server.Configuration.OData.Reports()": {
      "get": {
        "tags": [
          "RobotLogs"
        ],
        "summary": "Reports.",
        "description": "Client Credentials Flow required permissions: Monitoring or Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.",
        "operationId": "RobotLogs_Reports",
        "consumes": [],
        "produces": [
          "image/file"
        ],
        "parameters": [
          {
            "name": "fileNameSubject",
            "in": "query",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "file",
              "type": "file"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots": {
      "get": {
        "tags": [
          "Robots"
        ],
        "summary": "Gets robots.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
        "operationId": "Robots_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[RobotDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Robots"
        ],
        "summary": "Creates a new robot.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: (Robots.Create - Floating Robot) and (Robots.Create and Machines.View - Standard Robot).",
        "operationId": "Robots_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "robotDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots({Id})": {
      "get": {
        "tags": [
          "Robots"
        ],
        "summary": "Gets a single robot based on its key.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
        "operationId": "Robots_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Robots"
        ],
        "summary": "Edits a robot based on its key.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
        "operationId": "Robots_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "robotDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Robots"
        ],
        "summary": "Deletes a robot based on its key.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Robots.Delete.",
        "operationId": "Robots_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Robots"
        ],
        "summary": "Partially updates a robot.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
        "operationId": "Robots_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "RobotDto",
            "in": "body",
            "description": "The entity to patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RobotDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots/UiPath.Server.Configuration.OData.GetMachineNameToLicenseKeyMappings()": {
      "get": {
        "tags": [
          "Robots"
        ],
        "summary": "Gets machine name to license key mapping.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.Create and Machines.View.",
        "operationId": "Robots_GetMachineNameToLicenseKeyMappings",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[KeyValuePair[String,String]]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots/UiPath.Server.Configuration.OData.GetUsernames()": {
      "get": {
        "tags": [
          "Robots"
        ],
        "summary": "Gets usernames.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
        "operationId": "Robots_GetUsernames",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[String]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots/UiPath.Server.Configuration.OData.GetRobotsForProcess(processId='{processId}')": {
      "get": {
        "tags": [
          "Robots"
        ],
        "summary": "Returns a collection of all robots that can execute the process with the provided Id.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View and Environments.View and Processes.View.",
        "operationId": "Robots_GetRobotsForProcessByProcessid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "The Id of the process for which the robots are fetched.",
            "required": true,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[RobotDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots/UiPath.Server.Configuration.OData.DeleteBulk": {
      "post": {
        "tags": [
          "Robots"
        ],
        "summary": "Deletes multiple robots based on their keys.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Robots.Delete.",
        "operationId": "Robots_DeleteBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "robotsDeleteBulk",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "robotIds"
              ],
              "type": "object",
              "properties": {
                "robotIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Empty robotIds collection in payload"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Robots/UiPath.Server.Configuration.OData.ConvertToFloating": {
      "post": {
        "tags": [
          "Robots"
        ],
        "summary": "Convert a Standard Attended Robot to a Floating Robot.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
        "operationId": "Robots_ConvertToFloating",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "convertToFloatingParams",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "robotId"
              ],
              "type": "object",
              "properties": {
                "robotId": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid arguments"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Gets roles.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequired permissions: Roles.View.",
        "operationId": "Roles_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[RoleDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Creates a new role.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Roles.Create.",
        "operationId": "Roles_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Roles({Id})": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Gets role based on its id.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequired permissions: Roles.View.",
        "operationId": "Roles_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Edits a role.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Roles.Edit.",
        "operationId": "Roles_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roleDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Deletes a role.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Roles.Delete.",
        "operationId": "Roles_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Roles/UiPath.Server.Configuration.OData.GetUsersForRole(key={key})": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns a collection of all users and, if no other sorting is provided, will place first those associated to a role.Allows odata query options.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequired permissions: Roles.View and Users.View.",
        "operationId": "Roles_GetUsersForRoleByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the role for which the associated users are placed first.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Roles/UiPath.Server.Configuration.OData.GetUserIdsForRole(key={key})": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns a collection of all the ids of the users associated to a role based on role Id.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequired permissions: Roles.View or Users.View.",
        "operationId": "Roles_GetUserIdsForRoleByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The Id of the role for which the robot ids are fetched.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[Int64]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Roles({Id})/UiPath.Server.Configuration.OData.SetUsers": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Associates a group of users with and dissociates another group of users from the given role.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Roles.Edit and Users.View.",
        "operationId": "Roles_SetUsersById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "setUsersParameters",
            "in": "body",
            "description": "<para />addedUserIds - The id of the users to be associated with the role.\r\n            <para />removedUserIds - The id of the users to be dissociated from the role.",
            "required": true,
            "schema": {
              "required": [
                "addedUserIds",
                "removedUserIds"
              ],
              "type": "object",
              "properties": {
                "addedUserIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "removedUserIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Nothing returned"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Gets the sessions for the current folder.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
        "operationId": "Sessions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[SessionDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Sessions/UiPath.Server.Configuration.OData.GetGlobalSessions()": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Gets all the tenant sessions.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View or Users.View.",
        "operationId": "Sessions_GetGlobalSessions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[SessionDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Sessions/UiPath.Server.Configuration.OData.GetUsernames()": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Gets usernames.",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Robots.View or Users.View.",
        "operationId": "Sessions_GetUsernames",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[String]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Sessions/UiPath.Server.Configuration.OData.GetMachineSessions(key={key})": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get sessions for a machine",
        "description": "Client Credentials Flow required permissions: Robots or Robots.Read.\r\n\r\nRequired permissions: Machines.View.",
        "operationId": "Sessions_GetMachineSessionsByKey",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[MachineSessionDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets the settings.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "Settings_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[SettingsDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings('{Id}')": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets a settings value based on its key.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "Settings_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Edits a setting.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "Settings_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "string"
          },
          {
            "name": "SettingsDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SettingsDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SettingsDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetServicesSettings()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Returns a collection of key value pairs representing all service settings used by a robot. A valid robot license key is required in the request headers.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.",
        "operationId": "Settings_GetServicesSettings",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseDictionaryDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetWebSettings()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Returns a collection of key value pairs representing settings used by Orchestrator web client.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequires authentication.",
        "operationId": "Settings_GetWebSettings",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseDictionaryDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetAuthenticationSettings()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets the authentication settings",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.",
        "operationId": "Settings_GetAuthenticationSettings",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseDictionaryDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetExecutionSettingsConfiguration(scope={scope})": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets the execution settings configuration (display name, value type, etc.).\r\nIf scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then\r\nthe default values will be the actual values set globally.\r\ne.g., Resolution width\r\nAssume it was set globally to 720.\r\nThen within the config returned by this function, the default value for this setting will be:\r\n- 0 for scope = 0 and\r\n- 720 for scope = 1.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.Edit or Robots.Create or Robots.Edit.",
        "operationId": "Settings_GetExecutionSettingsConfigurationByScope",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the configuration; 0 for Global, 1 for Robot",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExecutionSettingsConfiguration"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetSecureStoreConfiguration(storeTypeName='{storeTypeName}')": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets the configuration format for a Secure store",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "Settings_GetSecureStoreConfigurationByStoretypename",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeTypeName",
            "in": "path",
            "description": "name of the secure store type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[ConfigurationEntry]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetConnectionString()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets the connection string",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "Settings_GetConnectionString",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetLicense()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Retrieves the current license information.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequires authentication.",
        "operationId": "Settings_GetLicense",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.UploadLicense": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
        "operationId": "Settings_UploadLicense",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.DeleteLicense": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Removes the license",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
        "operationId": "Settings_DeleteLicense",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetTimezones()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets timezones.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.",
        "operationId": "Settings_GetTimezones",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultDto[NameValueDto]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.UpdateBulk": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Updates the current settings.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "Settings_UpdateBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "updateBulkParameters",
            "in": "body",
            "description": "Settings - The collection of settings to be updated.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "settings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SettingsDto"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetLanguages()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets supported languages",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.",
        "operationId": "Settings_GetLanguages",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultDto[LanguageInfo]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetCalendar()": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Gets custom calendar, with excluded dates in UTC, for current tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
        "operationId": "Settings_GetCalendar",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CalendarDto"
            }
          }
        },
        "deprecated": true
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.SetCalendar": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Sets custom calendar, with excluded dates in UTC, for current tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "Settings_SetCalendar",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "calendar",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.VerifySmtpSetting": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Verify whether the given SMTP settings are correct or not by sending an email to a recipient.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
        "operationId": "Settings_VerifySmtpSetting",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "smtpParameters",
            "in": "body",
            "description": "SMTP setting parameters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "sendTo": {
                  "type": "string"
                },
                "smtpSettingModel": {
                  "$ref": "#/definitions/SmtpSettingModel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.ActivateLicenseOnline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Activate the license for a specific tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
        "operationId": "Settings_ActivateLicenseOnline",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "activateLicenseParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "licenseKey": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetLicenseOffline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Create the offline activation request for a specific tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
        "operationId": "Settings_GetLicenseOffline",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "activateLicenseParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "licenseKey": {
                  "type": "string"
                },
                "environment": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.UpdateLicenseOnline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Update the license for a specific tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Edit.",
        "operationId": "Settings_UpdateLicenseOnline",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.ActivateLicenseOffline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Uploads a new offline license activation.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
        "operationId": "Settings_ActivateLicenseOffline",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BadRequest"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.DeactivateLicenseOnline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Deactivate the license for a specific tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
        "operationId": "Settings_DeactivateLicenseOnline",
        "consumes": [],
        "produces": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Settings/UiPath.Server.Configuration.OData.GetDeactivateLicenseOffline": {
      "post": {
        "tags": [
          "Settings"
        ],
        "summary": "Deactivate the license offline for a specific tenant",
        "description": "Client Credentials Flow required permissions: Settings or Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
        "operationId": "Settings_GetDeactivateLicenseOffline",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[String]"
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TaskCatalogs": {
      "get": {
        "tags": [
          "TaskCatalogs"
        ],
        "summary": "Gets Task Catalog objects with the given OData queries.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: TaskCatalogs.View.",
        "operationId": "TaskCatalogs_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TaskCatalogDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/TaskCatalogs({Id})": {
      "get": {
        "tags": [
          "TaskCatalogs"
        ],
        "summary": "Gets a Task Catalog item by Id.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: TaskCatalogs.View.",
        "operationId": "TaskCatalogs_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TaskCatalogDto"
            }
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.CreateTaskCatalog": {
      "post": {
        "tags": [
          "TaskCatalogs"
        ],
        "summary": "Creates a new Task Catalog.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: TaskCatalogs.Create.",
        "operationId": "TaskCatalogs_CreateTaskCatalog",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskCatalogRequest",
            "in": "body",
            "description": "The task catalog to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCatalogRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Created response.",
            "schema": {
              "$ref": "#/definitions/TaskCatalogDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/TaskCatalogs({Id})/UiPath.Server.Configuration.OData.UpdateTaskCatalog": {
      "post": {
        "tags": [
          "TaskCatalogs"
        ],
        "summary": "Updates Task Catalog.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: TaskCatalogs.Edit.",
        "operationId": "TaskCatalogs_UpdateTaskCatalogById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "taskCatalogRequest",
            "in": "body",
            "description": "TaskCatalog to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskCatalogRequest"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets Task objects with the given OData queries.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
        "operationId": "Tasks_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TaskDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks({Id})": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets a Task with the given primary key.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
        "operationId": "Tasks_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok result of Task object.",
            "schema": {
              "$ref": "#/definitions/TaskDto"
            }
          },
          "404": {
            "description": "Not found result."
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks/UiPath.Server.Configuration.OData.AssignTasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Assigns the tasks to given users.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.View and Tasks.Edit.",
        "operationId": "Tasks_AssignTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The json containing task and user Ids for assignment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "taskAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskAssignmentRequest"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful.",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TaskAssignmentErrorResponse]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks/UiPath.Server.Configuration.OData.ReassignTasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Reassigns the tasks to given users.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.View and Tasks.Edit and TaskAssignment.Create.",
        "operationId": "Tasks_ReassignTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The json containing task and user Ids for reassignment.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "taskAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TaskAssignmentRequest"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful.",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TaskAssignmentErrorResponse]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks/UiPath.Server.Configuration.OData.UnassignTasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Unassigns the tasks from the users.",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Write.\r\n\r\nRequired permissions: Tasks.View and Tasks.Edit.",
        "operationId": "Tasks_UnassignTasks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The json containing list of task ids for un-assignments.",
            "required": true,
            "schema": {
              "required": [
                "taskIds"
              ],
              "type": "object",
              "properties": {
                "taskIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Update successful.",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TaskAssignmentErrorResponse]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tasks/UiPath.Server.Configuration.OData.GetTaskUsers(organizationUnitId={organizationUnitId})": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets users in given Organization Unit, who have Tasks.View and Tasks.Edit permissions",
        "description": "Client Credentials Flow required permissions: Tasks or Tasks.Read.\r\n\r\nRequired permissions: Tasks.View and Tasks.Edit and TaskAssignment.Create.",
        "operationId": "Tasks_GetTaskUsersByOrganizationunitid",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "organizationUnitId",
            "in": "path",
            "description": "organizationUnitId of the task",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserLoginInfoDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tenants": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Gets tenants.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TenantDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Creates a tenant.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TenantDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tenants({Id})": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Gets a single tenant based on its id.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Read.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Deletes a tenant based on its id.",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Tenants"
        ],
        "summary": "Partially updates a tenant",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "TenantDto",
            "in": "body",
            "description": "The entity to patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Tenants/UiPath.Server.Configuration.OData.SetActive": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Toggles the active status of tenants",
        "description": "Client Credentials Flow required permissions: Administration or Administration.Write.\r\n\r\nHost only. Requires authentication.",
        "operationId": "Tenants_SetActive",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "setActiveParameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "tenantIds",
                "active"
              ],
              "type": "object",
              "properties": {
                "tenantIds": {
                  "type": "array",
                  "items": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "active": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestCaseDefinitions": {
      "get": {
        "tags": [
          "TestCaseDefinitions"
        ],
        "summary": "Returns a list of Test Case Definitions",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.",
        "operationId": "TestCaseDefinitions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Test Case Definitions filtered with queryOptions",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TestCaseDefinitionDto]]"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Case Definitions"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestCaseExecutions": {
      "get": {
        "tags": [
          "TestCaseExecutions"
        ],
        "summary": "Returns a list of Test Case Executions",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.",
        "operationId": "TestCaseExecutions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Test Case Executions filtered with queryOptions",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TestCaseExecutionDto]]"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Set Executions"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestCaseExecutions({Id})": {
      "get": {
        "tags": [
          "TestCaseExecutions"
        ],
        "summary": "Return a specific Test Case Execution identified by key",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.",
        "operationId": "TestCaseExecutions_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Return a specific Test Case Execution identified by key",
            "schema": {
              "$ref": "#/definitions/TestCaseExecutionDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Set Executions"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSetExecutions": {
      "get": {
        "tags": [
          "TestSetExecutions"
        ],
        "summary": "Returns a list of Test Set Executions",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.",
        "operationId": "TestSetExecutions_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Test Set Executions filtered with queryOptions",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TestSetExecutionDto]]"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Set Executions"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSetExecutions({Id})": {
      "get": {
        "tags": [
          "TestSetExecutions"
        ],
        "summary": "Return a specific Test Set Execution identified by key",
        "description": "Client Credentials Flow required permissions: TestSetExecutions or TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.",
        "operationId": "TestSetExecutions_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Return a specific Test Set Execution identified by key",
            "schema": {
              "$ref": "#/definitions/TestSetExecutionDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Set Executions"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSets": {
      "get": {
        "tags": [
          "TestSets"
        ],
        "summary": "Returns a list of Test Sets",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.",
        "operationId": "TestSets_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Test Sets filtered with queryOptions",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TestSetDto]]"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Sets"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "TestSets"
        ],
        "summary": "Creates a new Test Set",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Write.\r\n\r\nRequired permissions: TestSets.Create.",
        "operationId": "TestSets_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TestSetDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestSetDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created Test Set",
            "schema": {
              "$ref": "#/definitions/TestSetDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to create Test Sets"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSets({Id})": {
      "get": {
        "tags": [
          "TestSets"
        ],
        "summary": "Return a specific Test Set identified by key",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.",
        "operationId": "TestSets_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Return a specific Test Set identified by key",
            "schema": {
              "$ref": "#/definitions/TestSetDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view Test Sets"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "TestSets"
        ],
        "summary": "Update an existing Test Set",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Write.\r\n\r\nRequired permissions: TestSets.Edit.",
        "operationId": "TestSets_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "TestSetDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestSetDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestSetDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to update Test Sets"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "TestSets"
        ],
        "summary": "Delete a test set",
        "description": "Client Credentials Flow required permissions: TestSets or TestSets.Write.\r\n\r\nRequired permissions: TestSets.Delete.",
        "operationId": "TestSets_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "403": {
            "description": "If the caller doesn't have permissions to delete Test Sets"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSetSchedules": {
      "get": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Returns a list of test set execution schedules",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Read.\r\n\r\nRequired permissions: TestSetSchedules.View.",
        "operationId": "TestSetSchedules_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of test set execution schedules filtered with queryOptions",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[TestSetScheduleDto]]"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view test set execution schedules"
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Creates a new test set execution schedule",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Create.",
        "operationId": "TestSetSchedules_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "TestSetScheduleDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the newly created test set execution schedule",
            "schema": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to create test set execution schedules"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSetSchedules({Id})": {
      "get": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Return a specific test set execution schedule identified by key",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Read.\r\n\r\nRequired permissions: TestSetSchedules.View.",
        "operationId": "TestSetSchedules_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Return a specific test set execution schedule identified by key",
            "schema": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to view test set execution schedules"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Update an existing test set execution schedule",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Edit.",
        "operationId": "TestSetSchedules_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "TestSetScheduleDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          },
          "403": {
            "description": "If the caller doesn't have permissions to update test set execution schedules"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Delete an existing test set execution schedule",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Delete.",
        "operationId": "TestSetSchedules_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "403": {
            "description": "If the caller doesn't have permissions to delete test set execution schedules"
          }
        },
        "deprecated": false
      }
    },
    "/odata/TestSetSchedules/UiPath.Server.Configuration.OData.SetEnabled": {
      "post": {
        "tags": [
          "TestSetSchedules"
        ],
        "summary": "Enables / disables a list of test set execution schedules.",
        "description": "Client Credentials Flow required permissions: TestSetSchedules or TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Edit.",
        "operationId": "TestSetSchedules_SetEnabled",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setEnabledParameters",
            "in": "body",
            "description": "<para />enabled: if true the test set schedules will be enabled, if false they will be disabled.\r\n            <para />scheduleIds: the ids of the test set schedules to be enabled or disabled.",
            "required": true,
            "schema": {
              "required": [
                "enabled",
                "testSetScheduleIds"
              ],
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                },
                "testSetScheduleIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "name": "X-UIPATH-OrganizationUnitId",
            "in": "header",
            "description": "Folder/OrganizationUnit Id",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[Boolean]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/UserLoginAttempts({Id})": {
      "get": {
        "tags": [
          "UserLoginAttempts"
        ],
        "summary": "Gets the user's login attempts",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequires authentication.",
        "operationId": "UserLoginAttempts_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserLoginAttemptDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets users.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequired permissions: Users.View.",
        "operationId": "Users_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[UserDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Create.",
        "operationId": "Users_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users({Id})": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a user based on its id.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequires authentication.",
        "operationId": "Users_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Edits a user.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Edit or Robots.Create or Robots.Edit or Robots.Delete.",
        "operationId": "Users_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Delete.",
        "operationId": "Users_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Partially updates a user.\r\nCannot update roles or organization units via this endpoint.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequires authentication.",
        "operationId": "Users_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "userDto",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentPermissions()": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a user permission collection containing data about the current user and all the permissions it has.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.\r\n\r\nRequires authentication.",
        "operationId": "Users_GetCurrentPermissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserPermissionsCollection"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentUser()": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns details about the user currently logged into Orchestrator.",
        "description": "Client Credentials Flow required permissions: Users or Users.Read.",
        "operationId": "Users_GetCurrentUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the odata-count header.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDto"
            }
          },
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users({Id})/UiPath.Server.Configuration.OData.ToggleRole": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Associates/dissociates the given user with/from a role based on toggle parameter.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
        "operationId": "Users_ToggleRoleById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toggleRoleParameters",
            "in": "body",
            "description": "<para />Toggle - States whether to associate or to dissociate the role with/from the user.\r\n            <para />Role - The name of the role to be associated/dissociated.",
            "required": true,
            "schema": {
              "required": [
                "toggle"
              ],
              "type": "object",
              "properties": {
                "role": {
                  "type": "string"
                },
                "toggle": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users/UiPath.Server.Configuration.OData.ImportUsers": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Imports from AD all users from the given group and associates them with given roles.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Create.",
        "operationId": "Users_ImportUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "importUsersParameters",
            "in": "body",
            "description": "<para />Group - The name of the AD group whose users are to be imported.\r\n            <para />RolesList - The collection of roles the imported users will be associated with.\r\n            <para />OrganizationUnitIds - The collection of ids of the organization units the imported users will be associated with.",
            "required": true,
            "schema": {
              "required": [
                "organizationUnitIds"
              ],
              "type": "object",
              "properties": {
                "group": {
                  "type": "string"
                },
                "domain": {
                  "type": "string"
                },
                "rolesList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "organizationUnitIds": {
                  "type": "array",
                  "items": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "NotFound"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users({Id})/UiPath.Server.Configuration.OData.ToggleOrganizationUnit": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Associates/dissociates the given user with/from an organization unit based on toggle parameter.",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
        "operationId": "Users_ToggleOrganizationUnitById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "toggleOuParameters",
            "in": "body",
            "description": "<para />Toggle - States whether to associate or to dissociate the organization unit with/from the user.\r\n            <para />OrganizationUnitId - The id of the organization unit to be associated/dissociated.",
            "required": true,
            "schema": {
              "required": [
                "organizationUnitId",
                "toggle"
              ],
              "type": "object",
              "properties": {
                "organizationUnitId": {
                  "format": "int64",
                  "type": "integer"
                },
                "toggle": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users({Id})/UiPath.Server.Configuration.OData.SetActive": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Activate or deactivate a user",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
        "operationId": "Users_SetActiveById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "setUserActiveParameters",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "required": [
                "active"
              ],
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users/UiPath.Server.Configuration.OData.ChangeCulture": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Changes the culture for the current user",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequires authentication.",
        "operationId": "Users_ChangeCulture",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "changeCultureParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "culture": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Users({Id})/UiPath.Server.Configuration.OData.ChangeUserCulture": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Changes the culture for the specified user",
        "description": "Client Credentials Flow required permissions: Users or Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
        "operationId": "Users_ChangeUserCultureById",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "changeCultureParameters",
            "in": "body",
            "description": "",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "culture": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    },
    "/odata/Webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List webhooks",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
        "operationId": "Webhooks_Get",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "Includes a count of the matching results in the response.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[WebhookDto]]"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a new webhook subscription",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Create.",
        "operationId": "Webhooks_Post",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "WebhookDto",
            "in": "body",
            "description": "The entity to post",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Webhooks({Id})": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Gets a single webhook",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
        "operationId": "Webhooks_GetById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update an existing webhook subscription",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Edit.",
        "operationId": "Webhooks_PutById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "WebhookDto",
            "in": "body",
            "description": "The entity to put",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook subscription",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Delete.",
        "operationId": "Webhooks_DeleteById",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "If-Match header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Patches a webhook",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Edit.",
        "operationId": "Webhooks_PatchById",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "WebhookDto",
            "in": "body",
            "description": "The entity to patch",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Webhooks({Id})/UiPath.Server.Configuration.OData.Ping": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Sends a Ping request to webhook endpoint.\r\nUsed for testing connectivity and availability of target URL",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.View.",
        "operationId": "Webhooks_PingById",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "key: Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/PingEventDto"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Webhooks/UiPath.Server.Configuration.OData.GetEventTypes()": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Gets the list of event types a webhook can subscribe to",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
        "operationId": "Webhooks_GetEventTypes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ODataValue[IEnumerable[WebhookEventTypeDto]]"
            }
          }
        },
        "deprecated": false
      }
    },
    "/odata/Webhooks/UiPath.Server.Configuration.OData.TriggerCustom": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Triggers an event of type \"custom\"",
        "description": "Client Credentials Flow required permissions: Webhooks or Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.View.",
        "operationId": "Webhooks_TriggerCustom",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventData",
            "in": "body",
            "description": "Any custom event data payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnyObjectDto"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/CustomEventDto"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "ClearCacheModel": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "caches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AjaxResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object"
        },
        "targetUrl": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/ErrorInfo"
        },
        "unAuthorizedRequest": {
          "type": "boolean"
        },
        "__abp": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ErrorInfo": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidationErrorInfo"
          }
        }
      }
    },
    "ValidationErrorInfo": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ClearAllCacheModel": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "LoginModel": {
      "required": [
        "usernameOrEmailAddress",
        "password"
      ],
      "type": "object",
      "properties": {
        "tenancyName": {
          "type": "string"
        },
        "usernameOrEmailAddress": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ExtendedFolderDto": {
      "required": [
        "DisplayName"
      ],
      "type": "object",
      "properties": {
        "IsSelectable": {
          "description": "Determines whether this folder can be selected to view its entities",
          "type": "boolean"
        },
        "HasChildren": {
          "description": "True if this folder has children",
          "type": "boolean"
        },
        "Level": {
          "format": "int32",
          "description": "Level in the Folders tree.",
          "type": "integer"
        },
        "DisplayName": {
          "description": "Display name for the folder.",
          "type": "string"
        },
        "FullyQualifiedName": {
          "description": "Name of folder prepended by the names of its ancestors.",
          "type": "string"
        },
        "Description": {
          "description": "Description of folder",
          "type": "string"
        },
        "IsPersonal": {
          "description": "True if Personal",
          "type": "boolean",
          "readOnly": true
        },
        "ProvisionType": {
          "description": "Robot provisioning type",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExtendedFolderDtoProvisionType",
            "modelAsString": false
          }
        },
        "PermissionModel": {
          "description": "Folder permissions model",
          "enum": [
            "InheritFromTenant",
            "FineGrained"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExtendedFolderDtoPermissionModel",
            "modelAsString": false
          }
        },
        "ParentId": {
          "format": "int64",
          "description": "Id of parent folder in the folders hierarchy",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "PageResultDto[FolderDto]": {
      "type": "object",
      "properties": {
        "PageItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderDto"
          }
        },
        "Count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "FolderDto": {
      "required": [
        "DisplayName"
      ],
      "type": "object",
      "properties": {
        "DisplayName": {
          "description": "Display name for the folder.",
          "type": "string"
        },
        "FullyQualifiedName": {
          "description": "Name of folder prepended by the names of its ancestors.",
          "type": "string"
        },
        "Description": {
          "description": "Description of folder",
          "type": "string"
        },
        "IsPersonal": {
          "description": "True if Personal",
          "type": "boolean",
          "readOnly": true
        },
        "ProvisionType": {
          "description": "Robot provisioning type",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FolderDtoProvisionType",
            "modelAsString": false
          }
        },
        "PermissionModel": {
          "description": "Folder permissions model",
          "enum": [
            "InheritFromTenant",
            "FineGrained"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FolderDtoPermissionModel",
            "modelAsString": false
          }
        },
        "ParentId": {
          "format": "int64",
          "description": "Id of parent folder in the folders hierarchy",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "FolderNavigationContextDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "DisplayName": {
          "type": "string"
        },
        "IsSelectable": {
          "type": "boolean"
        },
        "ProvisionType": {
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FolderNavigationContextDtoProvisionType",
            "modelAsString": false
          }
        },
        "Ancestors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleFolderDto"
          }
        },
        "ChildrenPage": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedFolderDto"
          }
        },
        "ChildrenCount": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "SimpleFolderDto": {
      "type": "object",
      "properties": {
        "DisplayName": {
          "type": "string"
        },
        "FullyQualifiedName": {
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UserRoleAssignmentsDto": {
      "type": "object",
      "properties": {
        "TenantRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleUsersDto"
          }
        },
        "PageItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderAssignmentsDto"
          }
        },
        "Count": {
          "format": "int32",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "RoleUsersDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleUserEntityDto"
          }
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "FolderAssignmentsDto": {
      "type": "object",
      "properties": {
        "Folder": {
          "$ref": "#/definitions/SimpleFolderDto"
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleUsersDto"
          }
        }
      }
    },
    "SimpleUserEntityDto": {
      "type": "object",
      "properties": {
        "UserName": {
          "type": "string"
        },
        "IsInherited": {
          "type": "boolean"
        },
        "AssignedToFolderIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "MayHaveAttended": {
          "type": "boolean"
        },
        "MayHaveUnattended": {
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TaskDataDto": {
      "description": "Dto with attributes required for Wait activity",
      "type": "object",
      "properties": {
        "status": {
          "description": "Task status",
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskDataDtoStatus",
            "modelAsString": false
          }
        },
        "data": {
          "description": "Task form data json",
          "type": "object"
        },
        "action": {
          "description": "Task form action",
          "type": "string"
        },
        "externalTag": {
          "description": "Name of external system where this task is handled",
          "type": "string"
        },
        "organizationUnitId": {
          "format": "int64",
          "description": "Gets or sets the folder/organization-unit id.",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TaskCreateRequest": {
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets or sets type of this task, allowed type is 'ExternalTask'.",
          "enum": [
            "DocumentValidationTask",
            "ExternalTask",
            "FormTask"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskCreateRequestType",
            "modelAsString": false
          }
        },
        "externalTag": {
          "description": "Name of external system where this task is handled",
          "type": "string"
        },
        "title": {
          "description": "Gets or sets title of this task.",
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "priority": {
          "description": "Gets or sets priority of this task.",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskCreateRequestPriority",
            "modelAsString": false
          }
        },
        "data": {
          "description": "Task data",
          "type": "object"
        },
        "taskCatalogName": {
          "description": "Gets or sets the task catalog/category of the task",
          "type": "string"
        }
      }
    },
    "TaskCompletionRequest": {
      "required": [
        "taskId"
      ],
      "type": "object",
      "properties": {
        "taskId": {
          "format": "int64",
          "description": "TaskId to retrieve form",
          "type": "integer"
        },
        "data": {
          "description": "Task data json",
          "type": "object"
        },
        "action": {
          "description": "Action taken on this task",
          "type": "string"
        }
      }
    },
    "ConsumptionLicenseDto": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "LicenseResult": {
      "type": "object",
      "properties": {
        "isSuccess": {
          "type": "boolean"
        },
        "errorCode": {
          "enum": [
            "NoLicense",
            "LicenseExpired",
            "LicenseUnregistered",
            "NoAvailableLicenses",
            "NotEnoughAvailableSlots",
            "NotEnoughRuntimeLicenses",
            "LicenseIsAlreadyInUse",
            "InvalidRequest",
            "SlotsExceedLicenseLimit",
            "RuntimeDisabled",
            "ExternalNotSupported",
            "UsageExceedsLicenseLimit"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LicenseResultErrorCode",
            "modelAsString": false
          }
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "CancellationToken": {
      "type": "object",
      "properties": {
        "isCancellationRequested": {
          "type": "boolean",
          "readOnly": true
        },
        "canBeCanceled": {
          "type": "boolean",
          "readOnly": true
        },
        "waitHandle": {
          "$ref": "#/definitions/WaitHandle",
          "readOnly": true
        }
      }
    },
    "WaitHandle": {
      "type": "object",
      "properties": {
        "handle": {
          "type": "object"
        },
        "safeWaitHandle": {
          "$ref": "#/definitions/SafeWaitHandle"
        }
      }
    },
    "SafeWaitHandle": {
      "type": "object",
      "properties": {
        "isInvalid": {
          "type": "boolean",
          "readOnly": true
        },
        "isClosed": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "MaintenanceSetting": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "None",
            "Draining",
            "Suspended"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MaintenanceSettingState",
            "modelAsString": false
          }
        },
        "maintenanceLogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaintenanceStateLog"
          },
          "readOnly": true
        },
        "jobStopsAttempted": {
          "format": "int32",
          "type": "integer"
        },
        "jobKillsAttempted": {
          "format": "int32",
          "type": "integer"
        },
        "triggersSkipped": {
          "format": "int32",
          "type": "integer"
        },
        "systemTriggersSkipped": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MaintenanceStateLog": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "None",
            "Draining",
            "Suspended"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MaintenanceStateLogState",
            "modelAsString": false
          }
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "HeartbeatPayload": {
      "type": "object",
      "properties": {
        "heartbeats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeartbeatDto"
          }
        },
        "commandState": {
          "enum": [
            "All",
            "Pending"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HeartbeatPayloadCommandState",
            "modelAsString": false
          }
        },
        "serviceUserName": {
          "type": "string"
        }
      }
    },
    "HeartbeatDto": {
      "type": "object",
      "properties": {
        "robotKey": {
          "type": "string"
        },
        "robotState": {
          "enum": [
            "Available",
            "Busy",
            "Disconnected",
            "Unknown"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HeartbeatDtoRobotState",
            "modelAsString": false
          }
        },
        "jobState": {
          "enum": [
            "Pending",
            "Running",
            "Stopping",
            "Terminating",
            "Faulted",
            "Successful",
            "Stopped",
            "Suspended",
            "Resumed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HeartbeatDtoJobState",
            "modelAsString": false
          }
        },
        "jobKey": {
          "type": "string"
        },
        "processKey": {
          "type": "string"
        },
        "info": {
          "type": "string"
        },
        "outputArguments": {
          "type": "string"
        }
      }
    },
    "HeartbeatResponse": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotCommand"
          }
        }
      }
    },
    "RobotCommand": {
      "type": "object",
      "properties": {
        "robotKey": {
          "description": "Target robot",
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "robotName": {
          "type": "string"
        },
        "robotType": {
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotCommandRobotType",
            "modelAsString": false
          }
        },
        "machineId": {
          "format": "int64",
          "type": "integer"
        },
        "hasLicense": {
          "type": "boolean"
        },
        "isExternalLicensed": {
          "type": "boolean"
        },
        "executionSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "authSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "data": {
          "$ref": "#/definitions/Command"
        }
      }
    },
    "Command": {
      "description": "Base command model\r\nAll commands must inherit from this",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RobotIdentifier": {
      "type": "object",
      "properties": {
        "robotKey": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "PublishedProcess": {
      "type": "object",
      "properties": {
        "activationKey": {
          "type": "string"
        },
        "processName": {
          "type": "string"
        },
        "processKey": {
          "format": "uuid",
          "type": "string"
        },
        "packageId": {
          "type": "string"
        },
        "packageVersion": {
          "type": "string"
        },
        "folderId": {
          "format": "int64",
          "type": "integer"
        },
        "folderName": {
          "type": "string"
        },
        "processSettings": {
          "$ref": "#/definitions/ProcessSettingsDto"
        },
        "folderFullyQualifiedName": {
          "type": "string"
        },
        "feedUrl": {
          "type": "string"
        }
      }
    },
    "ProcessSettingsDto": {
      "type": "object",
      "properties": {
        "errorRecordingEnabled": {
          "type": "boolean"
        },
        "duration": {
          "format": "int32",
          "type": "integer"
        },
        "frequency": {
          "format": "int32",
          "type": "integer"
        },
        "quality": {
          "format": "int32",
          "type": "integer"
        },
        "autoStartProcess": {
          "type": "boolean"
        }
      }
    },
    "RobotServicePayload": {
      "type": "object",
      "properties": {
        "serviceUserName": {
          "type": "string"
        }
      }
    },
    "RobotServiceResponse": {
      "type": "object",
      "properties": {
        "robots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotDetailsDto"
          }
        }
      }
    },
    "RobotDetailsDto": {
      "type": "object",
      "properties": {
        "robotKey": {
          "description": "The Robot key.",
          "type": "string"
        },
        "user": {
          "description": "The Robot username.",
          "type": "string"
        },
        "machineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "type": "string"
        },
        "machineId": {
          "format": "int64",
          "description": "The Machine Id.",
          "type": "integer"
        },
        "robotName": {
          "description": "The Robot name.",
          "type": "string"
        },
        "robotType": {
          "description": "The Robot type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotDetailsDtoRobotType",
            "modelAsString": false
          }
        },
        "hasLicense": {
          "description": "Whether the Robot is licensed or not",
          "type": "boolean"
        },
        "tenantId": {
          "format": "int32",
          "description": "The Tenant's Id.",
          "type": "integer"
        },
        "organizationUnitId": {
          "format": "int64",
          "description": "The OrganizationUnit's Id.",
          "type": "integer"
        },
        "isExternalLicensed": {
          "description": "Flag to indicate if robot is external licensed",
          "type": "boolean"
        },
        "executionSettings": {
          "description": "A collection of key value pairs containing execution settings for this robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "authSettings": {
          "description": "A collection of key value pairs containing authentication settings for this robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ConnectionData": {
      "type": "object",
      "properties": {
        "licenseKey": {
          "type": "string"
        },
        "orchestratorUrl": {
          "type": "string"
        }
      }
    },
    "CountStats": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "hasPermissions": {
          "description": "Gives a more descriptive result when getting stats through the API (as opposed to -1 for the count)\r\nused only when serializing the count stats",
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "LicenseStatsModel": {
      "type": "object",
      "properties": {
        "robotType": {
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LicenseStatsModelRobotType",
            "modelAsString": false
          }
        },
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ConsumptionLicenseStatsModel": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "used": {
          "format": "int64",
          "type": "integer"
        },
        "total": {
          "format": "int64",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "HostAvailabilityDto": {
      "type": "object",
      "properties": {
        "canConnect": {
          "description": "Target host is reachable and a succesful TCP connection could be made on the specified port",
          "type": "boolean"
        },
        "hasBadSsl": {
          "description": "Any error occurred during SSL/TLS authentication.\r\nIncludes bad certificates (name mismatch, expired certificates), unsupported protocol versions or cyphersuites",
          "type": "boolean"
        },
        "connectionError": {
          "description": "An error code that further describes the type of connection error.\r\nDoes not include TLS/SSL errors",
          "type": "string"
        }
      }
    },
    "FormTaskCreateRequest": {
      "description": "Class with only attributes needed for Creating Task (TaskType = TaskType.FormTask)",
      "required": [
        "title"
      ],
      "type": "object",
      "properties": {
        "formLayout": {
          "description": "Text representing the form layout schema",
          "type": "object"
        },
        "title": {
          "description": "Gets or sets title of this task.",
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "priority": {
          "description": "Gets or sets priority of this task.",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FormTaskCreateRequestPriority",
            "modelAsString": false
          }
        },
        "data": {
          "description": "Task data",
          "type": "object"
        },
        "taskCatalogName": {
          "description": "Gets or sets the task catalog/category of the task",
          "type": "string"
        }
      }
    },
    "TaskFormDto": {
      "description": "Dto for task form",
      "type": "object",
      "properties": {
        "formLayout": {
          "description": "Task Form Layout json",
          "type": "object"
        },
        "actionLabel": {
          "description": "Task form action label",
          "type": "string"
        },
        "assignedToUserId": {
          "format": "int64",
          "description": "Gets or sets the actual assigned user, if any.",
          "type": "integer"
        },
        "assignedToUser": {
          "$ref": "#/definitions/UserLoginInfoDto",
          "description": "Gets or sets stores the actual assigned user, if any."
        },
        "status": {
          "description": "Task status",
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskFormDtoStatus",
            "modelAsString": false
          }
        },
        "data": {
          "description": "Task form data json",
          "type": "object"
        },
        "action": {
          "description": "Task form action",
          "type": "string"
        },
        "externalTag": {
          "description": "Name of external system where this task is handled",
          "type": "string"
        },
        "organizationUnitId": {
          "format": "int64",
          "description": "Gets or sets the folder/organization-unit id.",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UserLoginInfoDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "BuildTestSetRequestMessage": {
      "required": [
        "releaseId",
        "versionNumber"
      ],
      "type": "object",
      "properties": {
        "releaseId": {
          "format": "int64",
          "type": "integer"
        },
        "versionNumber": {
          "type": "string"
        }
      }
    },
    "AccessTokenRequest": {
      "type": "object",
      "properties": {
        "grant_type": {
          "enum": [
            "None",
            "Client_Credentials",
            "Orchestrator_Elastic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccessTokenRequestGrant_type",
            "modelAsString": false
          }
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "AccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "format": "int64",
          "type": "integer"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "PingEventDto": {
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "ping"
    },
    "CustomEventDto": {
      "description": "An event triggered by a robot Orchestrator activity",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "EventData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "CustomEventDto"
    },
    "AnyObjectDto": {
      "type": "object",
      "properties": {}
    },
    "JobCompletedEventDto": {
      "description": "This event is raised whenever a job has completed successfully",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/WebhookSimpleJobDto"
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.completed"
    },
    "WebhookSimpleJobDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Key": {
          "format": "uuid",
          "type": "string",
          "readOnly": true
        },
        "State": {
          "enum": [
            "Pending",
            "Running",
            "Stopping",
            "Terminating",
            "Faulted",
            "Successful",
            "Stopped",
            "Suspended",
            "Resumed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookSimpleJobDtoState",
            "modelAsString": false
          }
        },
        "StartTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "ResumeTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "EndTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "Info": {
          "type": "string",
          "readOnly": true
        },
        "OutputArguments": {
          "type": "object",
          "readOnly": true
        },
        "Robot": {
          "$ref": "#/definitions/WebhookSimpleRobotDto",
          "readOnly": true
        },
        "Release": {
          "$ref": "#/definitions/WebhookSimpleReleaseDto",
          "readOnly": true
        }
      }
    },
    "WebhookSimpleRobotDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "MachineName": {
          "type": "string"
        }
      }
    },
    "WebhookSimpleReleaseDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "description": "The Id of the process",
          "type": "integer"
        },
        "Key": {
          "description": "The unique key of the process",
          "type": "string"
        },
        "ProcessKey": {
          "description": "The name of the process",
          "type": "string"
        }
      }
    },
    "JobFaultedEventDto": {
      "description": "This event is raised whenever a job has failed to finish execution",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/WebhookSimpleJobDto"
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.faulted"
    },
    "JobsCreatedEventDto": {
      "description": "This event is raised whenever jobs were created and queued for execution",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "StartInfo": {
          "$ref": "#/definitions/WebhookStartProcessDto",
          "description": "List of arguments used to create the jobs"
        },
        "Jobs": {
          "description": "List of jobs that were created and are in pending state",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookJobDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.created"
    },
    "WebhookStartProcessDto": {
      "type": "object",
      "properties": {
        "ReleaseKey": {
          "format": "uuid",
          "description": "The unique key of the release associated with the process.",
          "type": "string",
          "readOnly": true
        },
        "Strategy": {
          "description": "States which robots from the environment are being run by the process.",
          "enum": [
            "All",
            "Specific",
            "RobotCount",
            "JobsCount",
            "ModernJobsCount"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookStartProcessDtoStrategy",
            "modelAsString": false
          }
        },
        "RobotIds": {
          "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "readOnly": true
        },
        "JobsCount": {
          "format": "int32",
          "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
          "type": "integer",
          "readOnly": true
        },
        "Source": {
          "description": "The Source of the job starting the current process.",
          "enum": [
            "Manual",
            "Schedule",
            "Queue"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookStartProcessDtoSource",
            "modelAsString": false
          }
        }
      }
    },
    "WebhookJobDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Key": {
          "format": "uuid",
          "description": "The unique job identifier.",
          "type": "string",
          "readOnly": true
        },
        "StartTime": {
          "format": "date-time",
          "description": "The date and time when the job execution started or null if the job hasn't started yet.",
          "type": "string",
          "readOnly": true
        },
        "EndTime": {
          "format": "date-time",
          "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
          "type": "string",
          "readOnly": true
        },
        "State": {
          "description": "The state in which the job is.",
          "enum": [
            "Pending",
            "Running",
            "Stopping",
            "Terminating",
            "Faulted",
            "Successful",
            "Stopped",
            "Suspended",
            "Resumed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookJobDtoState",
            "modelAsString": false
          }
        },
        "Source": {
          "description": "The Source name of the job.",
          "type": "string",
          "readOnly": true
        },
        "SourceType": {
          "description": "The Source type of the job.",
          "enum": [
            "Manual",
            "Schedule",
            "Agent",
            "Queue"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookJobDtoSourceType",
            "modelAsString": false
          }
        },
        "BatchExecutionKey": {
          "format": "uuid",
          "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
          "type": "string",
          "readOnly": true
        },
        "Info": {
          "description": "Additional information about the current job.",
          "type": "string",
          "readOnly": true
        },
        "StartingScheduleId": {
          "format": "int64",
          "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
          "type": "integer",
          "readOnly": true
        },
        "ReleaseName": {
          "description": "The name of the release associated with the current name.",
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
          "enum": [
            "Unattended",
            "Attended"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookJobDtoType",
            "modelAsString": false
          }
        },
        "HostMachineName": {
          "description": "The name of the machine where the Robot run the job.",
          "type": "string",
          "readOnly": true
        },
        "Robot": {
          "$ref": "#/definitions/WebhookRobotDto",
          "description": "The robot associated with the current job.",
          "readOnly": true
        },
        "Release": {
          "$ref": "#/definitions/WebhookReleaseDto",
          "description": "The release associated with the current job.",
          "readOnly": true
        },
        "InputArguments": {
          "description": "Input parameters in JSON format to be passed to job execution",
          "type": "object",
          "readOnly": true
        },
        "OutputArguments": {
          "description": "Output parameters in JSON format resulted from job execution",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "WebhookRobotDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "MachineId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "MachineName": {
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string",
          "readOnly": true
        },
        "Version": {
          "type": "string",
          "readOnly": true
        },
        "UserName": {
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookRobotDtoType",
            "modelAsString": false
          }
        },
        "HostingType": {
          "enum": [
            "Standard",
            "Floating"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookRobotDtoHostingType",
            "modelAsString": false
          }
        },
        "Environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookEnvironmentDto"
          },
          "readOnly": true
        },
        "ExecutionSettings": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        }
      }
    },
    "WebhookReleaseDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Key": {
          "type": "string",
          "readOnly": true
        },
        "ProcessKey": {
          "type": "string",
          "readOnly": true
        },
        "ProcessVersion": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string",
          "readOnly": true
        },
        "IsLatestVersion": {
          "type": "boolean",
          "readOnly": true
        },
        "Environment": {
          "$ref": "#/definitions/WebhookEnvironmentDto",
          "readOnly": true
        },
        "InputArguments": {
          "type": "object",
          "readOnly": true
        }
      }
    },
    "WebhookEnvironmentDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JobsStoppedEventDto": {
      "description": "This event is raised whenever jobs were stopped",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookSimpleJobDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.stopped"
    },
    "JobStartedEventDto": {
      "description": "This event is raised whenever a job has started execution on a robot",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/WebhookSimpleJobDto"
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.started"
    },
    "JobSuspendedEventDto": {
      "description": "This event is raised whenever a job has suspended execution on a robot",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/WebhookSimpleJobDto"
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "job.suspended"
    },
    "ProcessScheduleFailedEventDto": {
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "ProcessSchedule": {
          "$ref": "#/definitions/WebhookProcessScheduleDto",
          "readOnly": true
        },
        "Reason": {
          "type": "string",
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "schedule.failed"
    },
    "WebhookProcessScheduleDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Name": {
          "description": "The name of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "Enabled": {
          "description": "Specifies if the schedule is active or not.",
          "type": "boolean",
          "readOnly": true
        },
        "EnvironmentId": {
          "description": "The Id of the environment associated with the schedule.",
          "type": "string",
          "readOnly": true
        },
        "EnvironmentName": {
          "description": "The name of the environment associated with the schedule.",
          "type": "string",
          "readOnly": true
        },
        "StartProcessCron": {
          "description": "The start cron expression of the schedule.",
          "type": "string",
          "readOnly": true
        },
        "StartStrategy": {
          "description": "States which robots from the environment are being run by the schedule.",
          "enum": [
            "All",
            "Specific",
            "RobotCount",
            "JobsCount",
            "ModernJobsCount"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookProcessScheduleDtoStartStrategy",
            "modelAsString": false
          }
        },
        "StopStrategy": {
          "description": "The way a running process is stopped.",
          "enum": [
            "SoftStop",
            "Kill"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookProcessScheduleDtoStopStrategy",
            "modelAsString": false
          }
        },
        "ExternalJobKey": {
          "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.",
          "type": "string",
          "readOnly": true
        },
        "TimeZoneId": {
          "description": "The timezone under which the schedule will run.",
          "type": "string",
          "readOnly": true
        },
        "TimeZoneIana": {
          "description": "The timezone under which the schedule will run in Iana Standard.",
          "type": "string",
          "readOnly": true
        },
        "UseCalendar": {
          "description": "DEPRECATED. Specify whether the schedule uses a calendar",
          "type": "boolean",
          "readOnly": true,
          "x-deprecated": true
        },
        "CalendarId": {
          "format": "int64",
          "description": "Specify which calendar to use",
          "type": "integer",
          "readOnly": true
        },
        "Release": {
          "$ref": "#/definitions/WebhookSimpleReleaseDto",
          "description": "Process details associated with the schedule",
          "readOnly": true
        },
        "ExecutorRobots": {
          "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookSimpleRobotDto"
          },
          "readOnly": true
        },
        "InputArguments": {
          "description": "Input parameters that will be passed to each job created by this schedule.",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "QueueCreatedEventDto": {
      "description": "This event is raised whenever queue definitions were created",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Queues": {
          "description": "The queue that triggered the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queue.created"
    },
    "WebhookQueueDefinitionDto": {
      "description": "The definition of a work queue. A work queue contains work items that are processed by robots.",
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Name": {
          "description": "A custom name for the queue.",
          "type": "string",
          "readOnly": true
        },
        "Description": {
          "description": "Used to add additional information about a queue in order to better identify it.",
          "type": "string",
          "readOnly": true
        },
        "MaxNumberOfRetries": {
          "format": "int32",
          "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
          "type": "integer",
          "readOnly": true
        },
        "AcceptAutomaticallyRetry": {
          "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception.",
          "type": "boolean",
          "readOnly": true
        },
        "EnforceUniqueReference": {
          "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
          "type": "boolean",
          "readOnly": true
        },
        "SlaInMinutes": {
          "format": "int32",
          "description": "An integer value representing the Queue SLA in minutes.",
          "type": "integer",
          "readOnly": true
        },
        "RiskSlaInMinutes": {
          "format": "int32",
          "description": "An integer value representing the Queue RiskSla in minutes.",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "QueueDeletedEventDto": {
      "description": "This event is raised whenever queue definitions were deleted",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Queues": {
          "description": "The queue that triggered the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queue.deleted"
    },
    "QueueItemAddedEventDto": {
      "description": "This event is raised whenever new queue items were added",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Queue": {
          "$ref": "#/definitions/WebhookQueueDefinitionDto",
          "readOnly": true
        },
        "QueueItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookQueueItemDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queueItem.added"
    },
    "WebhookQueueItemDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "Key": {
          "format": "uuid",
          "description": "The unique identifier of a queue item.",
          "type": "string",
          "readOnly": true
        },
        "Reference": {
          "description": "An optional, user-specified value for queue item identification.",
          "type": "string",
          "readOnly": true
        },
        "QueueDefinitionId": {
          "format": "int64",
          "description": "The Id of the parent queue.",
          "type": "integer",
          "readOnly": true
        },
        "Status": {
          "description": "The processing state of the item.",
          "enum": [
            "New",
            "InProgress",
            "Failed",
            "Successful",
            "Abandoned",
            "Retried",
            "Deleted"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookQueueItemDtoStatus",
            "modelAsString": false
          }
        },
        "ReviewStatus": {
          "description": "The review state of the item - applicable only for failed items.",
          "enum": [
            "None",
            "InReview",
            "Verified",
            "Retried"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookQueueItemDtoReviewStatus",
            "modelAsString": false
          }
        },
        "ProcessingException": {
          "$ref": "#/definitions/WebhookProcessingExceptionDto",
          "description": "Stores the actual processing exception, if any.",
          "readOnly": true
        },
        "DueDate": {
          "format": "date-time",
          "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
          "type": "string",
          "readOnly": true
        },
        "Priority": {
          "description": "Sets the processing importance for a given item.",
          "enum": [
            "High",
            "Normal",
            "Low"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookQueueItemDtoPriority",
            "modelAsString": false
          }
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the item was created.",
          "type": "string",
          "readOnly": true
        },
        "DeferDate": {
          "format": "date-time",
          "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
          "type": "string",
          "readOnly": true
        },
        "StartProcessing": {
          "format": "date-time",
          "description": "The date and time at which the item processing started. This is null if the item was not processed.",
          "type": "string",
          "readOnly": true
        },
        "EndProcessing": {
          "format": "date-time",
          "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
          "type": "string",
          "readOnly": true
        },
        "SecondsInPreviousAttempts": {
          "format": "int32",
          "description": "The number of seconds that the last failed processing lasted.",
          "type": "integer",
          "readOnly": true
        },
        "AncestorId": {
          "format": "int64",
          "description": "The Id of an ancestor item connected to the current item.",
          "type": "integer",
          "readOnly": true
        },
        "RetryNumber": {
          "format": "int32",
          "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
          "type": "integer",
          "readOnly": true
        },
        "Progress": {
          "description": "String field which is used to keep track of the business flow progress.",
          "type": "string",
          "readOnly": true
        },
        "ReviewerUserId": {
          "format": "int64",
          "description": "The UserId of the Reviewer, if any.",
          "type": "integer",
          "readOnly": true
        },
        "Robot": {
          "$ref": "#/definitions/WebhookRobotDto",
          "description": "The robot that has processed the item, if any.",
          "readOnly": true
        },
        "ReviewerUser": {
          "$ref": "#/definitions/WebhookSimpleUserDto",
          "description": "Stores the actual reviewer user, if any.",
          "readOnly": true
        },
        "SpecificContent": {
          "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "Output": {
          "description": "A collection of key value pairs containing custom data resulted after successful processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        }
      }
    },
    "WebhookProcessingExceptionDto": {
      "type": "object",
      "properties": {
        "Reason": {
          "description": "The reason the processing failed.",
          "type": "string",
          "readOnly": true
        },
        "Details": {
          "description": "Stores additional details about the exception.",
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "description": "The processing exception type, if any.",
          "enum": [
            "ApplicationException",
            "BusinessException"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookProcessingExceptionDtoType",
            "modelAsString": false
          }
        },
        "AssociatedImageFilePath": {
          "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "WebhookSimpleUserDto": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "UserName": {
          "description": "The name used to login to Orchestrator.",
          "type": "string",
          "readOnly": true
        },
        "Domain": {
          "description": "The domain from which the user is imported",
          "type": "string",
          "readOnly": true
        },
        "FullName": {
          "description": "The full name of the person constructed with the format Name Surname.",
          "type": "string",
          "readOnly": true
        },
        "EmailAddress": {
          "description": "The e-mail address associated with the user.",
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "description": "The user type.",
          "enum": [
            "User",
            "Robot",
            "DirectoryUser",
            "DirectoryGroup"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookSimpleUserDtoType",
            "modelAsString": false
          }
        },
        "IsActive": {
          "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
          "type": "boolean",
          "readOnly": true
        },
        "LastLoginTime": {
          "format": "date-time",
          "description": "The date and time when the user last logged in, or null if the user never logged in.",
          "type": "string",
          "readOnly": true
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the user was created.",
          "type": "string",
          "readOnly": true
        },
        "AuthenticationSource": {
          "description": "The source which authenticated this user.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "QueueItemCompletedEventDto": {
      "description": "This event is raised whenever a queue item transaction has completed successfully",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "QueueItem": {
          "$ref": "#/definitions/WebhookQueueItemDto",
          "readOnly": true
        },
        "Queue": {
          "$ref": "#/definitions/WebhookQueueDefinitionDto",
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queueItem.transactionCompleted"
    },
    "QueueItemFailedEventDto": {
      "description": "This event is raised whenever a queue item transaction has failed",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "QueueItem": {
          "$ref": "#/definitions/WebhookQueueItemDto",
          "readOnly": true
        },
        "Queue": {
          "$ref": "#/definitions/WebhookQueueDefinitionDto",
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queueItem.transactionFailed"
    },
    "QueueItemsAbandonedEventDto": {
      "description": "This event is raised whenever queue item transactions have expired and were abandoned",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Queue": {
          "$ref": "#/definitions/WebhookQueueDefinitionDto",
          "readOnly": true
        },
        "QueueItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookQueueItemDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queueItem.transactionAbandoned"
    },
    "QueueItemStartedEventDto": {
      "description": "This event is raised whenever a new queue item transaction is started",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "QueueItem": {
          "$ref": "#/definitions/WebhookQueueItemDto",
          "readOnly": true
        },
        "Queue": {
          "$ref": "#/definitions/WebhookQueueDefinitionDto",
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queueItem.transactionStarted"
    },
    "QueueUpdatedEventDto": {
      "description": "This event is raised whenever queue definitions were updated",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Queues": {
          "description": "The queue that triggered the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "queue.updated"
    },
    "ReleaseCreatedEventDto": {
      "description": "This event is raised whenever a new release has been created",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookReleaseDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "process.created"
    },
    "ReleaseDeletedEventDto": {
      "description": "This event is raised whenever a release has been deleted",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookReleaseDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "process.deleted"
    },
    "ReleaseUpdatedEventDto": {
      "description": "This event is raised whenever a release has been updated",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookReleaseDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "process.updated"
    },
    "RobotCreatedEventDto": {
      "description": "This event is raised whenever robots were created",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Robots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookRobotDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "robot.created"
    },
    "RobotDeletedEventDto": {
      "description": "This event is raised whenever robots were deleted",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Robots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookRobotDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "robot.deleted"
    },
    "RobotUpdatedEventDto": {
      "description": "This event is raised whenever robots were updated",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Robots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookRobotDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "robot.updated"
    },
    "SessionEventDto": {
      "description": "This event is raised whenever robot's session has changed",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookSessionDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "robot.status"
    },
    "WebhookSessionDto": {
      "type": "object",
      "properties": {
        "SessionId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "RobotId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "HostMachineName": {
          "type": "string",
          "readOnly": true
        },
        "State": {
          "enum": [
            "Available",
            "Busy",
            "Disconnected",
            "Unknown"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookSessionDtoState",
            "modelAsString": false
          }
        },
        "ReportingTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "IsUnresponsive": {
          "type": "boolean",
          "readOnly": true
        },
        "LicenseErrorCode": {
          "enum": [
            "NoLicense",
            "LicenseExpired",
            "LicenseUnregistered",
            "NoAvailableLicenses",
            "NotEnoughAvailableSlots",
            "NotEnoughRuntimeLicenses",
            "LicenseIsAlreadyInUse",
            "InvalidRequest",
            "SlotsExceedLicenseLimit",
            "RuntimeDisabled",
            "ExternalNotSupported",
            "UsageExceedsLicenseLimit"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookSessionDtoLicenseErrorCode",
            "modelAsString": false
          }
        }
      }
    },
    "TaskAssignmentChangedEventDto": {
      "description": "Dto for {UiPath.Orchestrator.Application.Webhooks.WebhookEvents.TaskAssignmentChanged}. Gets raised when task is assigned, reassigned or unassigned",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTaskAssignmentChangedDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "task.assignmentChanged"
    },
    "WebhookTaskAssignmentChangedDto": {
      "description": "This class defines DTO for Tasks Collection for webhook event Task.AssignmentChanged",
      "type": "object",
      "properties": {
        "Title": {
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "enum": [
            "DocumentValidationTask",
            "ExternalTask",
            "FormTask"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskAssignmentChangedDtoType",
            "modelAsString": false
          }
        },
        "Priority": {
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskAssignmentChangedDtoPriority",
            "modelAsString": false
          }
        },
        "Status": {
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskAssignmentChangedDtoStatus",
            "modelAsString": false
          }
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "TaskCatalogName": {
          "type": "string",
          "readOnly": true
        },
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "AssignedToUserId": {
          "format": "int64",
          "description": "Id of the user to whom the task has been assigned",
          "type": "integer",
          "readOnly": true
        },
        "AssignedToUserIdOldValue": {
          "format": "int64",
          "description": "Id of the old user to whom the task was assigned",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "TaskCompletedEventDto": {
      "description": "Dto for {UiPath.Orchestrator.Application.Webhooks.WebhookEvents.TaskCompleted}. Gets raised when task is completed",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTaskCompletedDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "task.completed"
    },
    "WebhookTaskCompletedDto": {
      "description": "This class defines DTO for Tasks Collection for webhook event Task.Completed",
      "type": "object",
      "properties": {
        "Title": {
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "enum": [
            "DocumentValidationTask",
            "ExternalTask",
            "FormTask"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCompletedDtoType",
            "modelAsString": false
          }
        },
        "Priority": {
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCompletedDtoPriority",
            "modelAsString": false
          }
        },
        "Status": {
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCompletedDtoStatus",
            "modelAsString": false
          }
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "TaskCatalogName": {
          "type": "string",
          "readOnly": true
        },
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "AssignedToUserId": {
          "format": "int64",
          "description": "Id of user to whom the task has been assigned",
          "type": "integer",
          "readOnly": true
        },
        "Action": {
          "description": "Action taken to complete the task",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "TaskCreatedEventDto": {
      "description": "Dto for {UiPath.Orchestrator.Application.Webhooks.WebhookEvents.TaskCreated}. Gets raised when task is completed",
      "required": [
        "Type",
        "EventId",
        "Timestamp"
      ],
      "type": "object",
      "properties": {
        "Type": {
          "type": "string"
        },
        "EventId": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "Tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookTaskCreatedDto"
          },
          "readOnly": true
        },
        "TenantId": {
          "format": "int32",
          "type": "integer"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "x-webhook-event": "task.created"
    },
    "WebhookTaskCreatedDto": {
      "description": "This class defines DTO for Tasks Collection for webhook event Task.Created",
      "type": "object",
      "properties": {
        "Title": {
          "type": "string",
          "readOnly": true
        },
        "Type": {
          "enum": [
            "DocumentValidationTask",
            "ExternalTask",
            "FormTask"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCreatedDtoType",
            "modelAsString": false
          }
        },
        "Priority": {
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCreatedDtoPriority",
            "modelAsString": false
          }
        },
        "Status": {
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "WebhookTaskCreatedDtoStatus",
            "modelAsString": false
          }
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "TaskCatalogName": {
          "type": "string",
          "readOnly": true
        },
        "Id": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "OrganizationUnitId": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ODataQueryOptions[AlertDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataQueryContext": {
      "type": "object",
      "properties": {
        "DefaultQuerySettings": {
          "$ref": "#/definitions/DefaultQuerySettings",
          "readOnly": true
        },
        "Model": {
          "$ref": "#/definitions/IEdmModel",
          "readOnly": true
        },
        "ElementType": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        },
        "NavigationSource": {
          "$ref": "#/definitions/IEdmNavigationSource",
          "readOnly": true
        },
        "ElementClrType": {
          "type": "string",
          "readOnly": true
        },
        "Path": {
          "$ref": "#/definitions/ODataPath",
          "readOnly": true
        },
        "RequestContainer": {
          "$ref": "#/definitions/IServiceProvider",
          "readOnly": true
        }
      }
    },
    "ODataRawQueryOptions": {
      "type": "object",
      "properties": {
        "Filter": {
          "type": "string",
          "readOnly": true
        },
        "Apply": {
          "type": "string",
          "readOnly": true
        },
        "OrderBy": {
          "type": "string",
          "readOnly": true
        },
        "Top": {
          "type": "string",
          "readOnly": true
        },
        "Skip": {
          "type": "string",
          "readOnly": true
        },
        "Select": {
          "type": "string",
          "readOnly": true
        },
        "Expand": {
          "type": "string",
          "readOnly": true
        },
        "Count": {
          "type": "string",
          "readOnly": true
        },
        "Format": {
          "type": "string",
          "readOnly": true
        },
        "SkipToken": {
          "type": "string",
          "readOnly": true
        },
        "DeltaToken": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SelectExpandQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "RawSelect": {
          "type": "string",
          "readOnly": true
        },
        "RawExpand": {
          "type": "string",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/SelectExpandQueryValidator"
        },
        "SelectExpandClause": {
          "$ref": "#/definitions/SelectExpandClause",
          "readOnly": true
        },
        "LevelsMaxLiteralExpansionDepth": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ApplyQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "ResultClrType": {
          "type": "string",
          "readOnly": true
        },
        "ApplyClause": {
          "$ref": "#/definitions/ApplyClause",
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FilterQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/FilterQueryValidator"
        },
        "FilterClause": {
          "$ref": "#/definitions/FilterClause",
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "OrderByQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "OrderByNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderByNode"
          },
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/OrderByQueryValidator"
        },
        "OrderByClause": {
          "$ref": "#/definitions/OrderByClause",
          "readOnly": true
        }
      }
    },
    "SkipQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        },
        "Value": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/SkipQueryValidator"
        }
      }
    },
    "TopQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        },
        "Value": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/TopQueryValidator"
        }
      }
    },
    "CountQueryOption": {
      "type": "object",
      "properties": {
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "RawValue": {
          "type": "string",
          "readOnly": true
        },
        "Value": {
          "type": "boolean",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/CountQueryValidator"
        }
      }
    },
    "ODataQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "DefaultQuerySettings": {
      "type": "object",
      "properties": {
        "EnableExpand": {
          "type": "boolean"
        },
        "EnableSelect": {
          "type": "boolean"
        },
        "EnableCount": {
          "type": "boolean"
        },
        "EnableOrderBy": {
          "type": "boolean"
        },
        "EnableFilter": {
          "type": "boolean"
        },
        "MaxTop": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "IEdmModel": {
      "type": "object",
      "properties": {
        "SchemaElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmSchemaElement"
          },
          "readOnly": true
        },
        "VocabularyAnnotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmVocabularyAnnotation"
          },
          "readOnly": true
        },
        "ReferencedModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmModel"
          },
          "readOnly": true
        },
        "DeclaredNamespaces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "DirectValueAnnotationsManager": {
          "$ref": "#/definitions/IEdmDirectValueAnnotationsManager",
          "readOnly": true
        },
        "EntityContainer": {
          "$ref": "#/definitions/IEdmEntityContainer",
          "readOnly": true
        }
      }
    },
    "IEdmType": {
      "type": "object",
      "properties": {
        "TypeKind": {
          "enum": [
            "None",
            "Primitive",
            "Entity",
            "Complex",
            "Collection",
            "EntityReference",
            "Enum",
            "TypeDefinition",
            "Untyped",
            "Path"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmTypeTypeKind",
            "modelAsString": false
          }
        }
      }
    },
    "IEdmNavigationSource": {
      "type": "object",
      "properties": {
        "NavigationPropertyBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmNavigationPropertyBinding"
          },
          "readOnly": true
        },
        "Path": {
          "$ref": "#/definitions/IEdmPathExpression",
          "readOnly": true
        },
        "Type": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ODataPath": {
      "type": "object",
      "properties": {
        "EdmType": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        },
        "NavigationSource": {
          "$ref": "#/definitions/IEdmNavigationSource",
          "readOnly": true
        },
        "Segments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ODataPathSegment"
          },
          "readOnly": true
        },
        "PathTemplate": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IServiceProvider": {
      "type": "object",
      "properties": {}
    },
    "SelectExpandQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "SelectExpandClause": {
      "type": "object",
      "properties": {
        "SelectedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectItem"
          },
          "readOnly": true
        },
        "AllSelected": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ApplyClause": {
      "type": "object",
      "properties": {
        "Transformations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformationNode"
          },
          "readOnly": true
        }
      }
    },
    "FilterQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "FilterClause": {
      "type": "object",
      "properties": {
        "Expression": {
          "$ref": "#/definitions/SingleValueNode",
          "readOnly": true
        },
        "RangeVariable": {
          "$ref": "#/definitions/RangeVariable",
          "readOnly": true
        },
        "ItemType": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        }
      }
    },
    "OrderByNode": {
      "type": "object",
      "properties": {
        "Direction": {
          "enum": [
            "Ascending",
            "Descending"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "OrderByNodeDirection",
            "modelAsString": false
          }
        }
      }
    },
    "OrderByQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "OrderByClause": {
      "type": "object",
      "properties": {
        "ThenBy": {
          "$ref": "#/definitions/OrderByClause",
          "readOnly": true
        },
        "Expression": {
          "$ref": "#/definitions/SingleValueNode",
          "readOnly": true
        },
        "Direction": {
          "enum": [
            "Ascending",
            "Descending"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "OrderByClauseDirection",
            "modelAsString": false
          }
        },
        "RangeVariable": {
          "$ref": "#/definitions/RangeVariable",
          "readOnly": true
        },
        "ItemType": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        }
      }
    },
    "SkipQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "TopQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "CountQueryValidator": {
      "type": "object",
      "properties": {}
    },
    "IEdmSchemaElement": {
      "type": "object",
      "properties": {
        "SchemaElementKind": {
          "enum": [
            "None",
            "TypeDefinition",
            "Term",
            "Action",
            "EntityContainer",
            "Function"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmSchemaElementSchemaElementKind",
            "modelAsString": false
          }
        },
        "Namespace": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmVocabularyAnnotation": {
      "type": "object",
      "properties": {
        "Qualifier": {
          "type": "string",
          "readOnly": true
        },
        "Term": {
          "$ref": "#/definitions/IEdmTerm",
          "readOnly": true
        },
        "Target": {
          "$ref": "#/definitions/IEdmVocabularyAnnotatable",
          "readOnly": true
        },
        "Value": {
          "$ref": "#/definitions/IEdmExpression",
          "readOnly": true
        }
      }
    },
    "IEdmDirectValueAnnotationsManager": {
      "type": "object",
      "properties": {}
    },
    "IEdmEntityContainer": {
      "type": "object",
      "properties": {
        "Elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmEntityContainerElement"
          },
          "readOnly": true
        },
        "SchemaElementKind": {
          "enum": [
            "None",
            "TypeDefinition",
            "Term",
            "Action",
            "EntityContainer",
            "Function"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmEntityContainerSchemaElementKind",
            "modelAsString": false
          }
        },
        "Namespace": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmNavigationPropertyBinding": {
      "type": "object",
      "properties": {
        "NavigationProperty": {
          "$ref": "#/definitions/IEdmNavigationProperty",
          "readOnly": true
        },
        "Target": {
          "$ref": "#/definitions/IEdmNavigationSource",
          "readOnly": true
        },
        "Path": {
          "$ref": "#/definitions/IEdmPathExpression",
          "readOnly": true
        }
      }
    },
    "IEdmPathExpression": {
      "type": "object",
      "properties": {
        "PathSegments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "Path": {
          "type": "string",
          "readOnly": true
        },
        "ExpressionKind": {
          "enum": [
            "None",
            "BinaryConstant",
            "BooleanConstant",
            "DateTimeOffsetConstant",
            "DecimalConstant",
            "FloatingConstant",
            "GuidConstant",
            "IntegerConstant",
            "StringConstant",
            "DurationConstant",
            "Null",
            "Record",
            "Collection",
            "Path",
            "If",
            "Cast",
            "IsType",
            "FunctionApplication",
            "LabeledExpressionReference",
            "Labeled",
            "PropertyPath",
            "NavigationPropertyPath",
            "DateConstant",
            "TimeOfDayConstant",
            "EnumMember",
            "AnnotationPath"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmPathExpressionExpressionKind",
            "modelAsString": false
          }
        }
      }
    },
    "ODataPathSegment": {
      "type": "object",
      "properties": {
        "EdmType": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        },
        "Identifier": {
          "type": "string"
        }
      }
    },
    "SelectItem": {
      "type": "object",
      "properties": {}
    },
    "TransformationNode": {
      "type": "object",
      "properties": {
        "Kind": {
          "enum": [
            "Aggregate",
            "GroupBy",
            "Filter",
            "Compute"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "TransformationNodeKind",
            "modelAsString": false
          }
        }
      }
    },
    "SingleValueNode": {
      "type": "object",
      "properties": {
        "TypeReference": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "Kind": {
          "enum": [
            "None",
            "Constant",
            "Convert",
            "NonResourceRangeVariableReference",
            "BinaryOperator",
            "UnaryOperator",
            "SingleValuePropertyAccess",
            "CollectionPropertyAccess",
            "SingleValueFunctionCall",
            "Any",
            "CollectionNavigationNode",
            "SingleNavigationNode",
            "SingleValueOpenPropertyAccess",
            "SingleResourceCast",
            "All",
            "CollectionResourceCast",
            "ResourceRangeVariableReference",
            "SingleResourceFunctionCall",
            "CollectionFunctionCall",
            "CollectionResourceFunctionCall",
            "NamedFunctionParameter",
            "ParameterAlias",
            "EntitySet",
            "KeyLookup",
            "SearchTerm",
            "CollectionOpenPropertyAccess",
            "CollectionComplexNode",
            "SingleComplexNode",
            "Count",
            "SingleValueCast"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "SingleValueNodeKind",
            "modelAsString": false
          }
        }
      }
    },
    "RangeVariable": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "TypeReference": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "Kind": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "IEdmTypeReference": {
      "type": "object",
      "properties": {
        "IsNullable": {
          "type": "boolean",
          "readOnly": true
        },
        "Definition": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        }
      }
    },
    "IEdmTerm": {
      "type": "object",
      "properties": {
        "Type": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "AppliesTo": {
          "type": "string",
          "readOnly": true
        },
        "DefaultValue": {
          "type": "string",
          "readOnly": true
        },
        "SchemaElementKind": {
          "enum": [
            "None",
            "TypeDefinition",
            "Term",
            "Action",
            "EntityContainer",
            "Function"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmTermSchemaElementKind",
            "modelAsString": false
          }
        },
        "Namespace": {
          "type": "string",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmVocabularyAnnotatable": {
      "type": "object",
      "properties": {}
    },
    "IEdmExpression": {
      "type": "object",
      "properties": {
        "ExpressionKind": {
          "enum": [
            "None",
            "BinaryConstant",
            "BooleanConstant",
            "DateTimeOffsetConstant",
            "DecimalConstant",
            "FloatingConstant",
            "GuidConstant",
            "IntegerConstant",
            "StringConstant",
            "DurationConstant",
            "Null",
            "Record",
            "Collection",
            "Path",
            "If",
            "Cast",
            "IsType",
            "FunctionApplication",
            "LabeledExpressionReference",
            "Labeled",
            "PropertyPath",
            "NavigationPropertyPath",
            "DateConstant",
            "TimeOfDayConstant",
            "EnumMember",
            "AnnotationPath"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmExpressionExpressionKind",
            "modelAsString": false
          }
        }
      }
    },
    "IEdmEntityContainerElement": {
      "type": "object",
      "properties": {
        "ContainerElementKind": {
          "enum": [
            "None",
            "EntitySet",
            "ActionImport",
            "FunctionImport",
            "Singleton"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmEntityContainerElementContainerElementKind",
            "modelAsString": false
          }
        },
        "Container": {
          "$ref": "#/definitions/IEdmEntityContainer",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmNavigationProperty": {
      "type": "object",
      "properties": {
        "Partner": {
          "$ref": "#/definitions/IEdmNavigationProperty",
          "readOnly": true
        },
        "OnDelete": {
          "enum": [
            "None",
            "Cascade"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmNavigationPropertyOnDelete",
            "modelAsString": false
          }
        },
        "ContainsTarget": {
          "type": "boolean",
          "readOnly": true
        },
        "ReferentialConstraint": {
          "$ref": "#/definitions/IEdmReferentialConstraint",
          "readOnly": true
        },
        "PropertyKind": {
          "enum": [
            "None",
            "Structural",
            "Navigation"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmNavigationPropertyPropertyKind",
            "modelAsString": false
          }
        },
        "Type": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "DeclaringType": {
          "$ref": "#/definitions/IEdmStructuredType",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmReferentialConstraint": {
      "type": "object",
      "properties": {
        "PropertyPairs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EdmReferentialConstraintPropertyPair"
          },
          "readOnly": true
        }
      }
    },
    "IEdmStructuredType": {
      "type": "object",
      "properties": {
        "IsAbstract": {
          "type": "boolean",
          "readOnly": true
        },
        "IsOpen": {
          "type": "boolean",
          "readOnly": true
        },
        "BaseType": {
          "$ref": "#/definitions/IEdmStructuredType",
          "readOnly": true
        },
        "DeclaredProperties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmProperty"
          },
          "readOnly": true
        },
        "TypeKind": {
          "enum": [
            "None",
            "Primitive",
            "Entity",
            "Complex",
            "Collection",
            "EntityReference",
            "Enum",
            "TypeDefinition",
            "Untyped",
            "Path"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmStructuredTypeTypeKind",
            "modelAsString": false
          }
        }
      }
    },
    "EdmReferentialConstraintPropertyPair": {
      "type": "object",
      "properties": {
        "DependentProperty": {
          "$ref": "#/definitions/IEdmStructuralProperty",
          "readOnly": true
        },
        "PrincipalProperty": {
          "$ref": "#/definitions/IEdmStructuralProperty",
          "readOnly": true
        }
      }
    },
    "IEdmProperty": {
      "type": "object",
      "properties": {
        "PropertyKind": {
          "enum": [
            "None",
            "Structural",
            "Navigation"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmPropertyPropertyKind",
            "modelAsString": false
          }
        },
        "Type": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "DeclaringType": {
          "$ref": "#/definitions/IEdmStructuredType",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "IEdmStructuralProperty": {
      "type": "object",
      "properties": {
        "DefaultValueString": {
          "type": "string",
          "readOnly": true
        },
        "PropertyKind": {
          "enum": [
            "None",
            "Structural",
            "Navigation"
          ],
          "type": "string",
          "readOnly": true,
          "x-ms-enum": {
            "name": "IEdmStructuralPropertyPropertyKind",
            "modelAsString": false
          }
        },
        "Type": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "DeclaringType": {
          "$ref": "#/definitions/IEdmStructuredType",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ODataValue[IEnumerable[AlertDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlertDto"
          }
        }
      }
    },
    "AlertDto": {
      "description": "Stores notification data used to inform the users about specific application events.",
      "required": [
        "Severity"
      ],
      "type": "object",
      "properties": {
        "NotificationName": {
          "description": "The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding.",
          "type": "string"
        },
        "Data": {
          "description": "Stores data about the context in which the event occurred, in JSON format.",
          "type": "string"
        },
        "Component": {
          "description": "The component that raised the alert.",
          "enum": [
            "Robots",
            "Transactions",
            "Schedules",
            "Jobs",
            "Process",
            "Tasks",
            "Queues"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AlertDtoComponent",
            "modelAsString": false
          }
        },
        "Severity": {
          "description": "The severity level of the alert.",
          "enum": [
            "Info",
            "Success",
            "Warn",
            "Error",
            "Fatal"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AlertDtoSeverity",
            "modelAsString": false
          }
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the alert was generated.",
          "type": "string"
        },
        "State": {
          "description": "Defines if a specified notification has been read or not.\r\n<para />Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.",
          "enum": [
            "Unread",
            "Read"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AlertDtoState",
            "modelAsString": false
          }
        },
        "UserNotificationId": {
          "format": "uuid",
          "description": "The database unique identifier for the alert notification sent to the current user.",
          "type": "string"
        },
        "Id": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ODataValue[Int64]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ProcessAlertDto": {
      "required": [
        "Message",
        "Severity",
        "RobotName",
        "ProcessName"
      ],
      "type": "object",
      "properties": {
        "Message": {
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "Severity": {
          "enum": [
            "Info",
            "Success",
            "Warn",
            "Error",
            "Fatal"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessAlertDtoSeverity",
            "modelAsString": false
          }
        },
        "RobotName": {
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "ProcessName": {
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "Id": {
          "format": "uuid",
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[AssetDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[AssetDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDto"
          }
        }
      }
    },
    "AssetDto": {
      "description": "Stores specific data so that robots can easily have access to it.",
      "required": [
        "Name",
        "ValueScope"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "A custom name for the asset.",
          "type": "string"
        },
        "CanBeDeleted": {
          "description": "States if an assets can be deleted. The default value of this property is true.",
          "type": "boolean"
        },
        "ValueScope": {
          "description": "Defines the scope of the asset.",
          "enum": [
            "Global",
            "PerRobot"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssetDtoValueScope",
            "modelAsString": false
          }
        },
        "ValueType": {
          "description": "Defines the type of value stored by the asset.",
          "enum": [
            "DBConnectionString",
            "HttpConnectionString",
            "Text",
            "Bool",
            "Integer",
            "Credential",
            "WindowsCredential",
            "KeyValueList"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssetDtoValueType",
            "modelAsString": false
          }
        },
        "Value": {
          "description": "The textual representation of the asset value, irrespective of value type.",
          "type": "string"
        },
        "StringValue": {
          "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
          "type": "string"
        },
        "BoolValue": {
          "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
          "type": "boolean"
        },
        "IntValue": {
          "format": "int32",
          "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
          "type": "integer"
        },
        "CredentialUsername": {
          "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "CredentialPassword": {
          "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the credentials.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the credentials.",
          "type": "integer"
        },
        "KeyValueList": {
          "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomKeyValuePair"
          }
        },
        "HasDefaultValue": {
          "description": "The asset has a default value set. This value will be null when set from legacy components that don't support\r\nthe PerRobot assets with default value feature.",
          "type": "boolean"
        },
        "Description": {
          "description": "The description of the asset.",
          "type": "string"
        },
        "RobotValues": {
          "description": "The collection of asset values per robot. Empty if the asset type is Global.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetRobotValueDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "CustomKeyValuePair": {
      "description": "Stores a custom pair of key and value for assets with type KeyValueList.",
      "type": "object",
      "properties": {
        "Key": {
          "description": "A piece of text representing the key.",
          "type": "string"
        },
        "Value": {
          "description": "A piece of text representing the value.",
          "type": "string"
        }
      }
    },
    "AssetRobotValueDto": {
      "description": "Stores the value of an asset associated with a robot as well as the robot association data.",
      "type": "object",
      "properties": {
        "RobotId": {
          "format": "int64",
          "description": "The Id of the robot with which the asset is associated.",
          "type": "integer"
        },
        "RobotName": {
          "description": "The name of the robot with which the asset is associated.",
          "type": "string"
        },
        "KeyTrail": {
          "description": "Masked value of the robot key.",
          "type": "string"
        },
        "ValueType": {
          "description": "Defines the type of value stored by the asset.",
          "enum": [
            "DBConnectionString",
            "HttpConnectionString",
            "Text",
            "Bool",
            "Integer",
            "Credential",
            "WindowsCredential",
            "KeyValueList"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AssetRobotValueDtoValueType",
            "modelAsString": false
          }
        },
        "StringValue": {
          "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
          "type": "string"
        },
        "BoolValue": {
          "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
          "type": "boolean"
        },
        "IntValue": {
          "format": "int32",
          "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
          "type": "integer"
        },
        "Value": {
          "description": "The textual representation of the asset value, irrespective of value type.",
          "type": "string"
        },
        "CredentialUsername": {
          "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "CredentialPassword": {
          "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the credentials.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the credentials.",
          "type": "integer"
        },
        "KeyValueList": {
          "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomKeyValuePair"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "RobotAssetDto": {
      "description": "A robot asset stores the information of a per robot asset for a specific robot, without specifying the robot.",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The asset name.",
          "type": "string"
        },
        "ValueType": {
          "description": "Defines the type of value stored by the asset.",
          "enum": [
            "DBConnectionString",
            "HttpConnectionString",
            "Text",
            "Bool",
            "Integer",
            "Credential",
            "WindowsCredential",
            "KeyValueList"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotAssetDtoValueType",
            "modelAsString": false
          }
        },
        "StringValue": {
          "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
          "type": "string"
        },
        "BoolValue": {
          "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
          "type": "boolean"
        },
        "IntValue": {
          "format": "int32",
          "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
          "type": "integer"
        },
        "CredentialUsername": {
          "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "CredentialPassword": {
          "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the credentials.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the credentials.",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[AuditLogDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[AuditLogDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogDto"
          }
        }
      }
    },
    "AuditLogDto": {
      "description": "Stores audit information about any action performed in Orchestrator.",
      "type": "object",
      "properties": {
        "ServiceName": {
          "description": "The name of the Orchestrator service that performed a given action in the system.",
          "type": "string"
        },
        "MethodName": {
          "description": "The name of the service method that performed a given action in the system.",
          "type": "string"
        },
        "Parameters": {
          "description": "JSON representation of the method parameters and their values for the given action.",
          "type": "string"
        },
        "ExecutionTime": {
          "format": "date-time",
          "description": "The date and time when the action was performed.",
          "type": "string"
        },
        "Action": {
          "description": "The action performed (create, update, delete etc)",
          "enum": [
            "Unknown",
            "Create",
            "Update",
            "Delete",
            "StartJob",
            "StopJob",
            "Associate",
            "Upload",
            "ChangeStatus",
            "Import",
            "ChangePassword",
            "Register",
            "Toggle",
            "ResetPassword",
            "PasswordResetAttempt",
            "Download",
            "Acknowledge",
            "Activate",
            "Assign",
            "BulkUpload",
            "UpdateFeature",
            "ResumeJob",
            "Start",
            "End",
            "Skip",
            "Unassign",
            "Deactivate",
            "CreateBlobFileSas",
            "DeleteBlobFile"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogDtoAction",
            "modelAsString": false
          }
        },
        "Component": {
          "description": "The component for which the action was performed",
          "enum": [
            "Unknown",
            "Assets",
            "Environments",
            "Processes",
            "Queues",
            "Robots",
            "Roles",
            "Schedules",
            "Users",
            "Comments",
            "Units",
            "Jobs",
            "Settings",
            "Packages",
            "License",
            "Tenant",
            "Machines",
            "Libraries",
            "Webhooks",
            "ExecutionMedia",
            "Monitoring",
            "CredentialStores",
            "DefaultCredentialStores",
            "TaskCatalogs",
            "Tasks",
            "Maintenance",
            "Folders",
            "DirectoryService",
            "Buckets",
            "DataRetentionPolicies",
            "TenantMove"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogDtoComponent",
            "modelAsString": false
          }
        },
        "DisplayName": {
          "description": "The display name of the resource acted on, usually Name",
          "type": "string"
        },
        "EntityId": {
          "format": "int64",
          "description": "The Id of the resource acted on",
          "type": "integer"
        },
        "OperationText": {
          "description": "User friendly description of the change, e.g. \"User X created robot Y\"",
          "type": "string"
        },
        "UserName": {
          "description": "UserName that sent the request",
          "type": "string"
        },
        "UserType": {
          "description": "The type of user that sent the request",
          "enum": [
            "User",
            "Robot",
            "DirectoryUser",
            "DirectoryGroup"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogDtoUserType",
            "modelAsString": false
          }
        },
        "Entities": {
          "description": "Audit entity details collection",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogEntityDto"
          }
        },
        "UserId": {
          "format": "int64",
          "type": "integer"
        },
        "UserIsDeleted": {
          "description": "Marks whether the users that did the action was deleted in the meantime",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "AuditLogEntityDto": {
      "description": "Stores audit information about any action performed in Orchestrator.",
      "type": "object",
      "properties": {
        "AuditLogId": {
          "format": "int64",
          "description": "Business audit entry that triggered the changes",
          "type": "integer"
        },
        "CustomData": {
          "description": "Data about the old/new/included values",
          "type": "string"
        },
        "EntityId": {
          "format": "int64",
          "description": "The Id of the referred entity",
          "type": "integer"
        },
        "EntityName": {
          "description": "The name of the entity the auditLog refers to",
          "type": "string"
        },
        "Action": {
          "description": "The action (created, updated, deleted etc)",
          "enum": [
            "Unknown",
            "Create",
            "Update",
            "Delete",
            "StartJob",
            "StopJob",
            "Associate",
            "Upload",
            "ChangeStatus",
            "Import",
            "ChangePassword",
            "Register",
            "Toggle",
            "ResetPassword",
            "PasswordResetAttempt",
            "Download",
            "Acknowledge",
            "Activate",
            "Assign",
            "BulkUpload",
            "UpdateFeature",
            "ResumeJob",
            "Start",
            "End",
            "Skip",
            "Unassign",
            "Deactivate",
            "CreateBlobFileSas",
            "DeleteBlobFile"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AuditLogEntityDtoAction",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataValue[IEnumerable[AuditLogEntityDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditLogEntityDto"
          }
        }
      }
    },
    "ODataQueryOptions[BucketDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[BucketDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BucketDto"
          }
        }
      }
    },
    "BucketDto": {
      "required": [
        "Name",
        "Identifier"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Display name of the Bucket",
          "type": "string"
        },
        "Description": {
          "description": "Description of the Bucket",
          "type": "string"
        },
        "Identifier": {
          "format": "uuid",
          "description": "A stable unique identifier",
          "type": "string"
        },
        "StorageProvider": {
          "description": "Provider Name.\r\nOtherwise one of the supported providers:\r\n- FileSystem\r\n- Azure\r\n- Amazon\r\n- Minio\r\nLeave null for built-in Orchestrator host provider.",
          "type": "string"
        },
        "StorageParameters": {
          "description": "Provider specific initalization parameters.\r\nUse a $Password for where the password should be inserted.\r\nLeave null for built-in Orchestrator host provider.",
          "type": "string"
        },
        "StorageContainer": {
          "description": "Provider specific Container name (AWS, WASB).\r\nLeave null for built-in Orchestrator host provider.",
          "type": "string"
        },
        "Options": {
          "description": "Bucket options",
          "enum": [
            "None",
            "ReadOnly",
            "AuditReadAccess"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BucketDtoOptions",
            "modelAsString": false
          }
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "Credential store used to keep the provider access password.\r\nLeave null for built-in Orchestrator host provider.",
          "type": "integer"
        },
        "Password": {
          "description": "Provider specific password/secret.\r\nIt is inserted as a replacemnt of the $PAssword token in the StorageParameters.\r\nLeave null for built-in Orchestrator host provider.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "BlobFileAccessDto": {
      "type": "object",
      "properties": {
        "Uri": {
          "type": "string"
        },
        "Verb": {
          "type": "string"
        },
        "Headers": {
          "$ref": "#/definitions/ResponseDictionaryDto"
        }
      }
    },
    "ResponseDictionaryDto": {
      "description": "Data type used to return Dictionary(string, string)",
      "type": "object",
      "properties": {
        "Keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataValue[IEnumerable[BlobFileDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlobFileDto"
          }
        }
      }
    },
    "BlobFileDto": {
      "type": "object",
      "properties": {
        "FullPath": {
          "type": "string"
        },
        "ContentType": {
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "type": "integer"
        },
        "IsDirectory": {
          "type": "boolean"
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[ExtendedCalendarDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[ExtendedCalendarDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedCalendarDto"
          }
        }
      }
    },
    "ExtendedCalendarDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "TimeZoneId": {
          "type": "string"
        },
        "ExcludedDates": {
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataValue[Boolean]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "boolean"
        }
      }
    },
    "ODataQueryOptions[CredentialStoreDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[CredentialStoreDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialStoreDto"
          }
        }
      }
    },
    "CredentialStoreDto": {
      "description": "Defines the properties of a Credential Store.",
      "required": [
        "Name",
        "Type"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "AdditionalConfiguration": {
          "description": "Additional information specific to the type of the Credential Store.",
          "type": "string"
        },
        "Details": {
          "$ref": "#/definitions/CredentialStoreDetailsDto",
          "description": "Details on credential store"
        },
        "DefaultCredentialStores": {
          "description": "Default credential stores",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefaultCredentialStoreDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "CredentialStoreDetailsDto": {
      "description": "Details about credential store",
      "type": "object",
      "properties": {
        "IsReadOnly": {
          "description": "Current store is read only",
          "type": "boolean"
        }
      }
    },
    "DefaultCredentialStoreDto": {
      "required": [
        "ResourceType"
      ],
      "type": "object",
      "properties": {
        "ResourceType": {
          "enum": [
            "AssetCredential",
            "RobotCredential",
            "BucketCredential"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DefaultCredentialStoreDtoResourceType",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataValue[IEnumerable[String]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataQueryOptions[CredentialStoreResourceDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[CredentialStoreResourceDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CredentialStoreResourceDto"
          }
        }
      }
    },
    "CredentialStoreResourceDto": {
      "description": "Defines the resources such as assets, robots or bucket for a Credential Store.",
      "required": [
        "Name",
        "Type"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Type": {
          "enum": [
            "AssetCredential",
            "RobotCredential",
            "BucketCredential"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CredentialStoreResourceDtoType",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[EnvironmentDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[EnvironmentDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentDto"
          }
        }
      }
    },
    "EnvironmentDto": {
      "description": "A grouping of Robots.",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "A custom name for the environment.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about an environment in order to better identify it.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Robots": {
          "description": "The collection of robots associated with the current environment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleRobotDto"
          }
        },
        "Type": {
          "description": "DEPRECATED. The environment type specifies how it should be used.\r\nThis property is deprecated and should no longer be used.",
          "enum": [
            "Dev",
            "Test",
            "Prod"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EnvironmentDtoType",
            "modelAsString": false
          },
          "x-deprecated": true
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "SimpleRobotDto": {
      "description": "Entity derived from RobotDto. Is shares all the properties of the base entity except the navigation properties.",
      "required": [
        "Name",
        "Username",
        "Type",
        "HostingType"
      ],
      "type": "object",
      "properties": {
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "MachineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the machine a Robot is hosted on",
          "type": "integer"
        },
        "Name": {
          "description": "A custom name for the robot.",
          "maxLength": 19,
          "minLength": 0,
          "type": "string"
        },
        "Username": {
          "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the password.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a robot in order to better identify it.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Version": {
          "description": "DEPRECATED. The Robot's Version.",
          "type": "string",
          "x-deprecated": true
        },
        "Type": {
          "description": "The Robot type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleRobotDtoType",
            "modelAsString": false
          }
        },
        "HostingType": {
          "description": "The Robot hosting type (Standard / Floating).",
          "enum": [
            "Standard",
            "Floating"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleRobotDtoHostingType",
            "modelAsString": false
          }
        },
        "ProvisionType": {
          "description": "The Robot provision type.",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleRobotDtoProvisionType",
            "modelAsString": false
          }
        },
        "Password": {
          "description": "The Windows password associated with the machine username.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the password.",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "description": "The associated user's Id.",
          "type": "integer"
        },
        "CredentialType": {
          "description": "The robot credentials type (Default/ SmartCard)",
          "enum": [
            "Default",
            "SmartCard"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleRobotDtoCredentialType",
            "modelAsString": false
          }
        },
        "Environments": {
          "description": "The collection of environments the robot is part of.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentDto"
          }
        },
        "RobotEnvironments": {
          "description": "The comma separated textual representation of environment names the robot is part of.",
          "type": "string"
        },
        "ExecutionSettings": {
          "description": "A collection of key value pairs containing execution settings for this robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "IsExternalLicensed": {
          "description": "Flag to indicate if the robot uses an external license",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ExecutionSettingsValues": {
      "type": "object",
      "properties": {}
    },
    "ODataQueryOptions[RobotDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[RobotDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotDto"
          }
        }
      }
    },
    "RobotDto": {
      "description": "A Robot is an execution host that runs processes built in UiPath Studio.",
      "required": [
        "Name",
        "Username",
        "Type",
        "HostingType"
      ],
      "type": "object",
      "properties": {
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "MachineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the machine a Robot is hosted on",
          "type": "integer"
        },
        "Name": {
          "description": "A custom name for the robot.",
          "maxLength": 19,
          "minLength": 0,
          "type": "string"
        },
        "Username": {
          "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the password.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a robot in order to better identify it.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Version": {
          "description": "DEPRECATED. The Robot's Version.",
          "type": "string",
          "x-deprecated": true
        },
        "Type": {
          "description": "The Robot type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotDtoType",
            "modelAsString": false
          }
        },
        "HostingType": {
          "description": "The Robot hosting type (Standard / Floating).",
          "enum": [
            "Standard",
            "Floating"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotDtoHostingType",
            "modelAsString": false
          }
        },
        "ProvisionType": {
          "description": "The Robot provision type.",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotDtoProvisionType",
            "modelAsString": false
          }
        },
        "Password": {
          "description": "The Windows password associated with the machine username.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the password.",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "description": "The associated user's Id.",
          "type": "integer"
        },
        "CredentialType": {
          "description": "The robot credentials type (Default/ SmartCard)",
          "enum": [
            "Default",
            "SmartCard"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotDtoCredentialType",
            "modelAsString": false
          }
        },
        "Environments": {
          "description": "The collection of environments the robot is part of.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentDto"
          }
        },
        "RobotEnvironments": {
          "description": "The comma separated textual representation of environment names the robot is part of.",
          "type": "string"
        },
        "ExecutionSettings": {
          "description": "A collection of key value pairs containing execution settings for this robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "IsExternalLicensed": {
          "description": "Flag to indicate if the robot uses an external license",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataValue[IEnumerable[Int64]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "ODataQueryOptions[FolderDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[FolderDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderDto"
          }
        }
      }
    },
    "UserAssignmentsDto": {
      "type": "object",
      "properties": {
        "UserIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "RolesPerFolder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderRolesDto"
          }
        }
      }
    },
    "FolderRolesDto": {
      "description": "Association between a folder and a set of roles.",
      "type": "object",
      "properties": {
        "FolderId": {
          "format": "int64",
          "type": "integer"
        },
        "RoleIds": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "DomainUserAssignmentDto": {
      "type": "object",
      "properties": {
        "Domain": {
          "type": "string"
        },
        "UserName": {
          "type": "string"
        },
        "UserType": {
          "enum": [
            "User",
            "Robot",
            "DirectoryUser",
            "DirectoryGroup"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DomainUserAssignmentDtoUserType",
            "modelAsString": false
          }
        },
        "RolesPerFolder": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderRolesDto"
          }
        }
      }
    },
    "ODataQueryOptions[UserRolesDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[UserRolesDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRolesDto"
          }
        }
      }
    },
    "UserRolesDto": {
      "description": "Association between a user and a set of roles.",
      "type": "object",
      "properties": {
        "UserEntity": {
          "$ref": "#/definitions/SimpleUserEntityDto"
        },
        "Roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleRoleDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "SimpleRoleDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Origin": {
          "enum": [
            "Assigned",
            "Inherited"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleRoleDtoOrigin",
            "modelAsString": false
          }
        },
        "InheritedFromFolder": {
          "$ref": "#/definitions/SimpleFolderDto"
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[MachineFolderDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[MachineFolderDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineFolderDto"
          }
        }
      }
    },
    "MachineFolderDto": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "IsAssignedToFolder": {
          "type": "boolean"
        },
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "Name": {
          "description": "The name of the Machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Type": {
          "description": "The type of the Machine (Standard / Template).",
          "enum": [
            "Standard",
            "Template"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MachineFolderDtoType",
            "modelAsString": false
          }
        },
        "NonProductionSlots": {
          "format": "int32",
          "description": "Number of NonProduction slots to be reserved at runtime",
          "type": "integer"
        },
        "UnattendedSlots": {
          "format": "int32",
          "description": "Number of Unattended slots to be reserved at runtime",
          "type": "integer"
        },
        "HeadlessSlots": {
          "format": "int32",
          "description": "Number of Headless slots to be reserved at runtime",
          "type": "integer"
        },
        "TestAutomationSlots": {
          "format": "int32",
          "description": "Number of TestAutomation slots to be reserved at runtime",
          "type": "integer"
        },
        "RobotVersions": {
          "description": "The versions of the Robots hosted on the Machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinesRobotVersionDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MachinesRobotVersionDto": {
      "type": "object",
      "properties": {
        "Count": {
          "format": "int64",
          "description": "The number of Robots on the Machine with the specified version.",
          "type": "integer"
        },
        "Version": {
          "description": "The Version of the Robot hosted on the Machine.",
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the Machine.",
          "type": "integer"
        }
      }
    },
    "MachineAssignmentsDto": {
      "type": "object",
      "properties": {
        "MachineIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "FolderIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "ODataQueryOptions[HostLicenseDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[HostLicenseDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostLicenseDto"
          }
        }
      }
    },
    "HostLicenseDto": {
      "description": "Stores information about the host license used to activate one or more tenants.",
      "type": "object",
      "properties": {
        "TenantsCount": {
          "format": "int32",
          "description": "The number of tenants licensed from this license file",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "description": "License Id",
          "type": "integer"
        },
        "ExpireDate": {
          "format": "int64",
          "description": "License expiration date in Epoch format",
          "type": "integer"
        },
        "GracePeriodEndDate": {
          "format": "int64",
          "description": "License grace period end date in Epoch format",
          "type": "integer"
        },
        "GracePeriod": {
          "format": "int64",
          "description": "Number of grace period days",
          "type": "integer"
        },
        "Allowed": {
          "description": "Contains the number of allowed licenses for each type",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "Used": {
          "description": "Contains the number of used licenses for each type",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "AttendedConcurrent": {
          "description": "States whether the license is Attended Concurrent",
          "type": "boolean"
        },
        "DevelopmentConcurrent": {
          "description": "States whether the license is Development Concurrent",
          "type": "boolean"
        },
        "StudioXConcurrent": {
          "description": "States whether the license is Studio Business Concurrent",
          "type": "boolean"
        },
        "StudioProConcurrent": {
          "description": "States whether the license is Studio Pro Concurrent",
          "type": "boolean"
        },
        "LicensedFeatures": {
          "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsRegistered": {
          "description": "True if the current tenant is registered with a license. False otherwise.",
          "type": "boolean"
        },
        "IsExpired": {
          "description": "States whether the license is still valid or not.",
          "type": "boolean"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date when the license was uploaded.",
          "type": "string"
        },
        "Code": {
          "description": "The license code.",
          "type": "string"
        }
      }
    },
    "LicenseDto": {
      "description": "Stores information about the license used to activate a tenant.",
      "type": "object",
      "properties": {
        "HostLicenseId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "description": "License Id",
          "type": "integer"
        },
        "ExpireDate": {
          "format": "int64",
          "description": "License expiration date in Epoch format",
          "type": "integer"
        },
        "GracePeriodEndDate": {
          "format": "int64",
          "description": "License grace period end date in Epoch format",
          "type": "integer"
        },
        "GracePeriod": {
          "format": "int64",
          "description": "Number of grace period days",
          "type": "integer"
        },
        "Allowed": {
          "description": "Contains the number of allowed licenses for each type",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "Used": {
          "description": "Contains the number of used licenses for each type",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "AttendedConcurrent": {
          "description": "States whether the license is Attended Concurrent",
          "type": "boolean"
        },
        "DevelopmentConcurrent": {
          "description": "States whether the license is Development Concurrent",
          "type": "boolean"
        },
        "StudioXConcurrent": {
          "description": "States whether the license is Studio Business Concurrent",
          "type": "boolean"
        },
        "StudioProConcurrent": {
          "description": "States whether the license is Studio Pro Concurrent",
          "type": "boolean"
        },
        "LicensedFeatures": {
          "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IsRegistered": {
          "description": "True if the current tenant is registered with a license. False otherwise.",
          "type": "boolean"
        },
        "IsExpired": {
          "description": "States whether the license is still valid or not.",
          "type": "boolean"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date when the license was uploaded.",
          "type": "string"
        },
        "Code": {
          "description": "The license code.",
          "type": "string"
        }
      }
    },
    "ODataValue[String]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "HostLicensePerTenantDto": {
      "type": "object",
      "properties": {
        "TenantId": {
          "format": "int32",
          "description": "The tenant's Id",
          "type": "integer"
        },
        "HostLicenseId": {
          "format": "int64",
          "description": "The host license's Id",
          "type": "integer"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "ODataQueryOptions[JobDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[JobDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobDto"
          }
        }
      }
    },
    "JobDto": {
      "description": "Represents a scheduled or manual execution of a process on a robot.",
      "type": "object",
      "properties": {
        "Key": {
          "format": "uuid",
          "description": "The unique job identifier.",
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "description": "The date and time when the job execution started or null if the job hasn't started yet.",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
          "type": "string"
        },
        "State": {
          "description": "The state in which the job is.",
          "enum": [
            "Pending",
            "Running",
            "Stopping",
            "Terminating",
            "Faulted",
            "Successful",
            "Stopped",
            "Suspended",
            "Resumed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoState",
            "modelAsString": false
          }
        },
        "JobPriority": {
          "description": "Execution priority.",
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoJobPriority",
            "modelAsString": false
          }
        },
        "Robot": {
          "$ref": "#/definitions/SimpleRobotDto",
          "description": "The robot associated with the current job."
        },
        "Release": {
          "$ref": "#/definitions/SimpleReleaseDto",
          "description": "The release associated with the current job."
        },
        "Source": {
          "description": "The Source name of the job.",
          "type": "string"
        },
        "SourceType": {
          "description": "The Source type of the job.",
          "enum": [
            "Manual",
            "Schedule",
            "Agent",
            "Queue"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoSourceType",
            "modelAsString": false
          }
        },
        "BatchExecutionKey": {
          "format": "uuid",
          "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
          "type": "string"
        },
        "Info": {
          "description": "Additional information about the current job.",
          "type": "string"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the job was created.",
          "type": "string"
        },
        "StartingScheduleId": {
          "format": "int64",
          "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
          "type": "integer"
        },
        "ReleaseName": {
          "description": "The name of the release associated with the current name.",
          "type": "string"
        },
        "Type": {
          "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
          "enum": [
            "Unattended",
            "Attended"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoType",
            "modelAsString": false
          }
        },
        "InputArguments": {
          "description": "Input parameters in JSON format to be passed to job execution",
          "type": "string"
        },
        "OutputArguments": {
          "description": "Output parameters in JSON format resulted from job execution",
          "type": "string"
        },
        "HostMachineName": {
          "description": "The name of the machine where the Robot run the job.",
          "type": "string"
        },
        "HasMediaRecorded": {
          "description": "True if any execution media has been recorded for this job, false otherwise.",
          "type": "boolean"
        },
        "PersistenceId": {
          "format": "uuid",
          "description": "The persistence instance id for a suspended job",
          "type": "string"
        },
        "ResumeVersion": {
          "format": "int32",
          "description": "Distinguishes between multiple job suspend/resume cycles",
          "type": "integer"
        },
        "StopStrategy": {
          "enum": [
            "SoftStop",
            "Kill"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoStopStrategy",
            "modelAsString": false
          }
        },
        "RuntimeType": {
          "description": "The runtime type of the robot which can pick up the job",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobDtoRuntimeType",
            "modelAsString": false
          }
        },
        "RequiresUserInteraction": {
          "type": "boolean"
        },
        "ReleaseVersionId": {
          "format": "int64",
          "type": "integer"
        },
        "EntryPointPath": {
          "description": "Path to the entry point workflow (XAML) that will be executed by the robot",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "SimpleReleaseDto": {
      "description": "Entity derived from BaseReleaseDto. It shares all the properties of the base entity except the navigation properties.",
      "required": [
        "ProcessKey",
        "ProcessVersion",
        "Name"
      ],
      "type": "object",
      "properties": {
        "Key": {
          "description": "A unique identifier associated to each release.",
          "type": "string"
        },
        "ProcessKey": {
          "description": "The unique identifier of the process associated with the release.",
          "type": "string"
        },
        "ProcessVersion": {
          "description": "The version of the process associated with the release.",
          "type": "string"
        },
        "IsLatestVersion": {
          "description": "States whether the version of process associated with the release is latest or not.",
          "type": "boolean"
        },
        "IsProcessDeleted": {
          "description": "States whether the process associated with the release is deleted or not.",
          "type": "boolean"
        },
        "Description": {
          "description": "Used to add additional information about a release in order to better identify it.",
          "type": "string"
        },
        "Name": {
          "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName.",
          "type": "string"
        },
        "EnvironmentId": {
          "format": "int64",
          "description": "The Id of the environment associated with the release.",
          "type": "integer"
        },
        "EnvironmentName": {
          "description": "The name of the environment associated with the release.",
          "type": "string"
        },
        "Environment": {
          "$ref": "#/definitions/EnvironmentDto",
          "description": "The environment associated with the release."
        },
        "InputArguments": {
          "description": "Input parameters in JSON format to be passed as default values to job execution.",
          "type": "string"
        },
        "ProcessType": {
          "enum": [
            "Process",
            "TestAutomationProcess"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleReleaseDtoProcessType",
            "modelAsString": false
          }
        },
        "SupportsMultipleEntryPoints": {
          "type": "boolean"
        },
        "RequiresUserInteraction": {
          "type": "boolean"
        },
        "CurrentVersion": {
          "$ref": "#/definitions/ReleaseVersionDto",
          "description": "The release version associated with the current release."
        },
        "ReleaseVersions": {
          "description": "The collection of release versions that current release had over time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseVersionDto"
          }
        },
        "Arguments": {
          "$ref": "#/definitions/ArgumentMetadata",
          "description": "Input/Output arguments consumed/produced by the release"
        },
        "ProcessSettings": {
          "$ref": "#/definitions/ProcessSettingsDto"
        },
        "AutoUpdate": {
          "type": "boolean"
        },
        "JobPriority": {
          "description": "The execution priority. If null, it defaults to Normal.",
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleReleaseDtoJobPriority",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ReleaseVersionDto": {
      "description": "Stores data about a version of the various versions of the process associated with a certain release.\r\n<para />If a certain version is associated on and off with a release a new ReleaseVersion object is created for each association.",
      "required": [
        "ReleaseId",
        "VersionNumber"
      ],
      "type": "object",
      "properties": {
        "ReleaseId": {
          "format": "int64",
          "description": "The Id of the parent release.",
          "type": "integer"
        },
        "VersionNumber": {
          "description": "The version of process associated with the release.",
          "type": "string"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the version was associated with the release.",
          "type": "string"
        },
        "ReleaseName": {
          "description": "The name of the process associated with the release.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ArgumentMetadata": {
      "type": "object",
      "properties": {
        "Input": {
          "type": "string"
        },
        "Output": {
          "type": "string"
        }
      }
    },
    "StartProcessDto": {
      "description": "The Start Process transfers information from client to the server during JobsController.StartJobs custom action.",
      "required": [
        "ReleaseKey"
      ],
      "type": "object",
      "properties": {
        "ReleaseKey": {
          "description": "The unique key of the release associated with the process.",
          "type": "string"
        },
        "Strategy": {
          "description": "States which robots from the environment are being run by the process.",
          "enum": [
            "All",
            "Specific",
            "RobotCount",
            "JobsCount",
            "ModernJobsCount"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "StartProcessDtoStrategy",
            "modelAsString": false
          }
        },
        "RobotIds": {
          "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "NoOfRobots": {
          "format": "int32",
          "description": "DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.",
          "type": "integer",
          "x-deprecated": true
        },
        "JobsCount": {
          "format": "int32",
          "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
          "type": "integer"
        },
        "Source": {
          "description": "The Source of the job starting the current process.",
          "enum": [
            "Manual",
            "Schedule",
            "Queue"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "StartProcessDtoSource",
            "modelAsString": false
          }
        },
        "JobPriority": {
          "description": "Execution priority. If null, defaults to the JobPriority of its release.",
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "StartProcessDtoJobPriority",
            "modelAsString": false
          }
        },
        "RuntimeType": {
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "StartProcessDtoRuntimeType",
            "modelAsString": false
          }
        },
        "InputArguments": {
          "description": "Input parameters in JSON format to be passed to job execution.",
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[JobTriggerDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[JobTriggerDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobTriggerDto"
          }
        }
      }
    },
    "JobTriggerDto": {
      "description": "A trigger for resuming a job",
      "type": "object",
      "properties": {
        "JobId": {
          "format": "int64",
          "type": "integer"
        },
        "TriggerType": {
          "description": "Resume type (job, queue, task etc)",
          "enum": [
            "None",
            "QueueItem",
            "Job",
            "Task",
            "Timer"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobTriggerDtoTriggerType",
            "modelAsString": false
          }
        },
        "Status": {
          "description": "Job trigger status (new, ready, fired etc)",
          "enum": [
            "New",
            "Ready",
            "Fired"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "JobTriggerDtoStatus",
            "modelAsString": false
          }
        },
        "ItemId": {
          "format": "int64",
          "description": "item Id (queue item id, task id, job id etc)",
          "type": "integer"
        },
        "Timer": {
          "format": "date-time",
          "description": "Resume timer (for time trigger)",
          "type": "string"
        },
        "TriggerMessage": {
          "description": "Workflow provided resume trigger description/message",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[LibraryDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[LibraryDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryDto"
          }
        }
      }
    },
    "LibraryDto": {
      "type": "object",
      "properties": {
        "Title": {
          "description": "The custom name of the package.",
          "type": "string"
        },
        "Version": {
          "description": "The current version of the given package.",
          "type": "string"
        },
        "Key": {
          "description": "The unique identifier for the package.",
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a package in order to better identify it.",
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "description": "The date and time when the package was published or uploaded.",
          "type": "string"
        },
        "IsLatestVersion": {
          "description": "Specifies whether the current version is the latest of the given package.",
          "type": "boolean"
        },
        "OldVersion": {
          "description": "Specifies the last version before the current one.",
          "type": "string"
        },
        "ReleaseNotes": {
          "description": "Package release notes.",
          "type": "string"
        },
        "Authors": {
          "description": "Package authors.",
          "type": "string"
        },
        "ProjectType": {
          "description": "Package project type.",
          "enum": [
            "Undefined",
            "Process",
            "ProcessLibrary",
            "BusinessProcess",
            "BusinessProcessLibrary",
            "TestAutomationProcess"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LibraryDtoProjectType",
            "modelAsString": false
          }
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "ODataValue[IEnumerable[BulkItemDto[String]]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkItemDto[String]"
          }
        }
      }
    },
    "BulkItemDto[String]": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Continue",
            "SwitchingProtocols",
            "OK",
            "Created",
            "Accepted",
            "NonAuthoritativeInformation",
            "NoContent",
            "ResetContent",
            "PartialContent",
            "MultipleChoices",
            "Ambiguous",
            "MovedPermanently",
            "Moved",
            "Found",
            "Redirect",
            "SeeOther",
            "RedirectMethod",
            "NotModified",
            "UseProxy",
            "Unused",
            "TemporaryRedirect",
            "RedirectKeepVerb",
            "BadRequest",
            "Unauthorized",
            "PaymentRequired",
            "Forbidden",
            "NotFound",
            "MethodNotAllowed",
            "NotAcceptable",
            "ProxyAuthenticationRequired",
            "RequestTimeout",
            "Conflict",
            "Gone",
            "LengthRequired",
            "PreconditionFailed",
            "RequestEntityTooLarge",
            "RequestUriTooLong",
            "UnsupportedMediaType",
            "RequestedRangeNotSatisfiable",
            "ExpectationFailed",
            "UpgradeRequired",
            "InternalServerError",
            "NotImplemented",
            "BadGateway",
            "ServiceUnavailable",
            "GatewayTimeout",
            "HttpVersionNotSupported"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BulkItemDto`1Status",
            "modelAsString": false
          }
        },
        "Body": {
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[LicenseNamedUserDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[LicenseNamedUserDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseNamedUserDto"
          }
        }
      }
    },
    "LicenseNamedUserDto": {
      "description": "Stores information about a named-user license (attended/development).",
      "type": "object",
      "properties": {
        "Key": {
          "description": "The license key.",
          "type": "string"
        },
        "UserName": {
          "description": "The Robot's UserName.",
          "type": "string"
        },
        "LastLoginDate": {
          "format": "date-time",
          "description": "The last date when the Robot acquired a license.",
          "type": "string"
        },
        "MachinesCount": {
          "format": "int32",
          "description": "Total number of machines where a robot with UserName is defined.",
          "type": "integer"
        },
        "IsLicensed": {
          "description": "If the license is in use.",
          "type": "boolean"
        },
        "IsExternalLicensed": {
          "description": "If the robot is external licensed",
          "type": "boolean"
        },
        "ActiveRobotId": {
          "format": "int64",
          "description": "The Id of the Robot that uses the license.",
          "type": "integer"
        },
        "MachineNames": {
          "description": "The Machine names of the defined Robot.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ActiveMachineNames": {
          "description": "The Machine names of the connected and licensed Robot.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataQueryOptions[LicenseRuntimeDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[LicenseRuntimeDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseRuntimeDto"
          }
        }
      }
    },
    "LicenseRuntimeDto": {
      "description": "Stores information about a runtime license (unattended/non-production).",
      "type": "object",
      "properties": {
        "Key": {
          "description": "The license key.",
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Machine's Id.",
          "type": "integer"
        },
        "MachineName": {
          "description": "The Machine's Name.",
          "type": "string"
        },
        "HostMachineName": {
          "description": "The Host machine's Name.",
          "type": "string"
        },
        "ServiceUserName": {
          "description": "The Service username when installed in user mode.",
          "type": "string"
        },
        "MachineType": {
          "description": "The Machine's Type.",
          "enum": [
            "Standard",
            "Template"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LicenseRuntimeDtoMachineType",
            "modelAsString": false
          }
        },
        "Runtimes": {
          "format": "int32",
          "description": "Maximum number of runtimes.",
          "type": "integer"
        },
        "RobotsCount": {
          "format": "int32",
          "description": "Total number of Robots.",
          "type": "integer"
        },
        "ExecutingCount": {
          "format": "int32",
          "description": "How many Robots acquired a license.",
          "type": "integer"
        },
        "IsOnline": {
          "description": "If the machine is online.",
          "type": "boolean"
        },
        "IsLicensed": {
          "description": "If the machine is licensed.",
          "type": "boolean"
        },
        "Enabled": {
          "description": "If the machine is allowed to consume licenses.",
          "type": "boolean"
        }
      }
    },
    "ODataQueryOptions[ExtendedMachineDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[ExtendedMachineDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedMachineDto"
          }
        }
      }
    },
    "ExtendedMachineDto": {
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "Name": {
          "description": "The name of the Machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Type": {
          "description": "The type of the Machine (Standard / Template).",
          "enum": [
            "Standard",
            "Template"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExtendedMachineDtoType",
            "modelAsString": false
          }
        },
        "NonProductionSlots": {
          "format": "int32",
          "description": "Number of NonProduction slots to be reserved at runtime",
          "type": "integer"
        },
        "UnattendedSlots": {
          "format": "int32",
          "description": "Number of Unattended slots to be reserved at runtime",
          "type": "integer"
        },
        "HeadlessSlots": {
          "format": "int32",
          "description": "Number of Headless slots to be reserved at runtime",
          "type": "integer"
        },
        "TestAutomationSlots": {
          "format": "int32",
          "description": "Number of TestAutomation slots to be reserved at runtime",
          "type": "integer"
        },
        "RobotVersions": {
          "description": "The versions of the Robots hosted on the Machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinesRobotVersionDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "MachineDto": {
      "description": "The Machine that hosts the Robot",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "Name": {
          "description": "The name of the Machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Type": {
          "description": "The type of the Machine (Standard / Template).",
          "enum": [
            "Standard",
            "Template"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MachineDtoType",
            "modelAsString": false
          }
        },
        "NonProductionSlots": {
          "format": "int32",
          "description": "Number of NonProduction slots to be reserved at runtime",
          "type": "integer"
        },
        "UnattendedSlots": {
          "format": "int32",
          "description": "Number of Unattended slots to be reserved at runtime",
          "type": "integer"
        },
        "HeadlessSlots": {
          "format": "int32",
          "description": "Number of Headless slots to be reserved at runtime",
          "type": "integer"
        },
        "TestAutomationSlots": {
          "format": "int32",
          "description": "Number of TestAutomation slots to be reserved at runtime",
          "type": "integer"
        },
        "RobotVersions": {
          "description": "The versions of the Robots hosted on the Machine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachinesRobotVersionDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[MachineDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[MachineRuntimeDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineRuntimeDto"
          }
        }
      }
    },
    "MachineRuntimeDto": {
      "type": "object",
      "properties": {
        "Type": {
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MachineRuntimeDtoType",
            "modelAsString": false
          }
        },
        "Total": {
          "format": "int64",
          "type": "integer"
        },
        "Connected": {
          "format": "int64",
          "type": "integer"
        },
        "Available": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[MessageTemplateDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[MessageTemplateDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MessageTemplateDto"
          }
        }
      }
    },
    "MessageTemplateDto": {
      "description": "Used to store various predefined application message templates like custom login layout.",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of a specific template (e.g. Templates.LoginLayout).",
          "type": "string"
        },
        "Value": {
          "description": "The value assigned to a specific template.",
          "type": "string"
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[OrganizationUnitDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[OrganizationUnitDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationUnitDto"
          }
        }
      }
    },
    "OrganizationUnitDto": {
      "description": "Stores information about an organization unit in Orchestrator.\r\n<para /> An orchestrator unit can be understood as a company department and it is used to group different entities.",
      "required": [
        "DisplayName"
      ],
      "type": "object",
      "properties": {
        "DisplayName": {
          "description": "The name of the organization unit.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[UserDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[UserDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDto"
          }
        }
      }
    },
    "UserDto": {
      "description": "Stores information about assigned role(s) and email settings, and enables a person or a Robot to login to Orchestrator.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the person for which the user is created.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "Surname": {
          "description": "The surname of the person for which the user is created.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "UserName": {
          "description": "The name used to login to Orchestrator.",
          "type": "string"
        },
        "Domain": {
          "description": "The domain from which the user is imported",
          "type": "string"
        },
        "FullName": {
          "description": "The full name of the person constructed with the format Name Surname.",
          "type": "string"
        },
        "EmailAddress": {
          "description": "The e-mail address associated with the user.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "IsEmailConfirmed": {
          "description": "States if the email address is valid or not.",
          "type": "boolean"
        },
        "LastLoginTime": {
          "format": "date-time",
          "description": "The date and time when the user last logged in, or null if the user never logged in.",
          "type": "string"
        },
        "IsActive": {
          "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
          "type": "boolean"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the user was created.",
          "type": "string"
        },
        "AuthenticationSource": {
          "description": "The source which authenticated this user.",
          "type": "string"
        },
        "Password": {
          "description": "The password used during application login.",
          "type": "string"
        },
        "IsExternalLicensed": {
          "type": "boolean"
        },
        "UserRoles": {
          "description": "The collection of roles associated with the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleDto"
          }
        },
        "RolesList": {
          "description": "The collection of role names associated with the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LoginProviders": {
          "description": "The collection of entities that can authenticate the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OrganizationUnits": {
          "description": "The collection of organization units associated with the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationUnitDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "description": "The id of the tenant owning the user.",
          "type": "integer"
        },
        "TenancyName": {
          "description": "The name of the tenant owning the user.",
          "type": "string"
        },
        "TenantDisplayName": {
          "description": "The display name of the tenant owning the user.",
          "type": "string"
        },
        "TenantKey": {
          "description": "The key of the tenant owning the user.",
          "type": "string"
        },
        "Type": {
          "description": "The user type.",
          "enum": [
            "User",
            "Robot",
            "DirectoryUser",
            "DirectoryGroup"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "UserDtoType",
            "modelAsString": false
          }
        },
        "ProvisionType": {
          "description": "The user type.",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "UserDtoProvisionType",
            "modelAsString": false
          }
        },
        "LicenseType": {
          "description": "The user's license type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "UserDtoLicenseType",
            "modelAsString": false
          }
        },
        "RobotProvision": {
          "$ref": "#/definitions/AttendedRobotDto",
          "description": "Attended Robot provisioning settings"
        },
        "UnattendedRobot": {
          "$ref": "#/definitions/UnattendedRobotDto",
          "description": "Unattended Robot provisioning settings"
        },
        "NotificationSubscription": {
          "$ref": "#/definitions/UserNotificationSubscription",
          "description": "User can choose which notifications does he want to receive"
        },
        "Key": {
          "format": "uuid",
          "description": "Unique key for a user",
          "type": "string"
        },
        "MayHaveUserSession": {
          "description": "Specifies whether this user is allowed to have a User session (default: true)",
          "type": "boolean"
        },
        "MayHaveRobotSession": {
          "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)",
          "type": "boolean"
        },
        "MayHaveUnattendedSession": {
          "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)",
          "type": "boolean"
        },
        "BypassBasicAuthRestriction": {
          "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: false)",
          "type": "boolean"
        },
        "MayHavePersonalWorkspace": {
          "description": "Specifies whether this user is allowed to have a Personal Workspace",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UserRoleDto": {
      "description": "Stores information about the association between a user and a role.",
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int64",
          "description": "The Id of the associated user.",
          "type": "integer"
        },
        "RoleId": {
          "format": "int32",
          "description": "The Id of the associated role.",
          "type": "integer"
        },
        "UserName": {
          "description": "The name of the associated user",
          "type": "string"
        },
        "RoleName": {
          "description": "The name of the associated role",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "AttendedRobotDto": {
      "type": "object",
      "properties": {
        "UserName": {
          "description": "The UserName used to authenticate on the Host Machine.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ExecutionSettings": {
          "description": "An object containing execution settings for the Robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "RobotId": {
          "format": "int64",
          "description": "The actual Id of the provisioned Robot.",
          "type": "integer"
        },
        "RobotType": {
          "description": "The actual Type of the provisioned Robot.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AttendedRobotDtoRobotType",
            "modelAsString": false
          }
        }
      }
    },
    "UnattendedRobotDto": {
      "required": [
        "UserName"
      ],
      "type": "object",
      "properties": {
        "UserName": {
          "description": "The UserName used to authenticate on the Host Machine.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "Password": {
          "description": "The Password used to authenticate on the Host Machine.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the password.",
          "type": "integer"
        },
        "CredentialType": {
          "description": "The robot credentials type (Default/ SmartCard)",
          "enum": [
            "Default",
            "SmartCard"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "UnattendedRobotDtoCredentialType",
            "modelAsString": false
          }
        },
        "CredentialExternalName": {
          "description": "Contains the value of the key in the external store used to store the password.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "ExecutionSettings": {
          "description": "An object containing execution settings for the Robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "RobotId": {
          "format": "int64",
          "description": "The actual Id of the provisioned Robot.",
          "type": "integer"
        }
      }
    },
    "UserNotificationSubscription": {
      "type": "object",
      "properties": {
        "Queues": {
          "type": "boolean"
        },
        "Robots": {
          "type": "boolean"
        },
        "Jobs": {
          "type": "boolean"
        },
        "Schedules": {
          "type": "boolean"
        },
        "Tasks": {
          "type": "boolean"
        },
        "QueueItems": {
          "type": "boolean"
        }
      }
    },
    "ODataQueryOptions[PermissionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[PermissionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionDto"
          }
        }
      }
    },
    "PermissionDto": {
      "description": "Stores information about an application permission and role association.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the application permission.",
          "type": "string"
        },
        "IsGranted": {
          "description": "States if a user associated with the role will be allowed or denied to perform the actions governed by the permission.",
          "type": "boolean"
        },
        "RoleId": {
          "format": "int32",
          "description": "The Id of the role associated with the permission.",
          "type": "integer"
        },
        "Scope": {
          "description": "The application scope in which the permission will be applied",
          "enum": [
            "Global",
            "Folder",
            "GlobalOrFolder"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "PermissionDtoScope",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[ProcessDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[ProcessDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessDto"
          }
        }
      }
    },
    "ProcessDto": {
      "description": "A process is a project defined in UiPath Studio and published in Orchestrator from UiPath Studio or manually.",
      "type": "object",
      "properties": {
        "IsActive": {
          "description": "Specifies if the process is still active.",
          "type": "boolean"
        },
        "Arguments": {
          "$ref": "#/definitions/ArgumentMetadata",
          "description": "Input/Output arguments supported by the process"
        },
        "SupportsMultipleEntryPoints": {
          "description": "Specifies if the process has multiple entry points.",
          "type": "boolean"
        },
        "RequiresUserInteraction": {
          "description": "Specifies if the process can run in headless mode.",
          "type": "boolean"
        },
        "EntryPoints": {
          "description": "Entry points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryPointDto"
          }
        },
        "Title": {
          "description": "The custom name of the package.",
          "type": "string"
        },
        "Version": {
          "description": "The current version of the given package.",
          "type": "string"
        },
        "Key": {
          "description": "The unique identifier for the package.",
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a package in order to better identify it.",
          "type": "string"
        },
        "Published": {
          "format": "date-time",
          "description": "The date and time when the package was published or uploaded.",
          "type": "string"
        },
        "IsLatestVersion": {
          "description": "Specifies whether the current version is the latest of the given package.",
          "type": "boolean"
        },
        "OldVersion": {
          "description": "Specifies the last version before the current one.",
          "type": "string"
        },
        "ReleaseNotes": {
          "description": "Package release notes.",
          "type": "string"
        },
        "Authors": {
          "description": "Package authors.",
          "type": "string"
        },
        "ProjectType": {
          "description": "Package project type.",
          "enum": [
            "Undefined",
            "Process",
            "ProcessLibrary",
            "BusinessProcess",
            "BusinessProcessLibrary",
            "TestAutomationProcess"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessDtoProjectType",
            "modelAsString": false
          }
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "EntryPointDto": {
      "type": "object",
      "properties": {
        "UniqueId": {
          "format": "uuid",
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "InputArguments": {
          "type": "string"
        },
        "OutputArguments": {
          "type": "string"
        },
        "DataVariation": {
          "$ref": "#/definitions/EntryPointDataVariationDto"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "EntryPointDataVariationDto": {
      "type": "object",
      "properties": {
        "Content": {
          "type": "string"
        },
        "ContentType": {
          "enum": [
            "Json"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "EntryPointDataVariationDtoContentType",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[ProcessScheduleDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[ProcessScheduleDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessScheduleDto"
          }
        }
      }
    },
    "ProcessScheduleDto": {
      "description": "Defines the schedule of a process that can be executed at regular intervals, on selected Robots, all of them or a specified number of Robots.",
      "required": [
        "Name",
        "TimeZoneId"
      ],
      "type": "object",
      "properties": {
        "Enabled": {
          "description": "Specifies if the schedule is active or not.",
          "type": "boolean"
        },
        "Name": {
          "description": "The name of the schedule.",
          "type": "string"
        },
        "ReleaseId": {
          "format": "int64",
          "description": "The Id of the process associated with the schedule.",
          "type": "integer"
        },
        "ReleaseKey": {
          "description": "The unique key of the process associated with the schedule.",
          "type": "string"
        },
        "ReleaseName": {
          "description": "The name of the process associated with the schedule.",
          "type": "string"
        },
        "PackageName": {
          "description": "The name of the package to be triggered with the schedule.",
          "type": "string"
        },
        "EnvironmentName": {
          "description": "The name of the environment associated with the schedule.",
          "type": "string"
        },
        "EnvironmentId": {
          "description": "The Id of the environment associated with the schedule.",
          "type": "string"
        },
        "JobPriority": {
          "description": "The execution priority. If null, it will start jobs with the release's priority.",
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessScheduleDtoJobPriority",
            "modelAsString": false
          }
        },
        "RuntimeType": {
          "description": "The runtime type of the robot",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessScheduleDtoRuntimeType",
            "modelAsString": false
          }
        },
        "StartProcessCron": {
          "description": "The start cron expression of the schedule.",
          "type": "string"
        },
        "StartProcessCronDetails": {
          "description": "Various details that can be associated to the time period expression of the schedule.",
          "type": "string"
        },
        "StartProcessCronSummary": {
          "description": "Human readable form of cron expression of the schedule.",
          "type": "string"
        },
        "StartProcessNextOccurrence": {
          "format": "date-time",
          "description": "The date and time when the associated process will be run next.",
          "type": "string"
        },
        "StartStrategy": {
          "format": "int32",
          "description": "States which robots from the environment are being run by the schedule.",
          "type": "integer"
        },
        "ExecutorRobots": {
          "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RobotExecutorDto"
          }
        },
        "StopProcessExpression": {
          "description": "The cron expression after which a running process will be stopped.",
          "type": "string"
        },
        "StopStrategy": {
          "description": "The way a running process is stopped.",
          "enum": [
            "SoftStop",
            "Kill"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessScheduleDtoStopStrategy",
            "modelAsString": false
          }
        },
        "ExternalJobKey": {
          "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.",
          "type": "string"
        },
        "TimeZoneId": {
          "description": "The timezone under which the schedule will run.",
          "type": "string"
        },
        "TimeZoneIana": {
          "description": "The timezone under which the schedule will run in Iana Standard.",
          "type": "string"
        },
        "UseCalendar": {
          "description": "DEPRECATED. Specify whether the schedule uses any calendar.",
          "type": "boolean",
          "x-deprecated": true
        },
        "CalendarId": {
          "format": "int64",
          "description": "The id of the calendar that a process schedule uses.",
          "type": "integer"
        },
        "CalendarName": {
          "description": "The name of the calendar.",
          "type": "string"
        },
        "StopProcessDate": {
          "format": "date-time",
          "type": "string"
        },
        "InputArguments": {
          "description": "Input parameters that will be passed to each job created by this schedule.",
          "type": "string"
        },
        "QueueDefinitionId": {
          "format": "int64",
          "description": "The Id of the queue that uses this schedule for activation (trigger jobs when new queue items are added)",
          "type": "integer"
        },
        "QueueDefinitionName": {
          "description": "The Name of the queue that uses this schedule for activation (trigger jobs when new queue items are added)",
          "type": "string"
        },
        "ItemsActivationThreshold": {
          "format": "int64",
          "description": "The minimum number of queue items that should trigger the process activation.",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "ItemsPerJobActivationTarget": {
          "format": "int64",
          "description": "The target ratio between the number of queue items and the Total number of jobs created by a process.",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "MaxJobsForActivation": {
          "format": "int32",
          "description": "The maximum number of jobs that a process can create as result of a Queue driven activation.",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "RobotExecutorDto": {
      "description": "Stores information about a robot on which a process will be executed.",
      "type": "object",
      "properties": {
        "MachineName": {
          "description": "The name of the machine on which the robot runs the job.",
          "type": "string"
        },
        "Name": {
          "description": "The name of the robot that runs the job.",
          "type": "string"
        },
        "Description": {
          "description": "The description of the robot that runs the job.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[QueueDefinitionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[QueueDefinitionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueDefinitionDto"
          }
        }
      }
    },
    "QueueDefinitionDto": {
      "description": "The definition of a work queue. A work queue contains work items that are processed by robots.",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "A custom name for the queue.",
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a queue in order to better identify it.",
          "type": "string"
        },
        "MaxNumberOfRetries": {
          "format": "int32",
          "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
          "type": "integer"
        },
        "AcceptAutomaticallyRetry": {
          "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception.",
          "type": "boolean"
        },
        "EnforceUniqueReference": {
          "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
          "type": "boolean"
        },
        "SpecificDataJsonSchema": {
          "description": "JSON schema enforced onto the specific data field.",
          "type": "string"
        },
        "OutputDataJsonSchema": {
          "description": "JSON schema enforced onto the output data field.",
          "type": "string"
        },
        "AnalyticsDataJsonSchema": {
          "description": "JSON schema enforced onto the analytics data field.",
          "type": "string"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the queue was created.",
          "type": "string"
        },
        "ProcessScheduleId": {
          "format": "int64",
          "description": "The Id of the process schedule associated with the queue.",
          "type": "integer"
        },
        "SlaInMinutes": {
          "format": "int32",
          "description": "Queue item processing SLA on the QueueDefinition level.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "RiskSlaInMinutes": {
          "format": "int32",
          "description": "Queue Item processing Risk SLA on the QueueDefinition level.",
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        },
        "ReleaseId": {
          "format": "int64",
          "description": "The ProcessId Queue is associated with.",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[QueueItemReportableDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataQueryOptions[QueueItemCommentDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[QueueItemCommentDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItemCommentDto"
          }
        }
      }
    },
    "QueueItemCommentDto": {
      "description": "Stores information about a comment posted by an Orchestrator user on a queue item.",
      "required": [
        "Text"
      ],
      "type": "object",
      "properties": {
        "Text": {
          "description": "The comment body.",
          "maxLength": 512,
          "minLength": 0,
          "type": "string"
        },
        "QueueItemId": {
          "format": "int64",
          "description": "The Id of a Queue Item that the current item is connected to.",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "DEPRECATED. The date and time when the comment was created.",
          "type": "string",
          "x-deprecated": true
        },
        "UserId": {
          "format": "int64",
          "description": "The id of the User that authored the comment.",
          "type": "integer"
        },
        "UserName": {
          "description": "The name of the User that authored the comment.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[QueueItemEventDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[QueueItemEventDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItemEventDto"
          }
        }
      }
    },
    "QueueItemEventDto": {
      "description": "Stores information about an event on a queue item.",
      "type": "object",
      "properties": {
        "QueueItemId": {
          "format": "int64",
          "description": "The Id of a Queue Item that the current item is connected to.",
          "type": "integer"
        },
        "Timestamp": {
          "format": "date-time",
          "description": "The Date and Time when the event occured.",
          "type": "string"
        },
        "Action": {
          "description": "The Action that caused the event.",
          "enum": [
            "Create",
            "Edit",
            "Delete",
            "Status",
            "Retry"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemEventDtoAction",
            "modelAsString": false
          }
        },
        "Data": {
          "description": "The Data associated to the event.",
          "type": "string"
        },
        "UserId": {
          "format": "int64",
          "description": "The Id of the User that caused the event.",
          "type": "integer"
        },
        "UserName": {
          "description": "The Name of the User that caused the event.",
          "type": "string"
        },
        "Status": {
          "description": "Processing Status when event snapshot was taken.",
          "enum": [
            "New",
            "InProgress",
            "Failed",
            "Successful",
            "Abandoned",
            "Retried",
            "Deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemEventDtoStatus",
            "modelAsString": false
          }
        },
        "ReviewStatus": {
          "description": "Review Status when event snapshot was taken.",
          "enum": [
            "None",
            "InReview",
            "Verified",
            "Retried"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemEventDtoReviewStatus",
            "modelAsString": false
          }
        },
        "ReviewerUserId": {
          "format": "int64",
          "description": "Reviewer User Id when event snapshot was taken.",
          "type": "integer"
        },
        "ReviewerUserName": {
          "description": "Reviewer User Name when event snapshot was taken.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[QueueItemDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[QueueItemDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueItemDto"
          }
        }
      }
    },
    "QueueItemDto": {
      "description": "Defines a piece of data that can be processed by a robot and the information associated with its processing status.\r\n<para />Queue items are grouped in queues.",
      "type": "object",
      "properties": {
        "QueueDefinitionId": {
          "format": "int64",
          "description": "The Id of the parent queue.",
          "type": "integer"
        },
        "QueueDefinition": {
          "$ref": "#/definitions/QueueDefinitionDto",
          "description": "The parent queue"
        },
        "ProcessingException": {
          "$ref": "#/definitions/ProcessingExceptionDto",
          "description": "Stores the actual processing exception, if any."
        },
        "SpecificContent": {
          "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Output": {
          "description": "A collection of key value pairs containing custom data resulted after successful processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "OutputData": {
          "description": "A JSON representation of the output data generated by the item's processing.",
          "type": "string"
        },
        "Analytics": {
          "description": "A collection of key value pairs containing custom data for further analytics processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "AnalyticsData": {
          "description": "A JSON representation of the analytics data generated by the item's processing.",
          "type": "string"
        },
        "Status": {
          "description": "The processing state of the item.",
          "enum": [
            "New",
            "InProgress",
            "Failed",
            "Successful",
            "Abandoned",
            "Retried",
            "Deleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemDtoStatus",
            "modelAsString": false
          }
        },
        "ReviewStatus": {
          "description": "The review state of the item - applicable only for failed items.",
          "enum": [
            "None",
            "InReview",
            "Verified",
            "Retried"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemDtoReviewStatus",
            "modelAsString": false
          }
        },
        "ReviewerUserId": {
          "format": "int64",
          "description": "The UserId of the Reviewer, if any.",
          "type": "integer"
        },
        "ReviewerUser": {
          "$ref": "#/definitions/SimpleUserDto",
          "description": "Stores the actual reviewer user, if any."
        },
        "Key": {
          "format": "uuid",
          "description": "The unique identifier of a queue item.",
          "type": "string"
        },
        "Reference": {
          "description": "An optional, user-specified value for queue item identification.",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "ProcessingExceptionType": {
          "description": "The processing exception. If the item has not been processed or has been processed successfully it will be null.",
          "enum": [
            "ApplicationException",
            "BusinessException"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemDtoProcessingExceptionType",
            "modelAsString": false
          }
        },
        "DueDate": {
          "format": "date-time",
          "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
          "type": "string"
        },
        "RiskSlaDate": {
          "format": "date-time",
          "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
          "type": "string"
        },
        "Priority": {
          "description": "Sets the processing importance for a given item.",
          "enum": [
            "High",
            "Normal",
            "Low"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemDtoPriority",
            "modelAsString": false
          }
        },
        "Robot": {
          "$ref": "#/definitions/SimpleRobotDto",
          "description": "The robot that has processed the item, if any."
        },
        "DeferDate": {
          "format": "date-time",
          "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
          "type": "string"
        },
        "StartProcessing": {
          "format": "date-time",
          "description": "The date and time at which the item processing started. This is null if the item was not processed.",
          "type": "string"
        },
        "EndProcessing": {
          "format": "date-time",
          "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
          "type": "string"
        },
        "SecondsInPreviousAttempts": {
          "format": "int32",
          "description": "The number of seconds that the last failed processing lasted.",
          "type": "integer"
        },
        "AncestorId": {
          "format": "int64",
          "description": "The Id of an ancestor item connected to the current item.",
          "type": "integer"
        },
        "RetryNumber": {
          "format": "int32",
          "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
          "type": "integer"
        },
        "SpecificData": {
          "description": "A JSON representation of the specific content.",
          "type": "string"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the item was created.",
          "type": "string"
        },
        "Progress": {
          "description": "String field which is used to keep track of the business flow progress.",
          "type": "string"
        },
        "RowVersion": {
          "format": "byte",
          "description": "Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ProcessingExceptionDto": {
      "description": "Stores information about exceptions thrown while processing failed queue items.",
      "type": "object",
      "properties": {
        "Reason": {
          "description": "The reason the processing failed.",
          "type": "string"
        },
        "Details": {
          "description": "Stores additional details about the exception.",
          "type": "string"
        },
        "Type": {
          "description": "The processing exception type, if any.",
          "enum": [
            "ApplicationException",
            "BusinessException"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ProcessingExceptionDtoType",
            "modelAsString": false
          }
        },
        "AssociatedImageFilePath": {
          "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.",
          "type": "string"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "Time when the exception occurred",
          "type": "string"
        }
      }
    },
    "QueueItemSpecificContent": {
      "description": "A collection of key value pairs containing custom data associated to a queue item.",
      "type": "object",
      "properties": {}
    },
    "QueueItemOutput": {
      "description": "A collection of key value pairs containing custom data resulted after successful processing.",
      "type": "object",
      "properties": {}
    },
    "QueueItemAnalytics": {
      "type": "object",
      "properties": {}
    },
    "SimpleUserDto": {
      "description": "Entity derived from UserDto. Is shares all the properties of the base entity except the navigation properties.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the person for which the user is created.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "Surname": {
          "description": "The surname of the person for which the user is created.",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "UserName": {
          "description": "The name used to login to Orchestrator.",
          "type": "string"
        },
        "Domain": {
          "description": "The domain from which the user is imported",
          "type": "string"
        },
        "FullName": {
          "description": "The full name of the person constructed with the format Name Surname.",
          "type": "string"
        },
        "EmailAddress": {
          "description": "The e-mail address associated with the user.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "IsEmailConfirmed": {
          "description": "States if the email address is valid or not.",
          "type": "boolean"
        },
        "LastLoginTime": {
          "format": "date-time",
          "description": "The date and time when the user last logged in, or null if the user never logged in.",
          "type": "string"
        },
        "IsActive": {
          "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
          "type": "boolean"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the user was created.",
          "type": "string"
        },
        "AuthenticationSource": {
          "description": "The source which authenticated this user.",
          "type": "string"
        },
        "Password": {
          "description": "The password used during application login.",
          "type": "string"
        },
        "IsExternalLicensed": {
          "type": "boolean"
        },
        "UserRoles": {
          "description": "The collection of roles associated with the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleDto"
          }
        },
        "RolesList": {
          "description": "The collection of role names associated with the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LoginProviders": {
          "description": "The collection of entities that can authenticate the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OrganizationUnits": {
          "description": "The collection of organization units associated with the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationUnitDto"
          }
        },
        "TenantId": {
          "format": "int32",
          "description": "The id of the tenant owning the user.",
          "type": "integer"
        },
        "TenancyName": {
          "description": "The name of the tenant owning the user.",
          "type": "string"
        },
        "TenantDisplayName": {
          "description": "The display name of the tenant owning the user.",
          "type": "string"
        },
        "TenantKey": {
          "description": "The key of the tenant owning the user.",
          "type": "string"
        },
        "Type": {
          "description": "The user type.",
          "enum": [
            "User",
            "Robot",
            "DirectoryUser",
            "DirectoryGroup"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleUserDtoType",
            "modelAsString": false
          }
        },
        "ProvisionType": {
          "description": "The user type.",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleUserDtoProvisionType",
            "modelAsString": false
          }
        },
        "LicenseType": {
          "description": "The user's license type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SimpleUserDtoLicenseType",
            "modelAsString": false
          }
        },
        "RobotProvision": {
          "$ref": "#/definitions/AttendedRobotDto",
          "description": "Attended Robot provisioning settings"
        },
        "UnattendedRobot": {
          "$ref": "#/definitions/UnattendedRobotDto",
          "description": "Unattended Robot provisioning settings"
        },
        "NotificationSubscription": {
          "$ref": "#/definitions/UserNotificationSubscription",
          "description": "User can choose which notifications does he want to receive"
        },
        "Key": {
          "format": "uuid",
          "description": "Unique key for a user",
          "type": "string"
        },
        "MayHaveUserSession": {
          "description": "Specifies whether this user is allowed to have a User session (default: true)",
          "type": "boolean"
        },
        "MayHaveRobotSession": {
          "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)",
          "type": "boolean"
        },
        "MayHaveUnattendedSession": {
          "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)",
          "type": "boolean"
        },
        "BypassBasicAuthRestriction": {
          "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: false)",
          "type": "boolean"
        },
        "MayHavePersonalWorkspace": {
          "description": "Specifies whether this user is allowed to have a Personal Workspace",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "QueueItemDataDto": {
      "description": "Defines the work item content.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the queue into which the item will be added.",
          "type": "string"
        },
        "Priority": {
          "description": "Sets the processing importance for a given item.",
          "enum": [
            "High",
            "Normal",
            "Low"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueItemDataDtoPriority",
            "modelAsString": false
          }
        },
        "SpecificContent": {
          "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "DeferDate": {
          "format": "date-time",
          "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
          "type": "string"
        },
        "RiskSlaDate": {
          "format": "date-time",
          "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
          "type": "string"
        },
        "Reference": {
          "description": "An optional, user-specified value for queue item identification.",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "Progress": {
          "description": "String field which is used to keep track of the business flow progress.",
          "type": "string"
        }
      }
    },
    "LongVersionedEntity": {
      "type": "object",
      "properties": {
        "RowVersion": {
          "format": "byte",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "BulkOperationResponseDto[Int64]": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        },
        "Message": {
          "type": "string"
        },
        "FailedItems": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "ODataQueryOptions[SimpleUserDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[SimpleUserDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleUserDto"
          }
        }
      }
    },
    "ODataValue[IEnumerable[QueueProcessingRecordDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueProcessingRecordDto"
          }
        }
      }
    },
    "QueueProcessingRecordDto": {
      "description": "Stores aggregated report information about the processing status of all the items from a given queue in a specific time period.",
      "type": "object",
      "properties": {
        "QueueDefinitionId": {
          "format": "int64",
          "description": "The Id of the queue for which the report is done.",
          "type": "integer"
        },
        "UiQueueMetadata": {
          "$ref": "#/definitions/QueueDefinitionDto",
          "description": "The queue for which the report is done."
        },
        "ProcessingTime": {
          "format": "date-time",
          "description": "The date and time when the report is computed.",
          "type": "string"
        },
        "ReportType": {
          "description": "The aggregation period used in the report.",
          "enum": [
            "All",
            "Minute",
            "Hour",
            "Day"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "QueueProcessingRecordDtoReportType",
            "modelAsString": false
          }
        },
        "NumberOfRemainingTransactions": {
          "format": "int32",
          "description": "The number of unprocessed (new) items.",
          "type": "integer"
        },
        "NumberOfInProgressTransactions": {
          "format": "int32",
          "description": "The number of items in progress.",
          "type": "integer"
        },
        "NumberOfApplicationExceptions": {
          "format": "int32",
          "description": "The total number of application exceptions thrown while processing queue items in the given time period.",
          "type": "integer"
        },
        "NumberOfBusinessExceptions": {
          "format": "int32",
          "description": "The total number of business exceptions thrown while processing queue items in the given time period.",
          "type": "integer"
        },
        "NumberOfSuccessfulTransactions": {
          "format": "int32",
          "description": "The total number of successfully processed queue items in the given time period.",
          "type": "integer"
        },
        "NumberOfRetriedItems": {
          "format": "int32",
          "description": "The total number of processing retries occurred in the given time period.",
          "type": "integer"
        },
        "ApplicationExceptionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing queue items that failed with application exception in the given time period.",
          "type": "number"
        },
        "BusinessExceptionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing queue items that failed with business exception in the given time period.",
          "type": "number"
        },
        "SuccessfulTransactionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing successful queue items in the given time period.",
          "type": "number"
        },
        "TotalNumberOfTransactions": {
          "format": "int32",
          "description": "The total number of item processing transactions, both failed and successful.",
          "type": "integer"
        },
        "TenantId": {
          "format": "int32",
          "description": "The Id of the queue tenant.",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[QueueProcessingStatusDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[QueueProcessingStatusDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueueProcessingStatusDto"
          }
        }
      }
    },
    "QueueProcessingStatusDto": {
      "description": "Stores aggregated report information about the processing status of all the items from a given queue.",
      "type": "object",
      "properties": {
        "ItemsToProcess": {
          "format": "int32",
          "description": "The total number of items in the queue with the status New.",
          "type": "integer"
        },
        "ItemsInProgress": {
          "format": "int32",
          "description": "The total number of items in the queue with the status InProgress.",
          "type": "integer"
        },
        "QueueDefinitionId": {
          "format": "int64",
          "description": "The Id of the queue for which the report is done.",
          "type": "integer"
        },
        "QueueDefinitionName": {
          "description": "The name of the queue for which the report is done.",
          "type": "string"
        },
        "QueueDefinitionDescription": {
          "description": "The description of the queue for which the report is done.",
          "type": "string"
        },
        "QueueDefinitionAcceptAutomaticallyRetry": {
          "description": "States whether the queue accepts automatic item retry or not.",
          "type": "boolean"
        },
        "QueueDefinitionMaxNumberOfRetries": {
          "format": "int32",
          "description": "The maximum number of retries allowed for any item of the queue.",
          "type": "integer"
        },
        "QueueDefinitionEnforceUniqueReference": {
          "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
          "type": "boolean"
        },
        "ProcessingMeanTime": {
          "format": "decimal",
          "description": "The average time spent processing a successful item.",
          "type": "number"
        },
        "SuccessfulTransactionsNo": {
          "format": "int32",
          "description": "The total number of successfully processed items.",
          "type": "integer"
        },
        "ApplicationExceptionsNo": {
          "format": "int32",
          "description": "The total number of application exceptions thrown while processing queue items.",
          "type": "integer"
        },
        "BusinessExceptionsNo": {
          "format": "int32",
          "description": "The total number of business exceptions thrown while processing queue items.",
          "type": "integer"
        },
        "SuccessfulTransactionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing successful queue items.",
          "type": "number"
        },
        "ApplicationExceptionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing queue items that failed with application exception.",
          "type": "number"
        },
        "BusinessExceptionsProcessingTime": {
          "format": "decimal",
          "description": "The total number of seconds spent processing queue items that failed with business exception.",
          "type": "number"
        },
        "TotalNumberOfTransactions": {
          "format": "int32",
          "description": "The total number of item processing transactions, both failed and successful.",
          "type": "integer"
        },
        "LastProcessed": {
          "format": "date-time",
          "description": "The date and time of the last item processing.",
          "type": "string"
        },
        "ReleaseName": {
          "description": "The name of the process associated with the queue.",
          "type": "string"
        },
        "SpecificDataJsonSchemaExists": {
          "description": "Optional JSON schema enforced onto the specific data field is set.",
          "type": "boolean"
        },
        "OutputDataJsonSchemaExists": {
          "description": "Optional JSON schema enforced onto the output data field is set.",
          "type": "boolean"
        },
        "AnalyticsDataJsonSchemaExists": {
          "description": "Optional JSON schema enforced onto the analytics data field is set.",
          "type": "boolean"
        },
        "ProcessScheduleId": {
          "format": "int64",
          "description": "The Id of the process schedule associated with the queue.",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TransactionDataDto": {
      "description": "Stores data sent when processing of an existing or a new item starts.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of the queue in which to search for the next item or in which to insert the item before marking it as InProgress and sending it to the robot.",
          "type": "string"
        },
        "RobotIdentifier": {
          "format": "uuid",
          "description": "The unique key identifying the robot that sent the request.",
          "type": "string"
        },
        "SpecificContent": {
          "description": "If not null a new item will be added to the queue with this content before being moved to InProgress state and returned to the robot for processing.\r\n<para />If null the next available item in the list will be moved to InProgress state and returned to the robot for processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "DeferDate": {
          "format": "date-time",
          "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
          "type": "string"
        },
        "Reference": {
          "description": "An optional, user-specified value for queue item identification.",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "ReferenceFilterOption": {
          "description": "Declares the strategy used to filter the Reference value.",
          "enum": [
            "Equals",
            "StartsWith"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TransactionDataDtoReferenceFilterOption",
            "modelAsString": false
          }
        }
      }
    },
    "BulkOperationResponseDto[FailedQueueItemDto]": {
      "type": "object",
      "properties": {
        "Success": {
          "type": "boolean"
        },
        "Message": {
          "type": "string"
        },
        "FailedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FailedQueueItemDto"
          }
        }
      }
    },
    "FailedQueueItemDto": {
      "description": "Stores the result of the BulkAddQueueItems operation.",
      "type": "object",
      "properties": {
        "Ordinal": {
          "format": "int32",
          "description": "Ordinal of the item that failed.\r\nA value of null means that offending item is unknown.",
          "type": "integer"
        },
        "ErrorCode": {
          "description": "Error code.",
          "enum": [
            "Unknown",
            "MultipleErrors",
            "InvalidRequest",
            "NameAlreadyUsed",
            "ItemNotFound",
            "StringProtectFailed",
            "ItemAlreadyExists",
            "ErrorDeleting",
            "ErrorInserting",
            "ErrorUpdating",
            "ErrorSendingEmail",
            "InvalidArgument",
            "SqlAcquireLockFailure",
            "LibrariesFeedInUse",
            "HasDependentItems",
            "ItemIsInUse",
            "ParameterMissing",
            "ParameterInvalid",
            "DuplicateReference",
            "ForbiddenOperation",
            "InvalidUser",
            "FeatureDisabled",
            "OptimisticConcurrency",
            "EncryptionException",
            "CannotCreateOrMigrateTenantDb",
            "TenantIsRequired",
            "FieldNotEditable",
            "ServiceUnavailable",
            "SharedAccessSignatureFailure",
            "ProviderNotSupported",
            "InvalidAuditRelationship",
            "InvalidOrganizationUnit",
            "RequiredOrganizationUnit",
            "OrganizationUnitNotEditable",
            "MachineAlreadyPairedWithDifferentLicenseKey",
            "NoAvailableLicenses",
            "HasAttachedRobots",
            "InvalidMachineKey",
            "MachineNameRequired",
            "UserNameRequired",
            "CannotDeleteBusyRobot",
            "MachineNameCannotChange",
            "MachineLicenseCannotChange",
            "CannotUpdateBusyRobot",
            "MachineTypeCannotChange",
            "UserNameInvalid",
            "SessionAlreadyActive",
            "CannotAssignMachineToFloatingRobot",
            "CannotUpdateRobotHostingType",
            "CannotAssignMachineTemplateToStandardRobot",
            "CannotUpdateActiveSession",
            "MachineTemplateUniqueLicenseKey",
            "InvalidMachineId",
            "InvalidNonProductionMachineSlots",
            "InvalidUnattendedMachineSlots",
            "DisconnectedRobot",
            "UnresponsiveRobot",
            "UnsupportedFloatingSessionRobotType",
            "UnsupportedStandardSessionRobotType",
            "EnvironmentDeploymentConflict",
            "ServerConflict",
            "ActionAlreadyPerformed",
            "UnavailableResources",
            "UserIsDeleted",
            "UserIsLockedOut",
            "ChangePassword",
            "PasswordExpired",
            "InvalidPassword",
            "CannotDeleteStaticRole",
            "UserNotEditable",
            "DomainUnreachable",
            "PasswordResetFailed",
            "ConfirmEmailFailed",
            "CannotUsePreviousPassword",
            "RoleIsNotEditable",
            "UserNotFoundInDomain",
            "CannotUpdateUsername",
            "InvalidLoginMethod",
            "InvalidUsernameOrPassword",
            "MultipleMatchingUsers",
            "CannotCallFromHost",
            "CreateNotAllowed",
            "ProvisionError",
            "EmptyDomainOrUsername",
            "NotDirectoryUserOrGroup",
            "CredentialAssetEmptyPasswordForNewUser",
            "CredentialAssetEmptyForNewRobot",
            "AssetTypeNonUpdatable",
            "AssetNotAvailableForRobot",
            "InvalidCron",
            "ScheduleWillNeverRun",
            "ScheduleMisfired",
            "ScheduleInvalidTimeZone",
            "InvalidScheduleKey",
            "ScheduleIsNotEnabled",
            "ScheduleNotAssociatedWithAQueue",
            "ScheduleCannotBeAssociatedWithAQueue",
            "UserIsAssignedToTriggers",
            "InvalidCronRecurrence",
            "DownloadUnavailable",
            "CannotConnectToPackagesRepository",
            "NotSupportedByExternalFeeds",
            "ErrorDownloading",
            "InvalidPackageDetails",
            "TenantFeedInUse",
            "InvalidProcessKey",
            "JobTypeCannotBeStopped",
            "JobCannotBeCancelled",
            "JobCannotBeTerminated",
            "VersionNotFound",
            "ProcessNotFound",
            "HasAttachedProcesses",
            "InvalidExtension",
            "InvalidPackageCount",
            "PreviousVersionNotFound",
            "HasRunningJobs",
            "TenantNotFound",
            "PendingJobsAlreadyExist",
            "InvalidStartJobRobotIds",
            "UnregisteredCannotStartJobs",
            "LicenseExpiredCannotStartJobs",
            "InvalidReleaseKey",
            "InvalidPackageVersion",
            "TenantIsDisabled",
            "PackageNotFound",
            "NoRobotsAvailable",
            "PathTooLong",
            "JobExecutionFaulted",
            "InvalidJobIdOrRobotKey",
            "InvalidJobStateForSuspend",
            "JobNotFoundByPersistenceId",
            "ErrorPackagePublish",
            "ErrorSavingPackageDefinition",
            "MaxNumberJobsAlreadyExist",
            "HasSlaEnabedQueuesAssociated",
            "VersionsManagedAutomatically",
            "InaccessibleFeed",
            "MultipleEntryPointsJobExecutionNotSupported",
            "CyberArkEditPasswordNotAllowed",
            "LogMessageNotFound",
            "LogRobotNameNotFound",
            "EncryptionKeyNotFound",
            "EncryptionKeyIncorrectFormat",
            "AzureKeyVaultRetrieveIssue",
            "AzureKeyVaultStoreIssue",
            "TransactionReferenceRequired",
            "InvalidTransactionProgressStatus",
            "TransactionNotStarted",
            "ReviewerNotAvailable",
            "QueueDefinitionParametersCannotChange",
            "QueueProcessingApplicationException",
            "QueueItemSchemaViolationException",
            "InvalidQueueSchemaDefinition",
            "InvalidQueueSchemaDefinitionChange",
            "InvalidQueueSchemaType",
            "QueueSchemaDefinitionNotFound",
            "SlaEnableQueueDefinitionFailure",
            "QueueSlaAtPredictedRisk",
            "QueueSlaPredictedBreach",
            "QueueItemContentSizeExceeded",
            "LicenseNotFound",
            "LicenseExpired",
            "LicenseAlreadyInUse",
            "InvalidLicenseFormat",
            "LicenseLimitExceeded",
            "UnattendedLicenseLimitExceeded",
            "NonProductionLicenseLimitExceeded",
            "AttendedLicenseLimitExceeded",
            "DevelopmentLicenseLimitExceeded",
            "RobotFailedToAcquireLicense",
            "NonProductionSlotsLimitExceeded",
            "UnattendedSlotsLimitExceeded",
            "LicenseUnregistered",
            "LicenseNotAvailable",
            "NotEnoughAvailableSlots",
            "NotEnoughRuntimeLicenses",
            "SlotsExceedLicenseLimit",
            "NotEnoughAvailableLicenses",
            "HostLicenseLimitExceeded",
            "NoHostLicense",
            "LicenseNewInvalidArguments",
            "LicenseMachineDisabled",
            "CannotDisableBusyMachine",
            "HeadlessSlotsLimitExceeded",
            "HeadlessLicenseLimitExceeded",
            "TestAutomationSlotsLimitExceeded",
            "TestAutomationLicenseLimitExceeded",
            "ArgumentMetadataExtract",
            "ArgumentMetadataValidation",
            "ArgumentDefinitionExtract",
            "ArgumentValueExtract",
            "ArgumentValidation",
            "PackageMetadataExtract",
            "PackageMetadataValidation",
            "UnknownWebhookEventType",
            "WebhookQuotaReached",
            "ExecutionMediaStorageUnavailable",
            "ExecutionMediaNotAvailableForJob",
            "ExecutionMediaContentNotAvailable",
            "CannotDeleteDefaultCredentialStore",
            "CredentialStoreNotFound",
            "UnknownCredentialStoreType",
            "InvalidCredentialStoreConfiguration",
            "FailedToReadFromCredentialStore",
            "FailedToWriteToCredentialStore",
            "CannotDeleteNonEmptyCredentialStore",
            "ContentLengthTooLarge",
            "TaskAssignmentError",
            "TaskCompletionError",
            "TaskAssigneeMismatchError",
            "TaskFormInvalidFormLayout",
            "TaskFormInvalidFormPayload",
            "TaskFormMultipleActions",
            "TaskFormNoAction",
            "TaskFormInvalidAction",
            "TasksNotAllowedInModernFolder",
            "InvalidSecureStoreContext",
            "MailSmtpSettingsError",
            "CannotDeleteCalendarWhenUsedBySchedule",
            "MandatoryPropertiesForRootFolderNotSpecified",
            "IncompatibleFolderProperties",
            "NoHierarchyAllowedForClassicFolders",
            "MaximumFolderHierarchyDepthReached",
            "CannotChangeRobotProvisionType",
            "CannotChangeFolderPermissionModel",
            "CannotEditFolderParent",
            "EntitiesRequiredForAssignmentNotFound",
            "CannotAssignRolesToNonFineGrainedFolders",
            "InvalidFolderDisplayName",
            "AssociationAlreadyExists",
            "UserDoesNotHaveAccessToFolder",
            "CannotChangeRobotUserFolderAssignments",
            "CannotAssignMachineToClassicFolder",
            "StrategyNotAvailableInModernFolder",
            "StrategyNotAvailableInClassicFolder",
            "ValidModernFolderIdRequired",
            "NoMachineAssociatedWithFolder",
            "MaintenanceActive",
            "TenantMaintenanceActive",
            "TenantMaintenanceNotActive",
            "AnalyticsNotAuthorized",
            "AnalyticsTenantNotProvisioned",
            "AnalyticsUserIsHostUser",
            "AnalyticsUserHasNoEmail",
            "AnalyticsUserNotFound",
            "AnalyticsAdminEmailProhibited",
            "InvalidStorageProvider",
            "BucketIsReadOnly",
            "InvalidBlobFilePath",
            "UnavailableStorageProvider",
            "BucketDoesNotExists",
            "TestSetNotNewOnCreate",
            "TestAutomationKeyMismatch",
            "TestSetNewOnUpdate",
            "TestSetEmpty",
            "TestSetDuplicatePackages",
            "TestSetVersionMaskInvalid",
            "TestSetDefinitionNotFound",
            "TestSetTestCaseInvalid",
            "TestSetTestCaseVersionInvalid",
            "TestAutomationVersionInvalid",
            "TestSetExecutionEmptyTestSet",
            "TestSetExecutionCreateFailed",
            "TestSetExecutionDuplicateUniqueIds",
            "TestCaseAssertionScreenshotMimeTypeMissing",
            "TestCaseAssertionScreenshotMissing",
            "InvalidTenantMoveStatus",
            "TenantMoveIdConflict",
            "TenantMoveMigrationConflict",
            "MediaFileNotFound",
            "MediaFileNotFoundForKey",
            "InvalidMediaFilesUpload",
            "MediaFileTypeNotSupported"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FailedQueueItemDtoErrorCode",
            "modelAsString": false
          }
        },
        "ErrorMessage": {
          "description": "Error message.",
          "type": "string"
        }
      }
    },
    "TransactionResultDto": {
      "description": "Stores data sent when processing an item ended.",
      "type": "object",
      "properties": {
        "IsSuccessful": {
          "description": "States if the processing was successful or not.",
          "type": "boolean"
        },
        "ProcessingException": {
          "$ref": "#/definitions/ProcessingExceptionDto",
          "description": "The details of the processing exception thrown if the item failed."
        },
        "DeferDate": {
          "format": "date-time",
          "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
          "type": "string"
        },
        "DueDate": {
          "format": "date-time",
          "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
          "type": "string"
        },
        "Output": {
          "description": "A collection of key value pairs containing custom data resulted after successful processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Analytics": {
          "description": "A collection of key value pairs containing custom data for further analytics processing.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Progress": {
          "description": "String field which is used to keep track of the business flow progress.",
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[ReleaseDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[ReleaseDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDto"
          }
        }
      }
    },
    "ReleaseDto": {
      "required": [
        "ProcessKey",
        "ProcessVersion",
        "Name"
      ],
      "type": "object",
      "properties": {
        "Key": {
          "description": "A unique identifier associated to each release.",
          "type": "string"
        },
        "ProcessKey": {
          "description": "The unique identifier of the process associated with the release.",
          "type": "string"
        },
        "ProcessVersion": {
          "description": "The version of the process associated with the release.",
          "type": "string"
        },
        "IsLatestVersion": {
          "description": "States whether the version of process associated with the release is latest or not.",
          "type": "boolean"
        },
        "IsProcessDeleted": {
          "description": "States whether the process associated with the release is deleted or not.",
          "type": "boolean"
        },
        "Description": {
          "description": "Used to add additional information about a release in order to better identify it.",
          "type": "string"
        },
        "Name": {
          "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName.",
          "type": "string"
        },
        "EnvironmentId": {
          "format": "int64",
          "description": "The Id of the environment associated with the release.",
          "type": "integer"
        },
        "EnvironmentName": {
          "description": "The name of the environment associated with the release.",
          "type": "string"
        },
        "Environment": {
          "$ref": "#/definitions/EnvironmentDto",
          "description": "The environment associated with the release."
        },
        "InputArguments": {
          "description": "Input parameters in JSON format to be passed as default values to job execution.",
          "type": "string"
        },
        "ProcessType": {
          "enum": [
            "Process",
            "TestAutomationProcess"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ReleaseDtoProcessType",
            "modelAsString": false
          }
        },
        "SupportsMultipleEntryPoints": {
          "type": "boolean"
        },
        "RequiresUserInteraction": {
          "type": "boolean"
        },
        "CurrentVersion": {
          "$ref": "#/definitions/ReleaseVersionDto",
          "description": "The release version associated with the current release."
        },
        "ReleaseVersions": {
          "description": "The collection of release versions that current release had over time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseVersionDto"
          }
        },
        "Arguments": {
          "$ref": "#/definitions/ArgumentMetadata",
          "description": "Input/Output arguments consumed/produced by the release"
        },
        "ProcessSettings": {
          "$ref": "#/definitions/ProcessSettingsDto"
        },
        "AutoUpdate": {
          "type": "boolean"
        },
        "JobPriority": {
          "description": "The execution priority. If null, it defaults to Normal.",
          "enum": [
            "Low",
            "Normal",
            "High"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ReleaseDtoJobPriority",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[LogDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[LogDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogDto"
          }
        }
      }
    },
    "LogDto": {
      "description": "Logs generated by Robots and execution reports. Can be stored in ElasticSearch and/or to a local SQL database.\r\n<para />Note: The endpoint for this type is /odata/RobotLogs URL.",
      "type": "object",
      "properties": {
        "Level": {
          "description": "Defines the log severity.",
          "enum": [
            "Trace",
            "Debug",
            "Info",
            "Warn",
            "Error",
            "Fatal"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogDtoLevel",
            "modelAsString": false
          }
        },
        "WindowsIdentity": {
          "description": "The name of the user that performed the action that was logged.",
          "type": "string"
        },
        "ProcessName": {
          "description": "The name of the process.",
          "type": "string"
        },
        "TimeStamp": {
          "format": "date-time",
          "description": "The exact date and time the action was performed.",
          "type": "string"
        },
        "Message": {
          "description": "The log message. This can also be a message logged through the Log Message activity in UiPath Studio.",
          "type": "string"
        },
        "JobKey": {
          "format": "uuid",
          "description": "The key of the job running the process that generated the log, if any.",
          "type": "string"
        },
        "RawMessage": {
          "description": "A JSON format message containing all the above fields.",
          "type": "string"
        },
        "RobotName": {
          "description": "The name of the Robot that generated the log.",
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the Machine on which the Robot that generated the log is running.",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataValue[IEnumerable[KeyValuePair[String,String]]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair[String,String]"
          }
        }
      }
    },
    "KeyValuePair[String,String]": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string",
          "readOnly": true
        },
        "Value": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ODataQueryOptions[RoleDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[RoleDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDto"
          }
        }
      }
    },
    "RoleDto": {
      "description": "A role acts as a grouping of permissions. Roles are associated with users to provide application authorization.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "A custom name for the role.",
          "type": "string"
        },
        "DisplayName": {
          "description": "An alternative name used for UI display.",
          "type": "string"
        },
        "Groups": {
          "description": "Allows grouping multiple roles together.",
          "type": "string"
        },
        "IsStatic": {
          "description": "States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted.",
          "type": "boolean"
        },
        "IsEditable": {
          "description": "States whether the permissions for this role can be modified or not.",
          "type": "boolean"
        },
        "Permissions": {
          "description": "The collection of application permissions associated with the role.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionDto"
          }
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[SessionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[SessionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SessionDto"
          }
        }
      }
    },
    "SessionDto": {
      "description": "Stores information about the last status reported to Orchestrator by a registered robot.",
      "type": "object",
      "properties": {
        "Robot": {
          "$ref": "#/definitions/RobotWithLicenseDto",
          "description": "The Robot for which the information is stored."
        },
        "HostMachineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the Machine.",
          "type": "integer"
        },
        "MachineName": {
          "description": "The Machine's name.",
          "type": "string"
        },
        "State": {
          "description": "The value of the last reported status.",
          "enum": [
            "Available",
            "Busy",
            "Disconnected",
            "Unknown"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SessionDtoState",
            "modelAsString": false
          }
        },
        "Job": {
          "$ref": "#/definitions/JobDto",
          "description": "The Job that is executed by the robot."
        },
        "ReportingTime": {
          "format": "date-time",
          "description": "The date and time when the last heartbeat came.",
          "type": "string"
        },
        "Info": {
          "description": "May store additional information about the robot state.",
          "type": "string"
        },
        "IsUnresponsive": {
          "description": "If the robot did not report status for longer than 120 seconds.",
          "type": "boolean"
        },
        "LicenseErrorCode": {
          "description": "DEPRECATED. Last licensing error status.",
          "enum": [
            "NoLicense",
            "LicenseExpired",
            "LicenseUnregistered",
            "NoAvailableLicenses",
            "NotEnoughAvailableSlots",
            "NotEnoughRuntimeLicenses",
            "LicenseIsAlreadyInUse",
            "InvalidRequest",
            "SlotsExceedLicenseLimit",
            "RuntimeDisabled",
            "ExternalNotSupported",
            "UsageExceedsLicenseLimit"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SessionDtoLicenseErrorCode",
            "modelAsString": false
          },
          "x-deprecated": true
        },
        "OrganizationUnitId": {
          "format": "int64",
          "description": "The folder Id.",
          "type": "integer"
        },
        "FolderName": {
          "description": "The folder display name.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "RobotWithLicenseDto": {
      "description": "Entity derived from RobotDto. Is shares all the properties of the base entity and includes the license field.",
      "required": [
        "Name",
        "Username",
        "Type",
        "HostingType"
      ],
      "type": "object",
      "properties": {
        "License": {
          "$ref": "#/definitions/RobotLicenseDto",
          "description": "The attached license"
        },
        "LicenseKey": {
          "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "MachineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the machine a Robot is hosted on",
          "type": "integer"
        },
        "Name": {
          "description": "A custom name for the robot.",
          "maxLength": 19,
          "minLength": 0,
          "type": "string"
        },
        "Username": {
          "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "ExternalName": {
          "description": "Contains the value of the key in the external store used to store the password.",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        },
        "Description": {
          "description": "Used to add additional information about a robot in order to better identify it.",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "Version": {
          "description": "DEPRECATED. The Robot's Version.",
          "type": "string",
          "x-deprecated": true
        },
        "Type": {
          "description": "The Robot type.",
          "enum": [
            "NonProduction",
            "Attended",
            "Unattended",
            "Studio",
            "Development",
            "StudioX",
            "Headless",
            "StudioPro",
            "TestAutomation"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotWithLicenseDtoType",
            "modelAsString": false
          }
        },
        "HostingType": {
          "description": "The Robot hosting type (Standard / Floating).",
          "enum": [
            "Standard",
            "Floating"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotWithLicenseDtoHostingType",
            "modelAsString": false
          }
        },
        "ProvisionType": {
          "description": "The Robot provision type.",
          "enum": [
            "Manual",
            "Automatic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotWithLicenseDtoProvisionType",
            "modelAsString": false
          }
        },
        "Password": {
          "description": "The Windows password associated with the machine username.",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "CredentialStoreId": {
          "format": "int64",
          "description": "The Credential Store used to store the password.",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "description": "The associated user's Id.",
          "type": "integer"
        },
        "CredentialType": {
          "description": "The robot credentials type (Default/ SmartCard)",
          "enum": [
            "Default",
            "SmartCard"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RobotWithLicenseDtoCredentialType",
            "modelAsString": false
          }
        },
        "Environments": {
          "description": "The collection of environments the robot is part of.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentDto"
          }
        },
        "RobotEnvironments": {
          "description": "The comma separated textual representation of environment names the robot is part of.",
          "type": "string"
        },
        "ExecutionSettings": {
          "description": "A collection of key value pairs containing execution settings for this robot.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "IsExternalLicensed": {
          "description": "Flag to indicate if the robot uses an external license",
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "RobotLicenseDto": {
      "description": "Entity that represents an acquired Robot license",
      "type": "object",
      "properties": {
        "RobotId": {
          "format": "int64",
          "description": "The associated Robot's Id",
          "type": "integer"
        },
        "Timestamp": {
          "format": "date-time",
          "description": "The date when the license was acquired",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[MachineSessionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[MachineSessionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MachineSessionDto"
          }
        }
      }
    },
    "MachineSessionDto": {
      "type": "object",
      "properties": {
        "Version": {
          "type": "string"
        },
        "ServiceUserName": {
          "type": "string"
        },
        "Robot": {
          "$ref": "#/definitions/RobotWithLicenseDto",
          "description": "The Robot for which the information is stored."
        },
        "HostMachineName": {
          "description": "The name of the machine a Robot is hosted on.",
          "type": "string"
        },
        "MachineId": {
          "format": "int64",
          "description": "The Id of the Machine.",
          "type": "integer"
        },
        "MachineName": {
          "description": "The Machine's name.",
          "type": "string"
        },
        "State": {
          "description": "The value of the last reported status.",
          "enum": [
            "Available",
            "Busy",
            "Disconnected",
            "Unknown"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MachineSessionDtoState",
            "modelAsString": false
          }
        },
        "Job": {
          "$ref": "#/definitions/JobDto",
          "description": "The Job that is executed by the robot."
        },
        "ReportingTime": {
          "format": "date-time",
          "description": "The date and time when the last heartbeat came.",
          "type": "string"
        },
        "Info": {
          "description": "May store additional information about the robot state.",
          "type": "string"
        },
        "IsUnresponsive": {
          "description": "If the robot did not report status for longer than 120 seconds.",
          "type": "boolean"
        },
        "LicenseErrorCode": {
          "description": "DEPRECATED. Last licensing error status.",
          "enum": [
            "NoLicense",
            "LicenseExpired",
            "LicenseUnregistered",
            "NoAvailableLicenses",
            "NotEnoughAvailableSlots",
            "NotEnoughRuntimeLicenses",
            "LicenseIsAlreadyInUse",
            "InvalidRequest",
            "SlotsExceedLicenseLimit",
            "RuntimeDisabled",
            "ExternalNotSupported",
            "UsageExceedsLicenseLimit"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "MachineSessionDtoLicenseErrorCode",
            "modelAsString": false
          },
          "x-deprecated": true
        },
        "OrganizationUnitId": {
          "format": "int64",
          "description": "The folder Id.",
          "type": "integer"
        },
        "FolderName": {
          "description": "The folder display name.",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[SettingsDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[SettingsDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettingsDto"
          }
        }
      }
    },
    "SettingsDto": {
      "description": "Used to store various predefined application configurations like time zone or account e-mail information.",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The name of a specific setting (e.g. Abp.Net.Mail.DefaultFromAddress).",
          "type": "string"
        },
        "Value": {
          "description": "The value assigned to a specific setting (e.g. admin@mydomain.com).",
          "type": "string"
        },
        "Scope": {
          "description": "The scope of a specific setting.",
          "enum": [
            "Application",
            "Tenant",
            "User",
            "All"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SettingsDtoScope",
            "modelAsString": false
          }
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "ExecutionSettingsConfiguration": {
      "type": "object",
      "properties": {
        "Scope": {
          "enum": [
            "Global",
            "Robot"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ExecutionSettingsConfigurationScope",
            "modelAsString": false
          }
        },
        "Configuration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionSettingDefinition"
          }
        }
      }
    },
    "ExecutionSettingDefinition": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "ValueType": {
          "type": "string"
        },
        "DefaultValue": {
          "type": "string"
        },
        "PossibleValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataValue[IEnumerable[ConfigurationEntry]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurationEntry"
          }
        }
      }
    },
    "ConfigurationEntry": {
      "type": "object",
      "properties": {
        "Key": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "ValueType": {
          "enum": [
            "String",
            "Number",
            "Choice",
            "Boolean",
            "Section",
            "Secret"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConfigurationEntryValueType",
            "modelAsString": false
          }
        }
      }
    },
    "ListResultDto[NameValueDto]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueDto"
          }
        }
      }
    },
    "NameValueDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "ListResultDto[LanguageInfo]": {
      "type": "object",
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInfo"
          }
        }
      }
    },
    "LanguageInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "Icon": {
          "type": "string"
        },
        "IsDefault": {
          "type": "boolean"
        },
        "IsDisabled": {
          "type": "boolean"
        },
        "IsRightToLeft": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "CalendarDto": {
      "type": "object",
      "properties": {
        "TimeZoneId": {
          "type": "string"
        },
        "ExcludedDates": {
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string"
          }
        }
      }
    },
    "SmtpSettingModel": {
      "required": [
        "Host",
        "Port"
      ],
      "type": "object",
      "properties": {
        "Host": {
          "type": "string"
        },
        "Port": {
          "format": "int32",
          "type": "integer"
        },
        "UserName": {
          "type": "string"
        },
        "Password": {
          "type": "string"
        },
        "Domain": {
          "type": "string"
        },
        "EnableSsl": {
          "type": "boolean"
        },
        "UseDefaultCredentials": {
          "type": "boolean"
        },
        "DefaultFromAddress": {
          "type": "string"
        },
        "DefaultFromDisplayName": {
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[TaskCatalogDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TaskCatalogDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskCatalogDto"
          }
        }
      }
    },
    "TaskCatalogDto": {
      "description": "Task Catalog entity for external access",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the Task Catalog.",
          "type": "string"
        },
        "Description": {
          "description": "Description of this task catalog.",
          "type": "string"
        },
        "LastModificationTime": {
          "format": "date-time",
          "description": "Last Modification time of task catalog",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TaskCatalogRequest": {
      "description": "Task Catalog entity for Creating or Updating Task Catalog",
      "required": [
        "Name"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the Task Catalog.",
          "type": "string"
        },
        "Description": {
          "description": "Description of this task catalog.",
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[TaskDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TaskDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskDto"
          }
        }
      }
    },
    "TaskDto": {
      "description": "Simple Task entity for external access",
      "type": "object",
      "properties": {
        "Title": {
          "description": "Gets or sets title of this task.",
          "type": "string"
        },
        "Type": {
          "description": "Gets or sets type of this task.",
          "enum": [
            "DocumentValidationTask",
            "ExternalTask",
            "FormTask"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskDtoType",
            "modelAsString": false
          }
        },
        "Priority": {
          "description": "Gets or sets priority of this task.",
          "enum": [
            "Low",
            "Medium",
            "High",
            "Critical"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskDtoPriority",
            "modelAsString": false
          }
        },
        "Status": {
          "description": "Gets or sets the status of this task.",
          "enum": [
            "Unassigned",
            "Pending",
            "Completed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TaskDtoStatus",
            "modelAsString": false
          }
        },
        "AssignedToUser": {
          "$ref": "#/definitions/UserLoginInfoDto",
          "description": "Gets or sets stores the actual assigned user, if any."
        },
        "CreationTime": {
          "format": "date-time",
          "description": "Gets or sets time at which this task was created.",
          "type": "string"
        },
        "TaskCatalogName": {
          "description": "Gets or sets the task catalog/category of the task",
          "type": "string"
        },
        "OrganizationUnitId": {
          "format": "int64",
          "description": "Gets or sets organization unit id of the task",
          "type": "integer"
        },
        "IsCompleted": {
          "type": "boolean"
        },
        "ExternalTag": {
          "description": "Name of external system where this task is handled",
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TaskAssignmentRequest": {
      "description": "Class to hold assignment request details of a task.",
      "type": "object",
      "properties": {
        "TaskId": {
          "format": "int64",
          "description": "Gets or sets the taskId for this task assignment.",
          "minimum": 1,
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "description": "Gets or sets the userId for this task assignment.",
          "type": "integer"
        },
        "UserNameOrEmail": {
          "description": "Gets or sets the UserName or Email for this task assignment. If UserId is provided, this property is ignored.",
          "type": "string"
        }
      }
    },
    "ODataValue[IEnumerable[TaskAssignmentErrorResponse]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAssignmentErrorResponse"
          }
        }
      }
    },
    "TaskAssignmentErrorResponse": {
      "description": "Class to hold error details a task assignment.",
      "type": "object",
      "properties": {
        "TaskId": {
          "format": "int64",
          "description": "Gets or sets the taskId for this task assignment.",
          "type": "integer"
        },
        "UserId": {
          "format": "int64",
          "description": "Gets or sets the userId for this task assignment, null in case of task unassignment",
          "type": "integer"
        },
        "ErrorCode": {
          "format": "int32",
          "description": "Gets or sets the code of error occurred during this task's assignment.",
          "type": "integer"
        },
        "ErrorMessage": {
          "description": "Gets or sets the translated message of error occurred during this task's assignment.",
          "type": "string"
        },
        "UserNameOrEmail": {
          "description": "Gets or sets the userNameOrEmail for this task assignment",
          "type": "string"
        }
      }
    },
    "ODataQueryOptions[UserLoginInfoDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[UserLoginInfoDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLoginInfoDto"
          }
        }
      }
    },
    "ODataQueryOptions[TenantDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TenantDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TenantDto"
          }
        }
      }
    },
    "TenantDto": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the tenant.",
          "maxLength": 64,
          "minLength": 0,
          "pattern": "^[\\p{L}][\\p{L}0-9-_]+$",
          "type": "string"
        },
        "Key": {
          "description": "Unique Key of the tenant.",
          "type": "string"
        },
        "DisplayName": {
          "description": "Display name of the the tenant",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "AdminEmailAddress": {
          "description": "Default tenant's admin user account email address.",
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "AdminName": {
          "description": "Default tenant's admin user account name.",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "AdminSurname": {
          "description": "Default tenant's admin user account surname.",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "AdminUserKey": {
          "description": "Default tenant's admin user account key.",
          "type": "string"
        },
        "AdminPassword": {
          "description": "Default tenant's admin user account password. Only valid for create/update operations.",
          "maxLength": 32,
          "minLength": 0,
          "type": "string"
        },
        "LastLoginTime": {
          "format": "date-time",
          "description": "The last time a user logged in this tenant.",
          "type": "string"
        },
        "IsActive": {
          "description": "Specifies if the tenant is active or not.",
          "type": "boolean"
        },
        "AcceptedDomainsList": {
          "description": "Accepted DNS list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "HasConnectionString": {
          "description": "Specifies if the the tenant has a connection string defined",
          "type": "boolean"
        },
        "ConnectionString": {
          "description": "DB connection string",
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "License": {
          "$ref": "#/definitions/TenantLicenseDto",
          "description": "Licensing info."
        },
        "Id": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "TenantLicenseDto": {
      "type": "object",
      "properties": {
        "HostLicenseId": {
          "format": "int64",
          "description": "The host license Id.",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "description": "The date it was uploaded.",
          "type": "string"
        },
        "Code": {
          "description": "The license code.",
          "type": "string"
        },
        "Allowed": {
          "description": "Contains the number of allowed licenses for each type",
          "type": "object",
          "additionalProperties": {
            "format": "int64",
            "type": "integer"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[TestCaseDefinitionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TestCaseDefinitionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestCaseDefinitionDto"
          }
        }
      }
    },
    "TestCaseDefinitionDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "PackageIdentifier": {
          "type": "string"
        },
        "UniqueId": {
          "format": "uuid",
          "type": "string"
        },
        "AppVersion": {
          "type": "string"
        },
        "CreatedVersion": {
          "type": "string"
        },
        "LatestVersion": {
          "type": "string"
        },
        "LatestPrereleaseVersion": {
          "type": "string"
        },
        "LastModificationTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifierUserId": {
          "format": "int64",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatorUserId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[TestCaseExecutionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TestCaseExecutionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestCaseExecutionDto"
          }
        }
      }
    },
    "TestCaseExecutionDto": {
      "type": "object",
      "properties": {
        "JobId": {
          "format": "int64",
          "type": "integer"
        },
        "JobKey": {
          "format": "uuid",
          "type": "string"
        },
        "Job": {
          "$ref": "#/definitions/TestJobDto"
        },
        "TestSetExecutionId": {
          "format": "int64",
          "type": "integer"
        },
        "TestSetExecution": {
          "$ref": "#/definitions/TestSetExecutionDto"
        },
        "TestCaseId": {
          "format": "int64",
          "type": "integer"
        },
        "TestCase": {
          "$ref": "#/definitions/TestCaseDto"
        },
        "ReleaseVersionId": {
          "format": "int64",
          "type": "integer"
        },
        "VersionNumber": {
          "type": "string"
        },
        "EntryPointPath": {
          "type": "string"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "Pending",
            "Running",
            "Cancelling",
            "Passed",
            "Failed",
            "Cancelled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TestCaseExecutionDtoStatus",
            "modelAsString": false
          }
        },
        "TestCaseAssertions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestCaseAssertionDto"
          }
        },
        "DataVariationIdentifier": {
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestJobDto": {
      "type": "object",
      "properties": {
        "RobotName": {
          "type": "string"
        },
        "MachineName": {
          "type": "string"
        },
        "Info": {
          "type": "string"
        },
        "State": {
          "enum": [
            "Pending",
            "Running",
            "Stopping",
            "Terminating",
            "Faulted",
            "Successful",
            "Stopped",
            "Suspended",
            "Resumed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TestJobDtoState",
            "modelAsString": false
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestSetExecutionDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "TestSetId": {
          "format": "int64",
          "type": "integer"
        },
        "TestSet": {
          "$ref": "#/definitions/TestSetDto"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string"
        },
        "EndTime": {
          "format": "date-time",
          "type": "string"
        },
        "Status": {
          "enum": [
            "Pending",
            "Running",
            "Cancelling",
            "Passed",
            "Failed",
            "Cancelled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TestSetExecutionDtoStatus",
            "modelAsString": false
          }
        },
        "TriggerType": {
          "enum": [
            "Manual",
            "Scheduled",
            "ExternalTool"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TestSetExecutionDtoTriggerType",
            "modelAsString": false
          }
        },
        "ScheduleId": {
          "format": "int64",
          "type": "integer"
        },
        "BatchExecutionKey": {
          "format": "uuid",
          "type": "string"
        },
        "TestCaseExecutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestCaseExecutionDto"
          }
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatorUserId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestCaseDto": {
      "required": [
        "DefinitionId",
        "ReleaseId",
        "VersionNumber"
      ],
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "DefinitionId": {
          "format": "int64",
          "type": "integer"
        },
        "Definition": {
          "$ref": "#/definitions/TestCaseDefinitionDto"
        },
        "ReleaseId": {
          "format": "int64",
          "type": "integer"
        },
        "VersionNumber": {
          "type": "string"
        },
        "TestSetId": {
          "format": "int64",
          "type": "integer"
        },
        "TestSet": {
          "$ref": "#/definitions/TestSetDto"
        },
        "LastModificationTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifierUserId": {
          "format": "int64",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatorUserId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestCaseAssertionDto": {
      "type": "object",
      "properties": {
        "Message": {
          "type": "string"
        },
        "Payload": {
          "type": "string"
        },
        "Succeeded": {
          "type": "boolean"
        },
        "TestCaseExecutionId": {
          "format": "int64",
          "type": "integer"
        },
        "HasScreenshot": {
          "type": "boolean"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestSetDto": {
      "required": [
        "Name",
        "Packages",
        "TestCases"
      ],
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "SourceType": {
          "enum": [
            "User",
            "ExternalTool"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TestSetDtoSourceType",
            "modelAsString": false
          }
        },
        "EnvironmentId": {
          "format": "int64",
          "type": "integer"
        },
        "Environment": {
          "$ref": "#/definitions/TestEnvironmentDto"
        },
        "TestCaseCount": {
          "format": "int32",
          "type": "integer"
        },
        "Packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestSetPackageDto"
          }
        },
        "TestCases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestCaseDto"
          }
        },
        "IsDeleted": {
          "type": "boolean"
        },
        "DeleterUserId": {
          "format": "int64",
          "type": "integer"
        },
        "DeletionTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastModificationTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifierUserId": {
          "format": "int64",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatorUserId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestEnvironmentDto": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "TestSetPackageDto": {
      "required": [
        "VersionMask",
        "PackageIdentifier"
      ],
      "type": "object",
      "properties": {
        "TestSetId": {
          "format": "int64",
          "type": "integer"
        },
        "TestSet": {
          "$ref": "#/definitions/TestSetDto"
        },
        "VersionMask": {
          "type": "string"
        },
        "PackageIdentifier": {
          "type": "string"
        },
        "IncludePrerelease": {
          "type": "boolean"
        },
        "LastModificationTime": {
          "format": "date-time",
          "type": "string"
        },
        "LastModifierUserId": {
          "format": "int64",
          "type": "integer"
        },
        "CreationTime": {
          "format": "date-time",
          "type": "string"
        },
        "CreatorUserId": {
          "format": "int64",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[TestSetExecutionDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TestSetExecutionDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestSetExecutionDto"
          }
        }
      }
    },
    "ODataQueryOptions[TestSetDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TestSetDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestSetDto"
          }
        }
      }
    },
    "ODataQueryOptions[TestSetScheduleDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[TestSetScheduleDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestSetScheduleDto"
          }
        }
      }
    },
    "TestSetScheduleDto": {
      "required": [
        "Name",
        "TestSetId",
        "TimeZoneId"
      ],
      "type": "object",
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "TestSetId": {
          "format": "int64",
          "type": "integer"
        },
        "TestSetName": {
          "type": "string"
        },
        "TimeZoneId": {
          "type": "string"
        },
        "TimeZoneIana": {
          "type": "string"
        },
        "CalendarId": {
          "format": "int64",
          "type": "integer"
        },
        "CalendarName": {
          "type": "string"
        },
        "CronExpression": {
          "type": "string"
        },
        "CronDetails": {
          "type": "string"
        },
        "CronSummary": {
          "type": "string"
        },
        "NextOccurrence": {
          "format": "date-time",
          "type": "string"
        },
        "DisableDate": {
          "format": "date-time",
          "type": "string"
        },
        "ExternalJobKey": {
          "type": "string"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ODataQueryOptions[UserLoginAttemptDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[UserLoginAttemptDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserLoginAttemptDto"
          }
        }
      }
    },
    "UserLoginAttemptDto": {
      "type": "object",
      "properties": {
        "CreationTime": {
          "format": "date-time",
          "description": "The date and time when the action was performed.",
          "type": "string"
        },
        "ClientIpAddress": {
          "description": "Client IP Address",
          "type": "string"
        },
        "ClientName": {
          "description": "Client name",
          "type": "string"
        },
        "BrowserInfo": {
          "description": "Browser Information",
          "type": "string"
        },
        "Result": {
          "description": "The login's attempt result",
          "enum": [
            "Success",
            "InvalidUserNameOrEmailAddress",
            "InvalidPassword",
            "UserIsNotActive",
            "InvalidTenancyName",
            "TenantIsNotActive",
            "UserEmailIsNotConfirmed",
            "UnknownExternalLogin",
            "LockedOut",
            "UserPhoneNumberIsNotConfirmed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "UserLoginAttemptDtoResult",
            "modelAsString": false
          }
        },
        "UserId": {
          "format": "int64",
          "description": "The user that authenticated",
          "type": "integer"
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "UserPermissionsCollection": {
      "description": "Stores information about all the permissions a user is associated with in Orchestrator.",
      "type": "object",
      "properties": {
        "UserId": {
          "format": "int64",
          "description": "The Id of the user associated with the permissions.",
          "type": "integer"
        },
        "Permissions": {
          "description": "The collection of names of the permissions the user is associated with.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ODataQueryOptions[WebhookDto]": {
      "type": "object",
      "properties": {
        "IfMatch": {
          "type": "object",
          "readOnly": true
        },
        "IfNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "Context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "Request": {
          "type": "object",
          "readOnly": true
        },
        "RawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "SelectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "Apply": {
          "$ref": "#/definitions/ApplyQueryOption",
          "readOnly": true
        },
        "Filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "OrderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "Skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "Top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "Count": {
          "$ref": "#/definitions/CountQueryOption",
          "readOnly": true
        },
        "Validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      }
    },
    "ODataValue[IEnumerable[WebhookDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookDto"
          }
        }
      }
    },
    "WebhookDto": {
      "required": [
        "Url",
        "Enabled",
        "SubscribeToAllEvents",
        "AllowInsecureSsl"
      ],
      "type": "object",
      "properties": {
        "Url": {
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "Enabled": {
          "type": "boolean"
        },
        "Secret": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "SubscribeToAllEvents": {
          "type": "boolean"
        },
        "AllowInsecureSsl": {
          "type": "boolean"
        },
        "Events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookEventDto"
          }
        },
        "Id": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "WebhookEventDto": {
      "required": [
        "EventType"
      ],
      "type": "object",
      "properties": {
        "EventType": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        }
      }
    },
    "ODataValue[IEnumerable[WebhookEventTypeDto]]": {
      "type": "object",
      "properties": {
        "@odata.context": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookEventTypeDto"
          }
        }
      }
    },
    "WebhookEventTypeDto": {
      "description": "",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Event type key",
          "type": "string"
        },
        "Group": {
          "description": "Group",
          "type": "string"
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {},
  "security": [],
  "tags": []
}